/*! For license information please see offscreen.js.LICENSE.txt */
(()=>{var e={2838:function(e){e.exports=function(){"use strict";var e=Object.hasOwnProperty,t=Object.setPrototypeOf,n=Object.isFrozen,r=Object.freeze,o=Object.seal,i=Object.create,a="undefined"!=typeof Reflect&&Reflect,l=a.apply,s=a.construct;l||(l=function(e,t,n){return e.apply(t,n)}),r||(r=function(e){return e}),o||(o=function(e){return e}),s||(s=function(e,t){return new(Function.prototype.bind.apply(e,[null].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(t))))});var c,u=A(Array.prototype.forEach),d=A(Array.prototype.pop),f=A(Array.prototype.push),p=A(String.prototype.toLowerCase),m=A(String.prototype.match),g=A(String.prototype.replace),y=A(String.prototype.indexOf),h=A(String.prototype.trim),v=A(RegExp.prototype.test),b=(c=TypeError,function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return s(c,t)});function A(e){return function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return l(e,t,r)}}function T(e,r){t&&t(e,null);for(var o=r.length;o--;){var i=r[o];if("string"==typeof i){var a=p(i);a!==i&&(n(r)||(r[o]=a),i=a)}e[i]=!0}return e}function w(t){var n=i(null),r=void 0;for(r in t)l(e,t,[r])&&(n[r]=t[r]);return n}var x=r(["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","picture","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr"]),k=r(["svg","a","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","audio","canvas","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","style","switch","symbol","text","textpath","title","tref","tspan","video","view","vkern"]),S=r(["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]),L=r(["math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmultiscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mspace","msqrt","mstyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover"]),_=r(["#text"]),E=r(["accept","action","align","alt","autocapitalize","autocomplete","autopictureinpicture","autoplay","background","bgcolor","border","capture","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","controls","controlslist","coords","crossorigin","datetime","decoding","default","dir","disabled","disablepictureinpicture","disableremoteplayback","download","draggable","enctype","enterkeyhint","face","for","headers","height","hidden","high","href","hreflang","id","inputmode","integrity","ismap","kind","label","lang","list","loading","loop","low","max","maxlength","media","method","min","minlength","multiple","muted","name","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","playsinline","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","role","rows","rowspan","spellcheck","scope","selected","shape","size","sizes","span","srclang","start","src","srcset","step","style","summary","tabindex","title","translate","type","usemap","valign","value","width","xmlns"]),D=r(["accent-height","accumulate","additive","alignment-baseline","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","class","clip","clippathunits","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","fill","fill-opacity","fill-rule","filter","filterunits","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","height","href","id","image-rendering","in","in2","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lang","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","media","method","mode","min","name","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","preserveaspectratio","primitiveunits","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","specularconstant","specularexponent","spreadmethod","startoffset","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","style","surfacescale","systemlanguage","tabindex","targetx","targety","transform","text-anchor","text-decoration","text-rendering","textlength","type","u1","u2","unicode","values","viewbox","visibility","version","vert-adv-y","vert-origin-x","vert-origin-y","width","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","xmlns","y","y1","y2","z","zoomandpan"]),M=r(["accent","accentunder","align","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","dir","display","displaystyle","encoding","fence","frame","height","href","id","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","width","xmlns"]),N=r(["xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]),O=o(/\{\{[\s\S]*|[\s\S]*\}\}/gm),C=o(/<%[\s\S]*|[\s\S]*%>/gm),F=o(/^data-[\-\w.\u00B7-\uFFFF]/),R=o(/^aria-[\-\w]+$/),I=o(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i),z=o(/^(?:\w+script|data):/i),H=o(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g),P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function U(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var j=function(){return"undefined"==typeof window?null:window};return function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:j(),n=function(t){return e(t)};if(n.version="2.1.1",n.removed=[],!t||!t.document||9!==t.document.nodeType)return n.isSupported=!1,n;var o=t.document,i=t.document,a=t.DocumentFragment,l=t.HTMLTemplateElement,s=t.Node,c=t.NodeFilter,A=t.NamedNodeMap,B=void 0===A?t.NamedNodeMap||t.MozNamedAttrMap:A,V=t.Text,q=t.Comment,W=t.DOMParser,$=t.trustedTypes;if("function"==typeof l){var G=i.createElement("template");G.content&&G.content.ownerDocument&&(i=G.content.ownerDocument)}var Y=function(e,t){if("object"!==(void 0===e?"undefined":P(e))||"function"!=typeof e.createPolicy)return null;var n=null,r="data-tt-policy-suffix";t.currentScript&&t.currentScript.hasAttribute(r)&&(n=t.currentScript.getAttribute(r));var o="dompurify"+(n?"#"+n:"");try{return e.createPolicy(o,{createHTML:function(e){return e}})}catch(e){return console.warn("TrustedTypes policy "+o+" could not be created."),null}}($,o),K=Y&&_e?Y.createHTML(""):"",J=i,X=J.implementation,Z=J.createNodeIterator,Q=J.getElementsByTagName,ee=J.createDocumentFragment,te=o.importNode,ne={};try{ne=w(i).documentMode?i.documentMode:{}}catch(e){}var re={};n.isSupported=X&&void 0!==X.createHTMLDocument&&9!==ne;var oe=O,ie=C,ae=F,le=R,se=z,ce=H,ue=I,de=null,fe=T({},[].concat(U(x),U(k),U(S),U(L),U(_))),pe=null,me=T({},[].concat(U(E),U(D),U(M),U(N))),ge=null,ye=null,he=!0,ve=!0,be=!1,Ae=!1,Te=!1,we=!1,xe=!1,ke=!1,Se=!1,Le=!1,_e=!1,Ee=!0,De=!0,Me=!1,Ne={},Oe=T({},["annotation-xml","audio","colgroup","desc","foreignobject","head","iframe","math","mi","mn","mo","ms","mtext","noembed","noframes","plaintext","script","style","svg","template","thead","title","video","xmp"]),Ce=null,Fe=T({},["audio","video","img","source","image","track"]),Re=null,Ie=T({},["alt","class","for","id","label","name","pattern","placeholder","summary","title","value","style","xmlns"]),ze=null,He=i.createElement("form"),Pe=function(e){ze&&ze===e||(e&&"object"===(void 0===e?"undefined":P(e))||(e={}),e=w(e),de="ALLOWED_TAGS"in e?T({},e.ALLOWED_TAGS):fe,pe="ALLOWED_ATTR"in e?T({},e.ALLOWED_ATTR):me,Re="ADD_URI_SAFE_ATTR"in e?T(w(Ie),e.ADD_URI_SAFE_ATTR):Ie,Ce="ADD_DATA_URI_TAGS"in e?T(w(Fe),e.ADD_DATA_URI_TAGS):Fe,ge="FORBID_TAGS"in e?T({},e.FORBID_TAGS):{},ye="FORBID_ATTR"in e?T({},e.FORBID_ATTR):{},Ne="USE_PROFILES"in e&&e.USE_PROFILES,he=!1!==e.ALLOW_ARIA_ATTR,ve=!1!==e.ALLOW_DATA_ATTR,be=e.ALLOW_UNKNOWN_PROTOCOLS||!1,Ae=e.SAFE_FOR_TEMPLATES||!1,Te=e.WHOLE_DOCUMENT||!1,ke=e.RETURN_DOM||!1,Se=e.RETURN_DOM_FRAGMENT||!1,Le=e.RETURN_DOM_IMPORT||!1,_e=e.RETURN_TRUSTED_TYPE||!1,xe=e.FORCE_BODY||!1,Ee=!1!==e.SANITIZE_DOM,De=!1!==e.KEEP_CONTENT,Me=e.IN_PLACE||!1,ue=e.ALLOWED_URI_REGEXP||ue,Ae&&(ve=!1),Se&&(ke=!0),Ne&&(de=T({},[].concat(U(_))),pe=[],!0===Ne.html&&(T(de,x),T(pe,E)),!0===Ne.svg&&(T(de,k),T(pe,D),T(pe,N)),!0===Ne.svgFilters&&(T(de,S),T(pe,D),T(pe,N)),!0===Ne.mathMl&&(T(de,L),T(pe,M),T(pe,N))),e.ADD_TAGS&&(de===fe&&(de=w(de)),T(de,e.ADD_TAGS)),e.ADD_ATTR&&(pe===me&&(pe=w(pe)),T(pe,e.ADD_ATTR)),e.ADD_URI_SAFE_ATTR&&T(Re,e.ADD_URI_SAFE_ATTR),De&&(de["#text"]=!0),Te&&T(de,["html","head","body"]),de.table&&(T(de,["tbody"]),delete ge.tbody),r&&r(e),ze=e)},Ue=function(e){f(n.removed,{element:e});try{e.parentNode.removeChild(e)}catch(t){e.outerHTML=K}},je=function(e,t){try{f(n.removed,{attribute:t.getAttributeNode(e),from:t})}catch(e){f(n.removed,{attribute:null,from:t})}t.removeAttribute(e)},Be=function(e){var t=void 0,n=void 0;if(xe)e="<remove></remove>"+e;else{var r=m(e,/^[\r\n\t ]+/);n=r&&r[0]}var o=Y?Y.createHTML(e):e;try{t=(new W).parseFromString(o,"text/html")}catch(e){}if(!t||!t.documentElement){var a=(t=X.createHTMLDocument("")).body;a.parentNode.removeChild(a.parentNode.firstElementChild),a.outerHTML=o}return e&&n&&t.body.insertBefore(i.createTextNode(n),t.body.childNodes[0]||null),Q.call(t,Te?"html":"body")[0]},Ve=function(e){return Z.call(e.ownerDocument||e,e,c.SHOW_ELEMENT|c.SHOW_COMMENT|c.SHOW_TEXT,(function(){return c.FILTER_ACCEPT}),!1)},qe=function(e){return"object"===(void 0===s?"undefined":P(s))?e instanceof s:e&&"object"===(void 0===e?"undefined":P(e))&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName},We=function(e,t,r){re[e]&&u(re[e],(function(e){e.call(n,t,r,ze)}))},$e=function(e){var t,r=void 0;if(We("beforeSanitizeElements",e,null),!((t=e)instanceof V||t instanceof q||"string"==typeof t.nodeName&&"string"==typeof t.textContent&&"function"==typeof t.removeChild&&t.attributes instanceof B&&"function"==typeof t.removeAttribute&&"function"==typeof t.setAttribute&&"string"==typeof t.namespaceURI))return Ue(e),!0;if(m(e.nodeName,/[\u0080-\uFFFF]/))return Ue(e),!0;var o=p(e.nodeName);if(We("uponSanitizeElement",e,{tagName:o,allowedTags:de}),("svg"===o||"math"===o)&&0!==e.querySelectorAll("p, br").length)return Ue(e),!0;if(!qe(e.firstElementChild)&&(!qe(e.content)||!qe(e.content.firstElementChild))&&v(/<[!/\w]/g,e.innerHTML)&&v(/<[!/\w]/g,e.textContent))return Ue(e),!0;if(!de[o]||ge[o]){if(De&&!Oe[o]&&"function"==typeof e.insertAdjacentHTML)try{var i=e.innerHTML;e.insertAdjacentHTML("AfterEnd",Y?Y.createHTML(i):i)}catch(e){}return Ue(e),!0}return"noscript"!==o&&"noembed"!==o||!v(/<\/no(script|embed)/i,e.innerHTML)?(Ae&&3===e.nodeType&&(r=e.textContent,r=g(r,oe," "),r=g(r,ie," "),e.textContent!==r&&(f(n.removed,{element:e.cloneNode()}),e.textContent=r)),We("afterSanitizeElements",e,null),!1):(Ue(e),!0)},Ge=function(e,t,n){if(Ee&&("id"===t||"name"===t)&&(n in i||n in He))return!1;if(ve&&v(ae,t));else if(he&&v(le,t));else{if(!pe[t]||ye[t])return!1;if(Re[t]);else if(v(ue,g(n,ce,"")));else if("src"!==t&&"xlink:href"!==t&&"href"!==t||"script"===e||0!==y(n,"data:")||!Ce[e])if(be&&!v(se,g(n,ce,"")));else if(n)return!1}return!0},Ye=function(e){var t=void 0,r=void 0,o=void 0,i=void 0;We("beforeSanitizeAttributes",e,null);var a=e.attributes;if(a){var l={attrName:"",attrValue:"",keepAttr:!0,allowedAttributes:pe};for(i=a.length;i--;){var s=t=a[i],c=s.name,u=s.namespaceURI;if(r=h(t.value),o=p(c),l.attrName=o,l.attrValue=r,l.keepAttr=!0,l.forceKeepAttr=void 0,We("uponSanitizeAttribute",e,l),r=l.attrValue,!l.forceKeepAttr&&(je(c,e),l.keepAttr))if(v(/\/>/i,r))je(c,e);else{Ae&&(r=g(r,oe," "),r=g(r,ie," "));var f=e.nodeName.toLowerCase();if(Ge(f,o,r))try{u?e.setAttributeNS(u,c,r):e.setAttribute(c,r),d(n.removed)}catch(e){}}}We("afterSanitizeAttributes",e,null)}},Ke=function e(t){var n=void 0,r=Ve(t);for(We("beforeSanitizeShadowDOM",t,null);n=r.nextNode();)We("uponSanitizeShadowNode",n,null),$e(n)||(n.content instanceof a&&e(n.content),Ye(n));We("afterSanitizeShadowDOM",t,null)};return n.sanitize=function(e,r){var i=void 0,l=void 0,c=void 0,u=void 0,d=void 0;if(e||(e="\x3c!--\x3e"),"string"!=typeof e&&!qe(e)){if("function"!=typeof e.toString)throw b("toString is not a function");if("string"!=typeof(e=e.toString()))throw b("dirty is not a string, aborting")}if(!n.isSupported){if("object"===P(t.toStaticHTML)||"function"==typeof t.toStaticHTML){if("string"==typeof e)return t.toStaticHTML(e);if(qe(e))return t.toStaticHTML(e.outerHTML)}return e}if(we||Pe(r),n.removed=[],"string"==typeof e&&(Me=!1),Me);else if(e instanceof s)1===(l=(i=Be("\x3c!----\x3e")).ownerDocument.importNode(e,!0)).nodeType&&"BODY"===l.nodeName||"HTML"===l.nodeName?i=l:i.appendChild(l);else{if(!ke&&!Ae&&!Te&&-1===e.indexOf("<"))return Y&&_e?Y.createHTML(e):e;if(!(i=Be(e)))return ke?null:K}i&&xe&&Ue(i.firstChild);for(var f=Ve(Me?e:i);c=f.nextNode();)3===c.nodeType&&c===u||$e(c)||(c.content instanceof a&&Ke(c.content),Ye(c),u=c);if(u=null,Me)return e;if(ke){if(Se)for(d=ee.call(i.ownerDocument);i.firstChild;)d.appendChild(i.firstChild);else d=i;return Le&&(d=te.call(o,d,!0)),d}var p=Te?i.outerHTML:i.innerHTML;return Ae&&(p=g(p,oe," "),p=g(p,ie," ")),Y&&_e?Y.createHTML(p):p},n.setConfig=function(e){Pe(e),we=!0},n.clearConfig=function(){ze=null,we=!1},n.isValidAttribute=function(e,t,n){ze||Pe({});var r=p(e),o=p(t);return Ge(r,o,n)},n.addHook=function(e,t){"function"==typeof t&&(re[e]=re[e]||[],f(re[e],t))},n.removeHook=function(e){re[e]&&d(re[e])},n.removeHooks=function(e){re[e]&&(re[e]=[])},n.removeAllHooks=function(){re={}},n}()}()},8226:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function l(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}s((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=n(3137),i=n(933),a=n(9229);chrome.runtime.onMessage.addListener((function(e,t,n){return r(this,void 0,void 0,(function*(){var t,n,r;if("offscreen"!==e.target)return!1;switch(e.type){case"offscreen-notifications":let{notification:s,name:c,count:u,lastTime:d,timeModified:f}=yield(0,a.loadAssignmentNotifications)(e.data.url,e.data.lastTime);chrome.runtime.sendMessage({type:"notification",data:{notification:s,name:c,count:u,lastTime:d,timeModified:f}});break;case"offscreen-analytics":l||(yield(0,o.initializeAnalytics)({documentContext:!1,isAnalyticsEnabled:"Firefox"!==(0,i.getBrowser)()&&"disabled"!==e.data.settings.analytics,selectedTheme:null!==(t=e.data.settings.theme)&&void 0!==t?t:"<unset>",selectedBeta:null!==(n=e.data.settings.beta)&&void 0!==n?n:"<unset>",currentVersion:e.data.settings.version,newVersion:null!==(r=e.data.settings.newVersion)&&void 0!==r?r:"<unset>",randomUserId:e.data.settings.randomUserId,themeIsModern:"<unset>"}),l=!0),(0,o.trackEvent)(e.data.name,e.data.props);break;default:return console.warn(`Unexpected message type received: '${e.type}'.`),!1}}))}));let l=!1},3137:function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function l(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}s((r=r.apply(e,t||[])).next())}))},r=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.initializeAnalytics=t.getAnalyticsUserId=t.trackEvent=void 0,t.trackEvent=function(e,t={}){var{legacyTarget:n,legacyAction:o,legacyLabel:i,legacyValue:a,id:l,context:s,value:c}=t;r(t,["legacyTarget","legacyAction","legacyLabel","legacyValue","id","context","value"]),console.debug("[S+] Tracking disabled by user",arguments)},t.getAnalyticsUserId=function(){return n(this,void 0,void 0,(function*(){let e=yield chrome.storage.local.get({randomUserId:null});if(!e.randomUserId){let e=function(){var e=new Uint8Array(32);crypto.getRandomValues(e);for(var t="",n=0;n<e.length;++n)t+=e[n].toString(16);return t}();return yield chrome.storage.local.set({randomUserId:e}),e}return e.randomUserId}))},t.initializeAnalytics=function(e){return n(this,arguments,void 0,(function*({documentContext:e,isAnalyticsEnabled:n,selectedTheme:o,selectedBeta:i,currentVersion:a,newVersion:l,randomUserId:s,themeIsModern:c}){n&&function(){function n(...e){var t;null===(t=globalThis.dataLayer)||void 0===t||t.push(arguments)}function u(e){if(!e.isTrusted)return;let n=e.currentTarget||e.target;(0,t.trackEvent)("tracking_link_click",{legacyTarget:n.dataset.splusTrackingId||n.id||"Unlabeled Button",legacyAction:"click",legacyLabel:n.dataset.splusTrackingContext||"Tracking Link",legacyValue:n.dataset.splusTrackingValue||e.button,id:n.dataset.splusTrackingId||n.id||"Unlabeled Button",context:n.dataset.splusTrackingContext||"Tracking Link",value:n.dataset.splusTrackingValue})}if(globalThis.dataLayer=globalThis.dataLayer||[],n("js",new Date),n("config","G-YM6B00RDYC",{page_location:location.href.replace(/\/\d{3,}\b/g,"/*"),page_path:location.pathname.replace(/\/\d{3,}\b/g,"/*"),page_title:null,user_id:s,user_properties:{theme:o,activeBeta:i,lastEnabledVersion:l,extensionVersion:a,domain:location.host,modernTheme:c}}),t.trackEvent=function(e,t={}){var{legacyTarget:o,legacyAction:i,legacyLabel:a,legacyValue:l,id:s,context:c,value:u}=t,d=r(t,["legacyTarget","legacyAction","legacyLabel","legacyValue","id","context","value"]);let f=Object.assign({id:s,context:c,value:u},d);console.debug("[S+] Tracked event:",e,f),n("event",e,f)},e){let f=new Set,p=new MutationObserver(((e,t)=>{for(let e of document.querySelectorAll(".splus-track-clicks:not(.splus-tracked)"))f.has(e)||(e.addEventListener("click",u),e.addEventListener("auxclick",u),e.classList.add("splus-tracked"),f.add(e))}));var d=setInterval((function(){"complete"===document.readyState&&(clearInterval(d),m())}),10);function m(){p.observe(document.body,{childList:!0,subtree:!0});for(let e of document.querySelectorAll(".splus-track-clicks"))f.has(e)||(e.addEventListener("click",u),e.addEventListener("auxclick",u),e.classList.add("splus-tracked"),f.add(e))}}}()}))}},933:(e,t)=>{"use strict";function n(e,t,n,r){let o=document.createElement(e);if(t)for(let e of t)o.classList.add(e);if(n)for(let e in n)if(n[e]instanceof Object&&!(n[e]instanceof Function))for(let t in n[e])o[e][t]=n[e][t];else void 0!==e&&void 0!==n[e]&&(o[e]=n[e]);if(r)for(let e of r)o.appendChild(e);return o}function r(e,t,r){return n("span",["submit-span-wrapper","splus-modal-button"],{onclick:r},[n("input",["form-submit","splus-track-clicks"],{type:"button",value:t,id:e,dataset:{splusTrackingContext:"S+ Button"}})])}function o(...e){let t=document.createElementNS("http://www.w3.org/2000/svg","circle");t.setAttribute("cx","250"),t.setAttribute("cy","250"),t.setAttribute("r","230"),t.setAttribute("style","fill: none; stroke-width: 35px; stroke: currentColor;");let n=document.createElementNS("http://www.w3.org/2000/svg","line");n.setAttribute("x1","250"),n.setAttribute("y1","125"),n.setAttribute("x2","250"),n.setAttribute("y2","375"),n.setAttribute("style","stroke-linecap: round; stroke-width: 35px; stroke: currentColor;");let r=document.createElementNS("http://www.w3.org/2000/svg","line");r.setAttribute("x1","125"),r.setAttribute("y1","250"),r.setAttribute("x2","375"),r.setAttribute("y2","250"),r.setAttribute("style","stroke-linecap: round; stroke-width: 35px; stroke: currentColor;");let o=document.createElementNS("http://www.w3.org/2000/svg","svg");return o.setAttribute("viewBox","0 0 500 500"),o.append(t,n,r),e&&o.classList.add(...e),o}Object.defineProperty(t,"__esModule",{value:!0}),t.waitForElement=t.createSvgLogo=t.setCSSVariable=t.getParents=t.isVisible=t.getBrowser=t.createButtonWithLogo=t.createButton=t.createElement=void 0,t.createElement=n,t.createButton=r,t.createButtonWithLogo=function(e,t,n){let i=r(e,t,n),a=o();Object.assign(a.style,{verticalAlign:"middle",paddingLeft:"4px",width:"18px"}),i.prepend(a),i.style.setProperty("height","36px","important");let l=i.querySelector("input");return l.style.paddingLeft="4px",l.style.setProperty("height","36px","important"),i.style.cursor="pointer",i},t.getBrowser=function(){return void 0!==globalThis.chrome?void 0!==globalThis.browser?"Firefox":"Chrome":"Other"},t.isVisible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},t.getParents=function(e,t){var n,r=[];for(t&&(n=t.charAt(0));e&&e!==document.documentElement;e=e.parentNode)t?("."===n&&e.classList.contains(t.substr(1))&&r.push(e),"#"===n&&e.id===t.substr(1)&&r.push(e),"["===n&&e.hasAttribute(t.substr(1,t.length-1))&&r.push(e),e.tagName.toLowerCase()===t&&r.push(e)):r.push(e);return r},t.setCSSVariable=function(e,t){document.documentElement.style.setProperty(`--${e}`,null!=t?t:null)},t.createSvgLogo=o,t.waitForElement=function(e,t=50){return new Promise((n=>{let r=setInterval((()=>{let t=document.querySelector(e);t&&(clearInterval(r),n(t))}),t)}))}},2589:(e,t)=>{"use strict";function n(e){return`color:${e};border:1px solid #2A2A2A;border-radius:100%;font-size:14px;font-weight:bold;padding: 0 4px 0 4px;background-color:#2A2A2A`}Object.defineProperty(t,"__esModule",{value:!0}),t.Logger=void 0,t.Logger={log:console.log.bind(globalThis.console,"%c+",n("#81D4FA")),error:console.error.bind(globalThis.console,"%c+",n("#FF6961")),info:console.info.bind(globalThis.console,"%c+",n("white")),warn:console.warn.bind(globalThis.console,"%c+",n("#FDFD96")),trace:console.trace.bind(globalThis.console,"%c+",n("orange")),debug:console.debug.bind(globalThis.console,"%c+",n("lightgreen"))}},9229:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function l(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}s((r=r.apply(e,t||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.sendNotification=t.updateLastTime=t.loadAssignmentNotifications=void 0;const i=o(n(2838)),a=n(3137),l=n(933),s=n(2589);t.loadAssignmentNotifications=function(e,t){return r(this,void 0,void 0,(function*(){let n=yield fetch(e,{credentials:"same-origin"});if(!n.ok)throw new Error("Error loading notifications: "+n);let r=yield n.json();s.Logger.log("Last new grade: "+new Date(t).toString());let o=t,a=!1;o||(o=Date.now(),a=!0);let l=document.querySelector("div")||document.body.appendChild(document.createElement("div"));l.innerHTML=i.default.sanitize(r.output);let c=l.querySelectorAll(".edge-sentence"),u=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],d=0;for(let e of Array.from(c).reverse())if(e.textContent.includes("new grade")){e.getElementsByTagName("a"),e.querySelector(".other-items-link");let t=e.querySelector(".edge-time").textContent.split(" at "),n=t[0],r=t[1],i=new Date,l=n+` ${i.getFullYear()}`,c=`${u[i.getMonth()]} ${i.getDate()} ${i.getFullYear()}`,f=Date.parse(l);f=f>Date.parse(c)?Date.parse(n+` ${i.getFullYear()-1} ${r}`):Date.parse(`${l} ${r}`),f>o&&(o=f,a=!0,d++,s.Logger.log(e))}let f=null;return d>0&&(f={type:"basic",iconUrl:"imgs/icon@128.png",title:"New grade posted",message:`${d} new assignment${1===d?" has a grade":"s have grades"}`,eventTime:Date.now(),isClickable:!0}),{notification:f,name:"assignment",count:d,lastTime:o,timeModified:a}}))},t.updateLastTime=function(e,t){return r(this,void 0,void 0,(function*(){e?(yield chrome.storage.sync.set({lastTime:t}),s.Logger.log("Set new time "+new Date(t))):s.Logger.log("No new notifications")}))},t.sendNotification=function(e,t,n){return r(this,void 0,void 0,(function*(){if(!e)return;let r=yield chrome.storage.sync.get(null);if(n=n||0==n?n:1,"Firefox"==(0,l.getBrowser)()&&delete e.requireInteraction,s.Logger.log("New notification!",e),n>0&&(!r.notifications||"enabled"==r.notifications||"badge"==r.notifications)){let e=yield chrome.action.getBadgeText({}),t=Number.parseInt(e);chrome.action.setBadgeText({text:(t?t+n:n).toString()})}else s.Logger.log("Number badge is disabled");r.notifications&&"enabled"!=r.notifications&&"popup"!=r.notifications?s.Logger.log("Popup notifications are disabled"):(chrome.notifications.create(t,e),(0,a.trackEvent)("perform_action",{id:"shown",context:"Notifications",value:t,legacyTarget:t,legacyAction:"shown",legacyLabel:"Notifications"}))}))}}},t={};!function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}(8226)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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c0IsRUFBZXRCLGVBQ2lCLFNBQWhDc0IsRUFBZXRCLGNBWWZkLEVBQVNYLE9BQU9DLElBQUkscUNBWHBCNUosT0FBT29MLGNBQWNuZCxPQUFPeUwsRUFBTWtILElBQ2xDLEVBQUlmLEVBQVlxQyxZQUFZLGlCQUFrQixDQUMxQ2MsR0FBSSxRQUNKQyxRQUFTLGdCQUNUekcsTUFBTzlDLEVBQ1BrSixhQUFjbEosRUFDZG1KLGFBQWMsUUFDZEMsWUFBYSxrQkFNekIsR0FDSixJQzFKSW9LLEVBQTJCLENBQUMsR0FHaEMsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQjVaLElBQWpCNlosRUFDSCxPQUFPQSxFQUFhM2YsUUFHckIsSUFBSUQsRUFBU3lmLEVBQXlCRSxHQUFZLENBR2pEMWYsUUFBUyxDQUFDLEdBT1gsT0FIQTRmLEVBQW9CRixHQUFVelMsS0FBS2xOLEVBQU9DLFFBQVNELEVBQVFBLEVBQU9DLFFBQVN5ZixHQUdwRTFmLEVBQU9DLE9BQ2YsQ0NuQjBCeWYsQ0FBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY2hvb2xvZ3ktcGx1cy8uL25vZGVfbW9kdWxlcy9kb21wdXJpZnkvZGlzdC9wdXJpZnkuanMiLCJ3ZWJwYWNrOi8vc2Nob29sb2d5LXBsdXMvLi9zcmMvc2NyaXB0cy9vZmZzY3JlZW4udHMiLCJ3ZWJwYWNrOi8vc2Nob29sb2d5LXBsdXMvLi9zcmMvc2NyaXB0cy91dGlscy9hbmFseXRpY3MudHMiLCJ3ZWJwYWNrOi8vc2Nob29sb2d5LXBsdXMvLi9zcmMvc2NyaXB0cy91dGlscy9kb20udHMiLCJ3ZWJwYWNrOi8vc2Nob29sb2d5LXBsdXMvLi9zcmMvc2NyaXB0cy91dGlscy9sb2dnZXIudHMiLCJ3ZWJwYWNrOi8vc2Nob29sb2d5LXBsdXMvLi9zcmMvc2NyaXB0cy91dGlscy9ub3RpZmljYXRpb25zLnRzIiwid2VicGFjazovL3NjaG9vbG9neS1wbHVzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3NjaG9vbG9neS1wbHVzL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGxpY2Vuc2UgRE9NUHVyaWZ5IHwgKGMpIEN1cmU1MyBhbmQgb3RoZXIgY29udHJpYnV0b3JzIHwgUmVsZWFzZWQgdW5kZXIgdGhlIEFwYWNoZSBsaWNlbnNlIDIuMCBhbmQgTW96aWxsYSBQdWJsaWMgTGljZW5zZSAyLjAgfCBnaXRodWIuY29tL2N1cmU1My9ET01QdXJpZnkvYmxvYi8yLjAuOC9MSUNFTlNFICovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuRE9NUHVyaWZ5ID0gZmFjdG9yeSgpKTtcbn0odGhpcywgZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbiAgdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0Lmhhc093blByb3BlcnR5LFxuICAgICAgc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YsXG4gICAgICBpc0Zyb3plbiA9IE9iamVjdC5pc0Zyb3plbjtcbiAgdmFyIGZyZWV6ZSA9IE9iamVjdC5mcmVlemUsXG4gICAgICBzZWFsID0gT2JqZWN0LnNlYWwsXG4gICAgICBjcmVhdGUgPSBPYmplY3QuY3JlYXRlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGltcG9ydC9uby1tdXRhYmxlLWV4cG9ydHNcblxuICB2YXIgX3JlZiA9IHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBSZWZsZWN0LFxuICAgICAgYXBwbHkgPSBfcmVmLmFwcGx5LFxuICAgICAgY29uc3RydWN0ID0gX3JlZi5jb25zdHJ1Y3Q7XG5cbiAgaWYgKCFhcHBseSkge1xuICAgIGFwcGx5ID0gZnVuY3Rpb24gYXBwbHkoZnVuLCB0aGlzVmFsdWUsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW4uYXBwbHkodGhpc1ZhbHVlLCBhcmdzKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKCFmcmVlemUpIHtcbiAgICBmcmVlemUgPSBmdW5jdGlvbiBmcmVlemUoeCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgfVxuXG4gIGlmICghc2VhbCkge1xuICAgIHNlYWwgPSBmdW5jdGlvbiBzZWFsKHgpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH1cblxuICBpZiAoIWNvbnN0cnVjdCkge1xuICAgIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIGNvbnN0cnVjdChGdW5jLCBhcmdzKSB7XG4gICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseShGdW5jLCBbbnVsbF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShhcmdzKSkpKSgpO1xuICAgIH07XG4gIH1cblxuICB2YXIgYXJyYXlGb3JFYWNoID0gdW5hcHBseShBcnJheS5wcm90b3R5cGUuZm9yRWFjaCk7XG4gIHZhciBhcnJheVBvcCA9IHVuYXBwbHkoQXJyYXkucHJvdG90eXBlLnBvcCk7XG4gIHZhciBhcnJheVB1c2ggPSB1bmFwcGx5KEFycmF5LnByb3RvdHlwZS5wdXNoKTtcblxuICB2YXIgc3RyaW5nVG9Mb3dlckNhc2UgPSB1bmFwcGx5KFN0cmluZy5wcm90b3R5cGUudG9Mb3dlckNhc2UpO1xuICB2YXIgc3RyaW5nTWF0Y2ggPSB1bmFwcGx5KFN0cmluZy5wcm90b3R5cGUubWF0Y2gpO1xuICB2YXIgc3RyaW5nUmVwbGFjZSA9IHVuYXBwbHkoU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbiAgdmFyIHN0cmluZ0luZGV4T2YgPSB1bmFwcGx5KFN0cmluZy5wcm90b3R5cGUuaW5kZXhPZik7XG4gIHZhciBzdHJpbmdUcmltID0gdW5hcHBseShTdHJpbmcucHJvdG90eXBlLnRyaW0pO1xuXG4gIHZhciByZWdFeHBUZXN0ID0gdW5hcHBseShSZWdFeHAucHJvdG90eXBlLnRlc3QpO1xuXG4gIHZhciB0eXBlRXJyb3JDcmVhdGUgPSB1bmNvbnN0cnVjdChUeXBlRXJyb3IpO1xuXG4gIGZ1bmN0aW9uIHVuYXBwbHkoZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGhpc0FyZykge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuY29uc3RydWN0KGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29uc3RydWN0KGZ1bmMsIGFyZ3MpO1xuICAgIH07XG4gIH1cblxuICAvKiBBZGQgcHJvcGVydGllcyB0byBhIGxvb2t1cCB0YWJsZSAqL1xuICBmdW5jdGlvbiBhZGRUb1NldChzZXQsIGFycmF5KSB7XG4gICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAvLyBNYWtlICdpbicgYW5kIHRydXRoeSBjaGVja3MgbGlrZSBCb29sZWFuKHNldC5jb25zdHJ1Y3RvcilcbiAgICAgIC8vIGluZGVwZW5kZW50IG9mIGFueSBwcm9wZXJ0aWVzIGRlZmluZWQgb24gT2JqZWN0LnByb3RvdHlwZS5cbiAgICAgIC8vIFByZXZlbnQgcHJvdG90eXBlIHNldHRlcnMgZnJvbSBpbnRlcmNlcHRpbmcgc2V0IGFzIGEgdGhpcyB2YWx1ZS5cbiAgICAgIHNldFByb3RvdHlwZU9mKHNldCwgbnVsbCk7XG4gICAgfVxuXG4gICAgdmFyIGwgPSBhcnJheS5sZW5ndGg7XG4gICAgd2hpbGUgKGwtLSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBhcnJheVtsXTtcbiAgICAgIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIGxjRWxlbWVudCA9IHN0cmluZ1RvTG93ZXJDYXNlKGVsZW1lbnQpO1xuICAgICAgICBpZiAobGNFbGVtZW50ICE9PSBlbGVtZW50KSB7XG4gICAgICAgICAgLy8gQ29uZmlnIHByZXNldHMgKGUuZy4gdGFncy5qcywgYXR0cnMuanMpIGFyZSBpbW11dGFibGUuXG4gICAgICAgICAgaWYgKCFpc0Zyb3plbihhcnJheSkpIHtcbiAgICAgICAgICAgIGFycmF5W2xdID0gbGNFbGVtZW50O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVsZW1lbnQgPSBsY0VsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2V0W2VsZW1lbnRdID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2V0O1xuICB9XG5cbiAgLyogU2hhbGxvdyBjbG9uZSBhbiBvYmplY3QgKi9cbiAgZnVuY3Rpb24gY2xvbmUob2JqZWN0KSB7XG4gICAgdmFyIG5ld09iamVjdCA9IGNyZWF0ZShudWxsKTtcblxuICAgIHZhciBwcm9wZXJ0eSA9IHZvaWQgMDtcbiAgICBmb3IgKHByb3BlcnR5IGluIG9iamVjdCkge1xuICAgICAgaWYgKGFwcGx5KGhhc093blByb3BlcnR5LCBvYmplY3QsIFtwcm9wZXJ0eV0pKSB7XG4gICAgICAgIG5ld09iamVjdFtwcm9wZXJ0eV0gPSBvYmplY3RbcHJvcGVydHldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXdPYmplY3Q7XG4gIH1cblxuICB2YXIgaHRtbCA9IGZyZWV6ZShbJ2EnLCAnYWJicicsICdhY3JvbnltJywgJ2FkZHJlc3MnLCAnYXJlYScsICdhcnRpY2xlJywgJ2FzaWRlJywgJ2F1ZGlvJywgJ2InLCAnYmRpJywgJ2JkbycsICdiaWcnLCAnYmxpbmsnLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYW52YXMnLCAnY2FwdGlvbicsICdjZW50ZXInLCAnY2l0ZScsICdjb2RlJywgJ2NvbCcsICdjb2xncm91cCcsICdjb250ZW50JywgJ2RhdGEnLCAnZGF0YWxpc3QnLCAnZGQnLCAnZGVjb3JhdG9yJywgJ2RlbCcsICdkZXRhaWxzJywgJ2RmbicsICdkaXInLCAnZGl2JywgJ2RsJywgJ2R0JywgJ2VsZW1lbnQnLCAnZW0nLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9udCcsICdmb290ZXInLCAnZm9ybScsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdoZWFkJywgJ2hlYWRlcicsICdoZ3JvdXAnLCAnaHInLCAnaHRtbCcsICdpJywgJ2ltZycsICdpbnB1dCcsICdpbnMnLCAna2JkJywgJ2xhYmVsJywgJ2xlZ2VuZCcsICdsaScsICdtYWluJywgJ21hcCcsICdtYXJrJywgJ21hcnF1ZWUnLCAnbWVudScsICdtZW51aXRlbScsICdtZXRlcicsICduYXYnLCAnbm9icicsICdvbCcsICdvcHRncm91cCcsICdvcHRpb24nLCAnb3V0cHV0JywgJ3AnLCAncGljdHVyZScsICdwcmUnLCAncHJvZ3Jlc3MnLCAncScsICdycCcsICdydCcsICdydWJ5JywgJ3MnLCAnc2FtcCcsICdzZWN0aW9uJywgJ3NlbGVjdCcsICdzaGFkb3cnLCAnc21hbGwnLCAnc291cmNlJywgJ3NwYWNlcicsICdzcGFuJywgJ3N0cmlrZScsICdzdHJvbmcnLCAnc3R5bGUnLCAnc3ViJywgJ3N1bW1hcnknLCAnc3VwJywgJ3RhYmxlJywgJ3Rib2R5JywgJ3RkJywgJ3RlbXBsYXRlJywgJ3RleHRhcmVhJywgJ3Rmb290JywgJ3RoJywgJ3RoZWFkJywgJ3RpbWUnLCAndHInLCAndHJhY2snLCAndHQnLCAndScsICd1bCcsICd2YXInLCAndmlkZW8nLCAnd2JyJ10pO1xuXG4gIC8vIFNWR1xuICB2YXIgc3ZnID0gZnJlZXplKFsnc3ZnJywgJ2EnLCAnYWx0Z2x5cGgnLCAnYWx0Z2x5cGhkZWYnLCAnYWx0Z2x5cGhpdGVtJywgJ2FuaW1hdGVjb2xvcicsICdhbmltYXRlbW90aW9uJywgJ2FuaW1hdGV0cmFuc2Zvcm0nLCAnYXVkaW8nLCAnY2FudmFzJywgJ2NpcmNsZScsICdjbGlwcGF0aCcsICdkZWZzJywgJ2Rlc2MnLCAnZWxsaXBzZScsICdmaWx0ZXInLCAnZm9udCcsICdnJywgJ2dseXBoJywgJ2dseXBocmVmJywgJ2hrZXJuJywgJ2ltYWdlJywgJ2xpbmUnLCAnbGluZWFyZ3JhZGllbnQnLCAnbWFya2VyJywgJ21hc2snLCAnbWV0YWRhdGEnLCAnbXBhdGgnLCAncGF0aCcsICdwYXR0ZXJuJywgJ3BvbHlnb24nLCAncG9seWxpbmUnLCAncmFkaWFsZ3JhZGllbnQnLCAncmVjdCcsICdzdG9wJywgJ3N0eWxlJywgJ3N3aXRjaCcsICdzeW1ib2wnLCAndGV4dCcsICd0ZXh0cGF0aCcsICd0aXRsZScsICd0cmVmJywgJ3RzcGFuJywgJ3ZpZGVvJywgJ3ZpZXcnLCAndmtlcm4nXSk7XG5cbiAgdmFyIHN2Z0ZpbHRlcnMgPSBmcmVlemUoWydmZUJsZW5kJywgJ2ZlQ29sb3JNYXRyaXgnLCAnZmVDb21wb25lbnRUcmFuc2ZlcicsICdmZUNvbXBvc2l0ZScsICdmZUNvbnZvbHZlTWF0cml4JywgJ2ZlRGlmZnVzZUxpZ2h0aW5nJywgJ2ZlRGlzcGxhY2VtZW50TWFwJywgJ2ZlRGlzdGFudExpZ2h0JywgJ2ZlRmxvb2QnLCAnZmVGdW5jQScsICdmZUZ1bmNCJywgJ2ZlRnVuY0cnLCAnZmVGdW5jUicsICdmZUdhdXNzaWFuQmx1cicsICdmZU1lcmdlJywgJ2ZlTWVyZ2VOb2RlJywgJ2ZlTW9ycGhvbG9neScsICdmZU9mZnNldCcsICdmZVBvaW50TGlnaHQnLCAnZmVTcGVjdWxhckxpZ2h0aW5nJywgJ2ZlU3BvdExpZ2h0JywgJ2ZlVGlsZScsICdmZVR1cmJ1bGVuY2UnXSk7XG5cbiAgdmFyIG1hdGhNbCA9IGZyZWV6ZShbJ21hdGgnLCAnbWVuY2xvc2UnLCAnbWVycm9yJywgJ21mZW5jZWQnLCAnbWZyYWMnLCAnbWdseXBoJywgJ21pJywgJ21sYWJlbGVkdHInLCAnbW11bHRpc2NyaXB0cycsICdtbicsICdtbycsICdtb3ZlcicsICdtcGFkZGVkJywgJ21waGFudG9tJywgJ21yb290JywgJ21yb3cnLCAnbXMnLCAnbXNwYWNlJywgJ21zcXJ0JywgJ21zdHlsZScsICdtc3ViJywgJ21zdXAnLCAnbXN1YnN1cCcsICdtdGFibGUnLCAnbXRkJywgJ210ZXh0JywgJ210cicsICdtdW5kZXInLCAnbXVuZGVyb3ZlciddKTtcblxuICB2YXIgdGV4dCA9IGZyZWV6ZShbJyN0ZXh0J10pO1xuXG4gIHZhciBodG1sJDEgPSBmcmVlemUoWydhY2NlcHQnLCAnYWN0aW9uJywgJ2FsaWduJywgJ2FsdCcsICdhdXRvY2FwaXRhbGl6ZScsICdhdXRvY29tcGxldGUnLCAnYXV0b3BpY3R1cmVpbnBpY3R1cmUnLCAnYXV0b3BsYXknLCAnYmFja2dyb3VuZCcsICdiZ2NvbG9yJywgJ2JvcmRlcicsICdjYXB0dXJlJywgJ2NlbGxwYWRkaW5nJywgJ2NlbGxzcGFjaW5nJywgJ2NoZWNrZWQnLCAnY2l0ZScsICdjbGFzcycsICdjbGVhcicsICdjb2xvcicsICdjb2xzJywgJ2NvbHNwYW4nLCAnY29udHJvbHMnLCAnY29udHJvbHNsaXN0JywgJ2Nvb3JkcycsICdjcm9zc29yaWdpbicsICdkYXRldGltZScsICdkZWNvZGluZycsICdkZWZhdWx0JywgJ2RpcicsICdkaXNhYmxlZCcsICdkaXNhYmxlcGljdHVyZWlucGljdHVyZScsICdkaXNhYmxlcmVtb3RlcGxheWJhY2snLCAnZG93bmxvYWQnLCAnZHJhZ2dhYmxlJywgJ2VuY3R5cGUnLCAnZW50ZXJrZXloaW50JywgJ2ZhY2UnLCAnZm9yJywgJ2hlYWRlcnMnLCAnaGVpZ2h0JywgJ2hpZGRlbicsICdoaWdoJywgJ2hyZWYnLCAnaHJlZmxhbmcnLCAnaWQnLCAnaW5wdXRtb2RlJywgJ2ludGVncml0eScsICdpc21hcCcsICdraW5kJywgJ2xhYmVsJywgJ2xhbmcnLCAnbGlzdCcsICdsb2FkaW5nJywgJ2xvb3AnLCAnbG93JywgJ21heCcsICdtYXhsZW5ndGgnLCAnbWVkaWEnLCAnbWV0aG9kJywgJ21pbicsICdtaW5sZW5ndGgnLCAnbXVsdGlwbGUnLCAnbXV0ZWQnLCAnbmFtZScsICdub3NoYWRlJywgJ25vdmFsaWRhdGUnLCAnbm93cmFwJywgJ29wZW4nLCAnb3B0aW11bScsICdwYXR0ZXJuJywgJ3BsYWNlaG9sZGVyJywgJ3BsYXlzaW5saW5lJywgJ3Bvc3RlcicsICdwcmVsb2FkJywgJ3B1YmRhdGUnLCAncmFkaW9ncm91cCcsICdyZWFkb25seScsICdyZWwnLCAncmVxdWlyZWQnLCAncmV2JywgJ3JldmVyc2VkJywgJ3JvbGUnLCAncm93cycsICdyb3dzcGFuJywgJ3NwZWxsY2hlY2snLCAnc2NvcGUnLCAnc2VsZWN0ZWQnLCAnc2hhcGUnLCAnc2l6ZScsICdzaXplcycsICdzcGFuJywgJ3NyY2xhbmcnLCAnc3RhcnQnLCAnc3JjJywgJ3NyY3NldCcsICdzdGVwJywgJ3N0eWxlJywgJ3N1bW1hcnknLCAndGFiaW5kZXgnLCAndGl0bGUnLCAndHJhbnNsYXRlJywgJ3R5cGUnLCAndXNlbWFwJywgJ3ZhbGlnbicsICd2YWx1ZScsICd3aWR0aCcsICd4bWxucyddKTtcblxuICB2YXIgc3ZnJDEgPSBmcmVlemUoWydhY2NlbnQtaGVpZ2h0JywgJ2FjY3VtdWxhdGUnLCAnYWRkaXRpdmUnLCAnYWxpZ25tZW50LWJhc2VsaW5lJywgJ2FzY2VudCcsICdhdHRyaWJ1dGVuYW1lJywgJ2F0dHJpYnV0ZXR5cGUnLCAnYXppbXV0aCcsICdiYXNlZnJlcXVlbmN5JywgJ2Jhc2VsaW5lLXNoaWZ0JywgJ2JlZ2luJywgJ2JpYXMnLCAnYnknLCAnY2xhc3MnLCAnY2xpcCcsICdjbGlwcGF0aHVuaXRzJywgJ2NsaXAtcGF0aCcsICdjbGlwLXJ1bGUnLCAnY29sb3InLCAnY29sb3ItaW50ZXJwb2xhdGlvbicsICdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCAnY29sb3ItcHJvZmlsZScsICdjb2xvci1yZW5kZXJpbmcnLCAnY3gnLCAnY3knLCAnZCcsICdkeCcsICdkeScsICdkaWZmdXNlY29uc3RhbnQnLCAnZGlyZWN0aW9uJywgJ2Rpc3BsYXknLCAnZGl2aXNvcicsICdkdXInLCAnZWRnZW1vZGUnLCAnZWxldmF0aW9uJywgJ2VuZCcsICdmaWxsJywgJ2ZpbGwtb3BhY2l0eScsICdmaWxsLXJ1bGUnLCAnZmlsdGVyJywgJ2ZpbHRlcnVuaXRzJywgJ2Zsb29kLWNvbG9yJywgJ2Zsb29kLW9wYWNpdHknLCAnZm9udC1mYW1pbHknLCAnZm9udC1zaXplJywgJ2ZvbnQtc2l6ZS1hZGp1c3QnLCAnZm9udC1zdHJldGNoJywgJ2ZvbnQtc3R5bGUnLCAnZm9udC12YXJpYW50JywgJ2ZvbnQtd2VpZ2h0JywgJ2Z4JywgJ2Z5JywgJ2cxJywgJ2cyJywgJ2dseXBoLW5hbWUnLCAnZ2x5cGhyZWYnLCAnZ3JhZGllbnR1bml0cycsICdncmFkaWVudHRyYW5zZm9ybScsICdoZWlnaHQnLCAnaHJlZicsICdpZCcsICdpbWFnZS1yZW5kZXJpbmcnLCAnaW4nLCAnaW4yJywgJ2snLCAnazEnLCAnazInLCAnazMnLCAnazQnLCAna2VybmluZycsICdrZXlwb2ludHMnLCAna2V5c3BsaW5lcycsICdrZXl0aW1lcycsICdsYW5nJywgJ2xlbmd0aGFkanVzdCcsICdsZXR0ZXItc3BhY2luZycsICdrZXJuZWxtYXRyaXgnLCAna2VybmVsdW5pdGxlbmd0aCcsICdsaWdodGluZy1jb2xvcicsICdsb2NhbCcsICdtYXJrZXItZW5kJywgJ21hcmtlci1taWQnLCAnbWFya2VyLXN0YXJ0JywgJ21hcmtlcmhlaWdodCcsICdtYXJrZXJ1bml0cycsICdtYXJrZXJ3aWR0aCcsICdtYXNrY29udGVudHVuaXRzJywgJ21hc2t1bml0cycsICdtYXgnLCAnbWFzaycsICdtZWRpYScsICdtZXRob2QnLCAnbW9kZScsICdtaW4nLCAnbmFtZScsICdudW1vY3RhdmVzJywgJ29mZnNldCcsICdvcGVyYXRvcicsICdvcGFjaXR5JywgJ29yZGVyJywgJ29yaWVudCcsICdvcmllbnRhdGlvbicsICdvcmlnaW4nLCAnb3ZlcmZsb3cnLCAncGFpbnQtb3JkZXInLCAncGF0aCcsICdwYXRobGVuZ3RoJywgJ3BhdHRlcm5jb250ZW50dW5pdHMnLCAncGF0dGVybnRyYW5zZm9ybScsICdwYXR0ZXJudW5pdHMnLCAncG9pbnRzJywgJ3ByZXNlcnZlYWxwaGEnLCAncHJlc2VydmVhc3BlY3RyYXRpbycsICdwcmltaXRpdmV1bml0cycsICdyJywgJ3J4JywgJ3J5JywgJ3JhZGl1cycsICdyZWZ4JywgJ3JlZnknLCAncmVwZWF0Y291bnQnLCAncmVwZWF0ZHVyJywgJ3Jlc3RhcnQnLCAncmVzdWx0JywgJ3JvdGF0ZScsICdzY2FsZScsICdzZWVkJywgJ3NoYXBlLXJlbmRlcmluZycsICdzcGVjdWxhcmNvbnN0YW50JywgJ3NwZWN1bGFyZXhwb25lbnQnLCAnc3ByZWFkbWV0aG9kJywgJ3N0YXJ0b2Zmc2V0JywgJ3N0ZGRldmlhdGlvbicsICdzdGl0Y2h0aWxlcycsICdzdG9wLWNvbG9yJywgJ3N0b3Atb3BhY2l0eScsICdzdHJva2UtZGFzaGFycmF5JywgJ3N0cm9rZS1kYXNob2Zmc2V0JywgJ3N0cm9rZS1saW5lY2FwJywgJ3N0cm9rZS1saW5lam9pbicsICdzdHJva2UtbWl0ZXJsaW1pdCcsICdzdHJva2Utb3BhY2l0eScsICdzdHJva2UnLCAnc3Ryb2tlLXdpZHRoJywgJ3N0eWxlJywgJ3N1cmZhY2VzY2FsZScsICdzeXN0ZW1sYW5ndWFnZScsICd0YWJpbmRleCcsICd0YXJnZXR4JywgJ3RhcmdldHknLCAndHJhbnNmb3JtJywgJ3RleHQtYW5jaG9yJywgJ3RleHQtZGVjb3JhdGlvbicsICd0ZXh0LXJlbmRlcmluZycsICd0ZXh0bGVuZ3RoJywgJ3R5cGUnLCAndTEnLCAndTInLCAndW5pY29kZScsICd2YWx1ZXMnLCAndmlld2JveCcsICd2aXNpYmlsaXR5JywgJ3ZlcnNpb24nLCAndmVydC1hZHYteScsICd2ZXJ0LW9yaWdpbi14JywgJ3ZlcnQtb3JpZ2luLXknLCAnd2lkdGgnLCAnd29yZC1zcGFjaW5nJywgJ3dyYXAnLCAnd3JpdGluZy1tb2RlJywgJ3hjaGFubmVsc2VsZWN0b3InLCAneWNoYW5uZWxzZWxlY3RvcicsICd4JywgJ3gxJywgJ3gyJywgJ3htbG5zJywgJ3knLCAneTEnLCAneTInLCAneicsICd6b29tYW5kcGFuJ10pO1xuXG4gIHZhciBtYXRoTWwkMSA9IGZyZWV6ZShbJ2FjY2VudCcsICdhY2NlbnR1bmRlcicsICdhbGlnbicsICdiZXZlbGxlZCcsICdjbG9zZScsICdjb2x1bW5zYWxpZ24nLCAnY29sdW1ubGluZXMnLCAnY29sdW1uc3BhbicsICdkZW5vbWFsaWduJywgJ2RlcHRoJywgJ2RpcicsICdkaXNwbGF5JywgJ2Rpc3BsYXlzdHlsZScsICdlbmNvZGluZycsICdmZW5jZScsICdmcmFtZScsICdoZWlnaHQnLCAnaHJlZicsICdpZCcsICdsYXJnZW9wJywgJ2xlbmd0aCcsICdsaW5ldGhpY2tuZXNzJywgJ2xzcGFjZScsICdscXVvdGUnLCAnbWF0aGJhY2tncm91bmQnLCAnbWF0aGNvbG9yJywgJ21hdGhzaXplJywgJ21hdGh2YXJpYW50JywgJ21heHNpemUnLCAnbWluc2l6ZScsICdtb3ZhYmxlbGltaXRzJywgJ25vdGF0aW9uJywgJ251bWFsaWduJywgJ29wZW4nLCAncm93YWxpZ24nLCAncm93bGluZXMnLCAncm93c3BhY2luZycsICdyb3dzcGFuJywgJ3JzcGFjZScsICdycXVvdGUnLCAnc2NyaXB0bGV2ZWwnLCAnc2NyaXB0bWluc2l6ZScsICdzY3JpcHRzaXplbXVsdGlwbGllcicsICdzZWxlY3Rpb24nLCAnc2VwYXJhdG9yJywgJ3NlcGFyYXRvcnMnLCAnc3RyZXRjaHknLCAnc3Vic2NyaXB0c2hpZnQnLCAnc3Vwc2NyaXB0c2hpZnQnLCAnc3ltbWV0cmljJywgJ3ZvZmZzZXQnLCAnd2lkdGgnLCAneG1sbnMnXSk7XG5cbiAgdmFyIHhtbCA9IGZyZWV6ZShbJ3hsaW5rOmhyZWYnLCAneG1sOmlkJywgJ3hsaW5rOnRpdGxlJywgJ3htbDpzcGFjZScsICd4bWxuczp4bGluayddKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9iZXR0ZXItcmVnZXhcbiAgdmFyIE1VU1RBQ0hFX0VYUFIgPSBzZWFsKC9cXHtcXHtbXFxzXFxTXSp8W1xcc1xcU10qXFx9XFx9L2dtKTsgLy8gU3BlY2lmeSB0ZW1wbGF0ZSBkZXRlY3Rpb24gcmVnZXggZm9yIFNBRkVfRk9SX1RFTVBMQVRFUyBtb2RlXG4gIHZhciBFUkJfRVhQUiA9IHNlYWwoLzwlW1xcc1xcU10qfFtcXHNcXFNdKiU+L2dtKTtcbiAgdmFyIERBVEFfQVRUUiA9IHNlYWwoL15kYXRhLVtcXC1cXHcuXFx1MDBCNy1cXHVGRkZGXS8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG4gIHZhciBBUklBX0FUVFIgPSBzZWFsKC9eYXJpYS1bXFwtXFx3XSskLyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbiAgdmFyIElTX0FMTE9XRURfVVJJID0gc2VhbCgvXig/Oig/Oig/OmZ8aHQpdHBzP3xtYWlsdG98dGVsfGNhbGx0b3xjaWR8eG1wcCk6fFteYS16XXxbYS16Ky5cXC1dKyg/OlteYS16Ky5cXC06XXwkKSkvaSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG4gICk7XG4gIHZhciBJU19TQ1JJUFRfT1JfREFUQSA9IHNlYWwoL14oPzpcXHcrc2NyaXB0fGRhdGEpOi9pKTtcbiAgdmFyIEFUVFJfV0hJVEVTUEFDRSA9IHNlYWwoL1tcXHUwMDAwLVxcdTAwMjBcXHUwMEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwLVxcdTIwMjlcXHUyMDVGXFx1MzAwMF0vZyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbiAgKTtcblxuICB2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbiAgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5JDEoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxuICB2YXIgZ2V0R2xvYmFsID0gZnVuY3Rpb24gZ2V0R2xvYmFsKCkge1xuICAgIHJldHVybiB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiB3aW5kb3c7XG4gIH07XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuby1vcCBwb2xpY3kgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgKiBEb24ndCBleHBvcnQgdGhpcyBmdW5jdGlvbiBvdXRzaWRlIHRoaXMgbW9kdWxlIVxuICAgKiBAcGFyYW0gez9UcnVzdGVkVHlwZVBvbGljeUZhY3Rvcnl9IHRydXN0ZWRUeXBlcyBUaGUgcG9saWN5IGZhY3RvcnkuXG4gICAqIEBwYXJhbSB7RG9jdW1lbnR9IGRvY3VtZW50IFRoZSBkb2N1bWVudCBvYmplY3QgKHRvIGRldGVybWluZSBwb2xpY3kgbmFtZSBzdWZmaXgpXG4gICAqIEByZXR1cm4gez9UcnVzdGVkVHlwZVBvbGljeX0gVGhlIHBvbGljeSBjcmVhdGVkIChvciBudWxsLCBpZiBUcnVzdGVkIFR5cGVzXG4gICAqIGFyZSBub3Qgc3VwcG9ydGVkKS5cbiAgICovXG4gIHZhciBfY3JlYXRlVHJ1c3RlZFR5cGVzUG9saWN5ID0gZnVuY3Rpb24gX2NyZWF0ZVRydXN0ZWRUeXBlc1BvbGljeSh0cnVzdGVkVHlwZXMsIGRvY3VtZW50KSB7XG4gICAgaWYgKCh0eXBlb2YgdHJ1c3RlZFR5cGVzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih0cnVzdGVkVHlwZXMpKSAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIHRydXN0ZWRUeXBlcy5jcmVhdGVQb2xpY3kgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIEFsbG93IHRoZSBjYWxsZXJzIHRvIGNvbnRyb2wgdGhlIHVuaXF1ZSBwb2xpY3kgbmFtZVxuICAgIC8vIGJ5IGFkZGluZyBhIGRhdGEtdHQtcG9saWN5LXN1ZmZpeCB0byB0aGUgc2NyaXB0IGVsZW1lbnQgd2l0aCB0aGUgRE9NUHVyaWZ5LlxuICAgIC8vIFBvbGljeSBjcmVhdGlvbiB3aXRoIGR1cGxpY2F0ZSBuYW1lcyB0aHJvd3MgaW4gVHJ1c3RlZCBUeXBlcy5cbiAgICB2YXIgc3VmZml4ID0gbnVsbDtcbiAgICB2YXIgQVRUUl9OQU1FID0gJ2RhdGEtdHQtcG9saWN5LXN1ZmZpeCc7XG4gICAgaWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgJiYgZG9jdW1lbnQuY3VycmVudFNjcmlwdC5oYXNBdHRyaWJ1dGUoQVRUUl9OQU1FKSkge1xuICAgICAgc3VmZml4ID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5nZXRBdHRyaWJ1dGUoQVRUUl9OQU1FKTtcbiAgICB9XG5cbiAgICB2YXIgcG9saWN5TmFtZSA9ICdkb21wdXJpZnknICsgKHN1ZmZpeCA/ICcjJyArIHN1ZmZpeCA6ICcnKTtcblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gdHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeShwb2xpY3lOYW1lLCB7XG4gICAgICAgIGNyZWF0ZUhUTUw6IGZ1bmN0aW9uIGNyZWF0ZUhUTUwoaHRtbCQkMSkge1xuICAgICAgICAgIHJldHVybiBodG1sJCQxO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChfKSB7XG4gICAgICAvLyBQb2xpY3kgY3JlYXRpb24gZmFpbGVkIChtb3N0IGxpa2VseSBhbm90aGVyIERPTVB1cmlmeSBzY3JpcHQgaGFzXG4gICAgICAvLyBhbHJlYWR5IHJ1bikuIFNraXAgY3JlYXRpbmcgdGhlIHBvbGljeSwgYXMgdGhpcyB3aWxsIG9ubHkgY2F1c2UgZXJyb3JzXG4gICAgICAvLyBpZiBUVCBhcmUgZW5mb3JjZWQuXG4gICAgICBjb25zb2xlLndhcm4oJ1RydXN0ZWRUeXBlcyBwb2xpY3kgJyArIHBvbGljeU5hbWUgKyAnIGNvdWxkIG5vdCBiZSBjcmVhdGVkLicpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZURPTVB1cmlmeSgpIHtcbiAgICB2YXIgd2luZG93ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBnZXRHbG9iYWwoKTtcblxuICAgIHZhciBET01QdXJpZnkgPSBmdW5jdGlvbiBET01QdXJpZnkocm9vdCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZURPTVB1cmlmeShyb290KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVmVyc2lvbiBsYWJlbCwgZXhwb3NlZCBmb3IgZWFzaWVyIGNoZWNrc1xuICAgICAqIGlmIERPTVB1cmlmeSBpcyB1cCB0byBkYXRlIG9yIG5vdFxuICAgICAqL1xuICAgIERPTVB1cmlmeS52ZXJzaW9uID0gJzIuMS4xJztcblxuICAgIC8qKlxuICAgICAqIEFycmF5IG9mIGVsZW1lbnRzIHRoYXQgRE9NUHVyaWZ5IHJlbW92ZWQgZHVyaW5nIHNhbml0YXRpb24uXG4gICAgICogRW1wdHkgaWYgbm90aGluZyB3YXMgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBET01QdXJpZnkucmVtb3ZlZCA9IFtdO1xuXG4gICAgaWYgKCF3aW5kb3cgfHwgIXdpbmRvdy5kb2N1bWVudCB8fCB3aW5kb3cuZG9jdW1lbnQubm9kZVR5cGUgIT09IDkpIHtcbiAgICAgIC8vIE5vdCBydW5uaW5nIGluIGEgYnJvd3NlciwgcHJvdmlkZSBhIGZhY3RvcnkgZnVuY3Rpb25cbiAgICAgIC8vIHNvIHRoYXQgeW91IGNhbiBwYXNzIHlvdXIgb3duIFdpbmRvd1xuICAgICAgRE9NUHVyaWZ5LmlzU3VwcG9ydGVkID0gZmFsc2U7XG5cbiAgICAgIHJldHVybiBET01QdXJpZnk7XG4gICAgfVxuXG4gICAgdmFyIG9yaWdpbmFsRG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbiAgICB2YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG4gICAgdmFyIERvY3VtZW50RnJhZ21lbnQgPSB3aW5kb3cuRG9jdW1lbnRGcmFnbWVudCxcbiAgICAgICAgSFRNTFRlbXBsYXRlRWxlbWVudCA9IHdpbmRvdy5IVE1MVGVtcGxhdGVFbGVtZW50LFxuICAgICAgICBOb2RlID0gd2luZG93Lk5vZGUsXG4gICAgICAgIE5vZGVGaWx0ZXIgPSB3aW5kb3cuTm9kZUZpbHRlcixcbiAgICAgICAgX3dpbmRvdyROYW1lZE5vZGVNYXAgPSB3aW5kb3cuTmFtZWROb2RlTWFwLFxuICAgICAgICBOYW1lZE5vZGVNYXAgPSBfd2luZG93JE5hbWVkTm9kZU1hcCA9PT0gdW5kZWZpbmVkID8gd2luZG93Lk5hbWVkTm9kZU1hcCB8fCB3aW5kb3cuTW96TmFtZWRBdHRyTWFwIDogX3dpbmRvdyROYW1lZE5vZGVNYXAsXG4gICAgICAgIFRleHQgPSB3aW5kb3cuVGV4dCxcbiAgICAgICAgQ29tbWVudCA9IHdpbmRvdy5Db21tZW50LFxuICAgICAgICBET01QYXJzZXIgPSB3aW5kb3cuRE9NUGFyc2VyLFxuICAgICAgICB0cnVzdGVkVHlwZXMgPSB3aW5kb3cudHJ1c3RlZFR5cGVzO1xuXG4gICAgLy8gQXMgcGVyIGlzc3VlICM0NywgdGhlIHdlYi1jb21wb25lbnRzIHJlZ2lzdHJ5IGlzIGluaGVyaXRlZCBieSBhXG4gICAgLy8gbmV3IGRvY3VtZW50IGNyZWF0ZWQgdmlhIGNyZWF0ZUhUTUxEb2N1bWVudC4gQXMgcGVyIHRoZSBzcGVjXG4gICAgLy8gKGh0dHA6Ly93M2MuZ2l0aHViLmlvL3dlYmNvbXBvbmVudHMvc3BlYy9jdXN0b20vI2NyZWF0aW5nLWFuZC1wYXNzaW5nLXJlZ2lzdHJpZXMpXG4gICAgLy8gYSBuZXcgZW1wdHkgcmVnaXN0cnkgaXMgdXNlZCB3aGVuIGNyZWF0aW5nIGEgdGVtcGxhdGUgY29udGVudHMgb3duZXJcbiAgICAvLyBkb2N1bWVudCwgc28gd2UgdXNlIHRoYXQgYXMgb3VyIHBhcmVudCBkb2N1bWVudCB0byBlbnN1cmUgbm90aGluZ1xuICAgIC8vIGlzIGluaGVyaXRlZC5cblxuICAgIGlmICh0eXBlb2YgSFRNTFRlbXBsYXRlRWxlbWVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgICAgIGlmICh0ZW1wbGF0ZS5jb250ZW50ICYmIHRlbXBsYXRlLmNvbnRlbnQub3duZXJEb2N1bWVudCkge1xuICAgICAgICBkb2N1bWVudCA9IHRlbXBsYXRlLmNvbnRlbnQub3duZXJEb2N1bWVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdHJ1c3RlZFR5cGVzUG9saWN5ID0gX2NyZWF0ZVRydXN0ZWRUeXBlc1BvbGljeSh0cnVzdGVkVHlwZXMsIG9yaWdpbmFsRG9jdW1lbnQpO1xuICAgIHZhciBlbXB0eUhUTUwgPSB0cnVzdGVkVHlwZXNQb2xpY3kgJiYgUkVUVVJOX1RSVVNURURfVFlQRSA/IHRydXN0ZWRUeXBlc1BvbGljeS5jcmVhdGVIVE1MKCcnKSA6ICcnO1xuXG4gICAgdmFyIF9kb2N1bWVudCA9IGRvY3VtZW50LFxuICAgICAgICBpbXBsZW1lbnRhdGlvbiA9IF9kb2N1bWVudC5pbXBsZW1lbnRhdGlvbixcbiAgICAgICAgY3JlYXRlTm9kZUl0ZXJhdG9yID0gX2RvY3VtZW50LmNyZWF0ZU5vZGVJdGVyYXRvcixcbiAgICAgICAgZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBfZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUsXG4gICAgICAgIGNyZWF0ZURvY3VtZW50RnJhZ21lbnQgPSBfZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudDtcbiAgICB2YXIgaW1wb3J0Tm9kZSA9IG9yaWdpbmFsRG9jdW1lbnQuaW1wb3J0Tm9kZTtcblxuXG4gICAgdmFyIGRvY3VtZW50TW9kZSA9IHt9O1xuICAgIHRyeSB7XG4gICAgICBkb2N1bWVudE1vZGUgPSBjbG9uZShkb2N1bWVudCkuZG9jdW1lbnRNb2RlID8gZG9jdW1lbnQuZG9jdW1lbnRNb2RlIDoge307XG4gICAgfSBjYXRjaCAoXykge31cblxuICAgIHZhciBob29rcyA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogRXhwb3NlIHdoZXRoZXIgdGhpcyBicm93c2VyIHN1cHBvcnRzIHJ1bm5pbmcgdGhlIGZ1bGwgRE9NUHVyaWZ5LlxuICAgICAqL1xuICAgIERPTVB1cmlmeS5pc1N1cHBvcnRlZCA9IGltcGxlbWVudGF0aW9uICYmIHR5cGVvZiBpbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50TW9kZSAhPT0gOTtcblxuICAgIHZhciBNVVNUQUNIRV9FWFBSJCQxID0gTVVTVEFDSEVfRVhQUixcbiAgICAgICAgRVJCX0VYUFIkJDEgPSBFUkJfRVhQUixcbiAgICAgICAgREFUQV9BVFRSJCQxID0gREFUQV9BVFRSLFxuICAgICAgICBBUklBX0FUVFIkJDEgPSBBUklBX0FUVFIsXG4gICAgICAgIElTX1NDUklQVF9PUl9EQVRBJCQxID0gSVNfU0NSSVBUX09SX0RBVEEsXG4gICAgICAgIEFUVFJfV0hJVEVTUEFDRSQkMSA9IEFUVFJfV0hJVEVTUEFDRTtcbiAgICB2YXIgSVNfQUxMT1dFRF9VUkkkJDEgPSBJU19BTExPV0VEX1VSSTtcblxuICAgIC8qKlxuICAgICAqIFdlIGNvbnNpZGVyIHRoZSBlbGVtZW50cyBhbmQgYXR0cmlidXRlcyBiZWxvdyB0byBiZSBzYWZlLiBJZGVhbGx5XG4gICAgICogZG9uJ3QgYWRkIGFueSBuZXcgb25lcyBidXQgZmVlbCBmcmVlIHRvIHJlbW92ZSB1bndhbnRlZCBvbmVzLlxuICAgICAqL1xuXG4gICAgLyogYWxsb3dlZCBlbGVtZW50IG5hbWVzICovXG5cbiAgICB2YXIgQUxMT1dFRF9UQUdTID0gbnVsbDtcbiAgICB2YXIgREVGQVVMVF9BTExPV0VEX1RBR1MgPSBhZGRUb1NldCh7fSwgW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSQxKGh0bWwpLCBfdG9Db25zdW1hYmxlQXJyYXkkMShzdmcpLCBfdG9Db25zdW1hYmxlQXJyYXkkMShzdmdGaWx0ZXJzKSwgX3RvQ29uc3VtYWJsZUFycmF5JDEobWF0aE1sKSwgX3RvQ29uc3VtYWJsZUFycmF5JDEodGV4dCkpKTtcblxuICAgIC8qIEFsbG93ZWQgYXR0cmlidXRlIG5hbWVzICovXG4gICAgdmFyIEFMTE9XRURfQVRUUiA9IG51bGw7XG4gICAgdmFyIERFRkFVTFRfQUxMT1dFRF9BVFRSID0gYWRkVG9TZXQoe30sIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkkMShodG1sJDEpLCBfdG9Db25zdW1hYmxlQXJyYXkkMShzdmckMSksIF90b0NvbnN1bWFibGVBcnJheSQxKG1hdGhNbCQxKSwgX3RvQ29uc3VtYWJsZUFycmF5JDEoeG1sKSkpO1xuXG4gICAgLyogRXhwbGljaXRseSBmb3JiaWRkZW4gdGFncyAob3ZlcnJpZGVzIEFMTE9XRURfVEFHUy9BRERfVEFHUykgKi9cbiAgICB2YXIgRk9SQklEX1RBR1MgPSBudWxsO1xuXG4gICAgLyogRXhwbGljaXRseSBmb3JiaWRkZW4gYXR0cmlidXRlcyAob3ZlcnJpZGVzIEFMTE9XRURfQVRUUi9BRERfQVRUUikgKi9cbiAgICB2YXIgRk9SQklEX0FUVFIgPSBudWxsO1xuXG4gICAgLyogRGVjaWRlIGlmIEFSSUEgYXR0cmlidXRlcyBhcmUgb2theSAqL1xuICAgIHZhciBBTExPV19BUklBX0FUVFIgPSB0cnVlO1xuXG4gICAgLyogRGVjaWRlIGlmIGN1c3RvbSBkYXRhIGF0dHJpYnV0ZXMgYXJlIG9rYXkgKi9cbiAgICB2YXIgQUxMT1dfREFUQV9BVFRSID0gdHJ1ZTtcblxuICAgIC8qIERlY2lkZSBpZiB1bmtub3duIHByb3RvY29scyBhcmUgb2theSAqL1xuICAgIHZhciBBTExPV19VTktOT1dOX1BST1RPQ09MUyA9IGZhbHNlO1xuXG4gICAgLyogT3V0cHV0IHNob3VsZCBiZSBzYWZlIGZvciBjb21tb24gdGVtcGxhdGUgZW5naW5lcy5cbiAgICAgKiBUaGlzIG1lYW5zLCBET01QdXJpZnkgcmVtb3ZlcyBkYXRhIGF0dHJpYnV0ZXMsIG11c3RhY2hlcyBhbmQgRVJCXG4gICAgICovXG4gICAgdmFyIFNBRkVfRk9SX1RFTVBMQVRFUyA9IGZhbHNlO1xuXG4gICAgLyogRGVjaWRlIGlmIGRvY3VtZW50IHdpdGggPGh0bWw+Li4uIHNob3VsZCBiZSByZXR1cm5lZCAqL1xuICAgIHZhciBXSE9MRV9ET0NVTUVOVCA9IGZhbHNlO1xuXG4gICAgLyogVHJhY2sgd2hldGhlciBjb25maWcgaXMgYWxyZWFkeSBzZXQgb24gdGhpcyBpbnN0YW5jZSBvZiBET01QdXJpZnkuICovXG4gICAgdmFyIFNFVF9DT05GSUcgPSBmYWxzZTtcblxuICAgIC8qIERlY2lkZSBpZiBhbGwgZWxlbWVudHMgKGUuZy4gc3R5bGUsIHNjcmlwdCkgbXVzdCBiZSBjaGlsZHJlbiBvZlxuICAgICAqIGRvY3VtZW50LmJvZHkuIEJ5IGRlZmF1bHQsIGJyb3dzZXJzIG1pZ2h0IG1vdmUgdGhlbSB0byBkb2N1bWVudC5oZWFkICovXG4gICAgdmFyIEZPUkNFX0JPRFkgPSBmYWxzZTtcblxuICAgIC8qIERlY2lkZSBpZiBhIERPTSBgSFRNTEJvZHlFbGVtZW50YCBzaG91bGQgYmUgcmV0dXJuZWQsIGluc3RlYWQgb2YgYSBodG1sXG4gICAgICogc3RyaW5nIChvciBhIFRydXN0ZWRIVE1MIG9iamVjdCBpZiBUcnVzdGVkIFR5cGVzIGFyZSBzdXBwb3J0ZWQpLlxuICAgICAqIElmIGBXSE9MRV9ET0NVTUVOVGAgaXMgZW5hYmxlZCBhIGBIVE1MSHRtbEVsZW1lbnRgIHdpbGwgYmUgcmV0dXJuZWQgaW5zdGVhZFxuICAgICAqL1xuICAgIHZhciBSRVRVUk5fRE9NID0gZmFsc2U7XG5cbiAgICAvKiBEZWNpZGUgaWYgYSBET00gYERvY3VtZW50RnJhZ21lbnRgIHNob3VsZCBiZSByZXR1cm5lZCwgaW5zdGVhZCBvZiBhIGh0bWxcbiAgICAgKiBzdHJpbmcgIChvciBhIFRydXN0ZWRIVE1MIG9iamVjdCBpZiBUcnVzdGVkIFR5cGVzIGFyZSBzdXBwb3J0ZWQpICovXG4gICAgdmFyIFJFVFVSTl9ET01fRlJBR01FTlQgPSBmYWxzZTtcblxuICAgIC8qIElmIGBSRVRVUk5fRE9NYCBvciBgUkVUVVJOX0RPTV9GUkFHTUVOVGAgaXMgZW5hYmxlZCwgZGVjaWRlIGlmIHRoZSByZXR1cm5lZCBET01cbiAgICAgKiBgTm9kZWAgaXMgaW1wb3J0ZWQgaW50byB0aGUgY3VycmVudCBgRG9jdW1lbnRgLiBJZiB0aGlzIGZsYWcgaXMgbm90IGVuYWJsZWQgdGhlXG4gICAgICogYE5vZGVgIHdpbGwgYmVsb25nIChpdHMgb3duZXJEb2N1bWVudCkgdG8gYSBmcmVzaCBgSFRNTERvY3VtZW50YCwgY3JlYXRlZCBieVxuICAgICAqIERPTVB1cmlmeS4gKi9cbiAgICB2YXIgUkVUVVJOX0RPTV9JTVBPUlQgPSBmYWxzZTtcblxuICAgIC8qIFRyeSB0byByZXR1cm4gYSBUcnVzdGVkIFR5cGUgb2JqZWN0IGluc3RlYWQgb2YgYSBzdHJpbmcsIHJldHVybiBhIHN0cmluZyBpblxuICAgICAqIGNhc2UgVHJ1c3RlZCBUeXBlcyBhcmUgbm90IHN1cHBvcnRlZCAgKi9cbiAgICB2YXIgUkVUVVJOX1RSVVNURURfVFlQRSA9IGZhbHNlO1xuXG4gICAgLyogT3V0cHV0IHNob3VsZCBiZSBmcmVlIGZyb20gRE9NIGNsb2JiZXJpbmcgYXR0YWNrcz8gKi9cbiAgICB2YXIgU0FOSVRJWkVfRE9NID0gdHJ1ZTtcblxuICAgIC8qIEtlZXAgZWxlbWVudCBjb250ZW50IHdoZW4gcmVtb3ZpbmcgZWxlbWVudD8gKi9cbiAgICB2YXIgS0VFUF9DT05URU5UID0gdHJ1ZTtcblxuICAgIC8qIElmIGEgYE5vZGVgIGlzIHBhc3NlZCB0byBzYW5pdGl6ZSgpLCB0aGVuIHBlcmZvcm1zIHNhbml0aXphdGlvbiBpbi1wbGFjZSBpbnN0ZWFkXG4gICAgICogb2YgaW1wb3J0aW5nIGl0IGludG8gYSBuZXcgRG9jdW1lbnQgYW5kIHJldHVybmluZyBhIHNhbml0aXplZCBjb3B5ICovXG4gICAgdmFyIElOX1BMQUNFID0gZmFsc2U7XG5cbiAgICAvKiBBbGxvdyB1c2FnZSBvZiBwcm9maWxlcyBsaWtlIGh0bWwsIHN2ZyBhbmQgbWF0aE1sICovXG4gICAgdmFyIFVTRV9QUk9GSUxFUyA9IHt9O1xuXG4gICAgLyogVGFncyB0byBpZ25vcmUgY29udGVudCBvZiB3aGVuIEtFRVBfQ09OVEVOVCBpcyB0cnVlICovXG4gICAgdmFyIEZPUkJJRF9DT05URU5UUyA9IGFkZFRvU2V0KHt9LCBbJ2Fubm90YXRpb24teG1sJywgJ2F1ZGlvJywgJ2NvbGdyb3VwJywgJ2Rlc2MnLCAnZm9yZWlnbm9iamVjdCcsICdoZWFkJywgJ2lmcmFtZScsICdtYXRoJywgJ21pJywgJ21uJywgJ21vJywgJ21zJywgJ210ZXh0JywgJ25vZW1iZWQnLCAnbm9mcmFtZXMnLCAncGxhaW50ZXh0JywgJ3NjcmlwdCcsICdzdHlsZScsICdzdmcnLCAndGVtcGxhdGUnLCAndGhlYWQnLCAndGl0bGUnLCAndmlkZW8nLCAneG1wJ10pO1xuXG4gICAgLyogVGFncyB0aGF0IGFyZSBzYWZlIGZvciBkYXRhOiBVUklzICovXG4gICAgdmFyIERBVEFfVVJJX1RBR1MgPSBudWxsO1xuICAgIHZhciBERUZBVUxUX0RBVEFfVVJJX1RBR1MgPSBhZGRUb1NldCh7fSwgWydhdWRpbycsICd2aWRlbycsICdpbWcnLCAnc291cmNlJywgJ2ltYWdlJywgJ3RyYWNrJ10pO1xuXG4gICAgLyogQXR0cmlidXRlcyBzYWZlIGZvciB2YWx1ZXMgbGlrZSBcImphdmFzY3JpcHQ6XCIgKi9cbiAgICB2YXIgVVJJX1NBRkVfQVRUUklCVVRFUyA9IG51bGw7XG4gICAgdmFyIERFRkFVTFRfVVJJX1NBRkVfQVRUUklCVVRFUyA9IGFkZFRvU2V0KHt9LCBbJ2FsdCcsICdjbGFzcycsICdmb3InLCAnaWQnLCAnbGFiZWwnLCAnbmFtZScsICdwYXR0ZXJuJywgJ3BsYWNlaG9sZGVyJywgJ3N1bW1hcnknLCAndGl0bGUnLCAndmFsdWUnLCAnc3R5bGUnLCAneG1sbnMnXSk7XG5cbiAgICAvKiBLZWVwIGEgcmVmZXJlbmNlIHRvIGNvbmZpZyB0byBwYXNzIHRvIGhvb2tzICovXG4gICAgdmFyIENPTkZJRyA9IG51bGw7XG5cbiAgICAvKiBJZGVhbGx5LCBkbyBub3QgdG91Y2ggYW55dGhpbmcgYmVsb3cgdGhpcyBsaW5lICovXG4gICAgLyogX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyAqL1xuXG4gICAgdmFyIGZvcm1FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpO1xuXG4gICAgLyoqXG4gICAgICogX3BhcnNlQ29uZmlnXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGNmZyBvcHRpb25hbCBjb25maWcgbGl0ZXJhbFxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gICAgdmFyIF9wYXJzZUNvbmZpZyA9IGZ1bmN0aW9uIF9wYXJzZUNvbmZpZyhjZmcpIHtcbiAgICAgIGlmIChDT05GSUcgJiYgQ09ORklHID09PSBjZmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvKiBTaGllbGQgY29uZmlndXJhdGlvbiBvYmplY3QgZnJvbSB0YW1wZXJpbmcgKi9cbiAgICAgIGlmICghY2ZnIHx8ICh0eXBlb2YgY2ZnID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjZmcpKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgY2ZnID0ge307XG4gICAgICB9XG5cbiAgICAgIC8qIFNoaWVsZCBjb25maWd1cmF0aW9uIG9iamVjdCBmcm9tIHByb3RvdHlwZSBwb2xsdXRpb24gKi9cbiAgICAgIGNmZyA9IGNsb25lKGNmZyk7XG5cbiAgICAgIC8qIFNldCBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnMgKi9cbiAgICAgIEFMTE9XRURfVEFHUyA9ICdBTExPV0VEX1RBR1MnIGluIGNmZyA/IGFkZFRvU2V0KHt9LCBjZmcuQUxMT1dFRF9UQUdTKSA6IERFRkFVTFRfQUxMT1dFRF9UQUdTO1xuICAgICAgQUxMT1dFRF9BVFRSID0gJ0FMTE9XRURfQVRUUicgaW4gY2ZnID8gYWRkVG9TZXQoe30sIGNmZy5BTExPV0VEX0FUVFIpIDogREVGQVVMVF9BTExPV0VEX0FUVFI7XG4gICAgICBVUklfU0FGRV9BVFRSSUJVVEVTID0gJ0FERF9VUklfU0FGRV9BVFRSJyBpbiBjZmcgPyBhZGRUb1NldChjbG9uZShERUZBVUxUX1VSSV9TQUZFX0FUVFJJQlVURVMpLCBjZmcuQUREX1VSSV9TQUZFX0FUVFIpIDogREVGQVVMVF9VUklfU0FGRV9BVFRSSUJVVEVTO1xuICAgICAgREFUQV9VUklfVEFHUyA9ICdBRERfREFUQV9VUklfVEFHUycgaW4gY2ZnID8gYWRkVG9TZXQoY2xvbmUoREVGQVVMVF9EQVRBX1VSSV9UQUdTKSwgY2ZnLkFERF9EQVRBX1VSSV9UQUdTKSA6IERFRkFVTFRfREFUQV9VUklfVEFHUztcbiAgICAgIEZPUkJJRF9UQUdTID0gJ0ZPUkJJRF9UQUdTJyBpbiBjZmcgPyBhZGRUb1NldCh7fSwgY2ZnLkZPUkJJRF9UQUdTKSA6IHt9O1xuICAgICAgRk9SQklEX0FUVFIgPSAnRk9SQklEX0FUVFInIGluIGNmZyA/IGFkZFRvU2V0KHt9LCBjZmcuRk9SQklEX0FUVFIpIDoge307XG4gICAgICBVU0VfUFJPRklMRVMgPSAnVVNFX1BST0ZJTEVTJyBpbiBjZmcgPyBjZmcuVVNFX1BST0ZJTEVTIDogZmFsc2U7XG4gICAgICBBTExPV19BUklBX0FUVFIgPSBjZmcuQUxMT1dfQVJJQV9BVFRSICE9PSBmYWxzZTsgLy8gRGVmYXVsdCB0cnVlXG4gICAgICBBTExPV19EQVRBX0FUVFIgPSBjZmcuQUxMT1dfREFUQV9BVFRSICE9PSBmYWxzZTsgLy8gRGVmYXVsdCB0cnVlXG4gICAgICBBTExPV19VTktOT1dOX1BST1RPQ09MUyA9IGNmZy5BTExPV19VTktOT1dOX1BST1RPQ09MUyB8fCBmYWxzZTsgLy8gRGVmYXVsdCBmYWxzZVxuICAgICAgU0FGRV9GT1JfVEVNUExBVEVTID0gY2ZnLlNBRkVfRk9SX1RFTVBMQVRFUyB8fCBmYWxzZTsgLy8gRGVmYXVsdCBmYWxzZVxuICAgICAgV0hPTEVfRE9DVU1FTlQgPSBjZmcuV0hPTEVfRE9DVU1FTlQgfHwgZmFsc2U7IC8vIERlZmF1bHQgZmFsc2VcbiAgICAgIFJFVFVSTl9ET00gPSBjZmcuUkVUVVJOX0RPTSB8fCBmYWxzZTsgLy8gRGVmYXVsdCBmYWxzZVxuICAgICAgUkVUVVJOX0RPTV9GUkFHTUVOVCA9IGNmZy5SRVRVUk5fRE9NX0ZSQUdNRU5UIHx8IGZhbHNlOyAvLyBEZWZhdWx0IGZhbHNlXG4gICAgICBSRVRVUk5fRE9NX0lNUE9SVCA9IGNmZy5SRVRVUk5fRE9NX0lNUE9SVCB8fCBmYWxzZTsgLy8gRGVmYXVsdCBmYWxzZVxuICAgICAgUkVUVVJOX1RSVVNURURfVFlQRSA9IGNmZy5SRVRVUk5fVFJVU1RFRF9UWVBFIHx8IGZhbHNlOyAvLyBEZWZhdWx0IGZhbHNlXG4gICAgICBGT1JDRV9CT0RZID0gY2ZnLkZPUkNFX0JPRFkgfHwgZmFsc2U7IC8vIERlZmF1bHQgZmFsc2VcbiAgICAgIFNBTklUSVpFX0RPTSA9IGNmZy5TQU5JVElaRV9ET00gIT09IGZhbHNlOyAvLyBEZWZhdWx0IHRydWVcbiAgICAgIEtFRVBfQ09OVEVOVCA9IGNmZy5LRUVQX0NPTlRFTlQgIT09IGZhbHNlOyAvLyBEZWZhdWx0IHRydWVcbiAgICAgIElOX1BMQUNFID0gY2ZnLklOX1BMQUNFIHx8IGZhbHNlOyAvLyBEZWZhdWx0IGZhbHNlXG4gICAgICBJU19BTExPV0VEX1VSSSQkMSA9IGNmZy5BTExPV0VEX1VSSV9SRUdFWFAgfHwgSVNfQUxMT1dFRF9VUkkkJDE7XG4gICAgICBpZiAoU0FGRV9GT1JfVEVNUExBVEVTKSB7XG4gICAgICAgIEFMTE9XX0RBVEFfQVRUUiA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoUkVUVVJOX0RPTV9GUkFHTUVOVCkge1xuICAgICAgICBSRVRVUk5fRE9NID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLyogUGFyc2UgcHJvZmlsZSBpbmZvICovXG4gICAgICBpZiAoVVNFX1BST0ZJTEVTKSB7XG4gICAgICAgIEFMTE9XRURfVEFHUyA9IGFkZFRvU2V0KHt9LCBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5JDEodGV4dCkpKTtcbiAgICAgICAgQUxMT1dFRF9BVFRSID0gW107XG4gICAgICAgIGlmIChVU0VfUFJPRklMRVMuaHRtbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGFkZFRvU2V0KEFMTE9XRURfVEFHUywgaHRtbCk7XG4gICAgICAgICAgYWRkVG9TZXQoQUxMT1dFRF9BVFRSLCBodG1sJDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFVTRV9QUk9GSUxFUy5zdmcgPT09IHRydWUpIHtcbiAgICAgICAgICBhZGRUb1NldChBTExPV0VEX1RBR1MsIHN2Zyk7XG4gICAgICAgICAgYWRkVG9TZXQoQUxMT1dFRF9BVFRSLCBzdmckMSk7XG4gICAgICAgICAgYWRkVG9TZXQoQUxMT1dFRF9BVFRSLCB4bWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFVTRV9QUk9GSUxFUy5zdmdGaWx0ZXJzID09PSB0cnVlKSB7XG4gICAgICAgICAgYWRkVG9TZXQoQUxMT1dFRF9UQUdTLCBzdmdGaWx0ZXJzKTtcbiAgICAgICAgICBhZGRUb1NldChBTExPV0VEX0FUVFIsIHN2ZyQxKTtcbiAgICAgICAgICBhZGRUb1NldChBTExPV0VEX0FUVFIsIHhtbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoVVNFX1BST0ZJTEVTLm1hdGhNbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGFkZFRvU2V0KEFMTE9XRURfVEFHUywgbWF0aE1sKTtcbiAgICAgICAgICBhZGRUb1NldChBTExPV0VEX0FUVFIsIG1hdGhNbCQxKTtcbiAgICAgICAgICBhZGRUb1NldChBTExPV0VEX0FUVFIsIHhtbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyogTWVyZ2UgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzICovXG4gICAgICBpZiAoY2ZnLkFERF9UQUdTKSB7XG4gICAgICAgIGlmIChBTExPV0VEX1RBR1MgPT09IERFRkFVTFRfQUxMT1dFRF9UQUdTKSB7XG4gICAgICAgICAgQUxMT1dFRF9UQUdTID0gY2xvbmUoQUxMT1dFRF9UQUdTKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFkZFRvU2V0KEFMTE9XRURfVEFHUywgY2ZnLkFERF9UQUdTKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNmZy5BRERfQVRUUikge1xuICAgICAgICBpZiAoQUxMT1dFRF9BVFRSID09PSBERUZBVUxUX0FMTE9XRURfQVRUUikge1xuICAgICAgICAgIEFMTE9XRURfQVRUUiA9IGNsb25lKEFMTE9XRURfQVRUUik7XG4gICAgICAgIH1cblxuICAgICAgICBhZGRUb1NldChBTExPV0VEX0FUVFIsIGNmZy5BRERfQVRUUik7XG4gICAgICB9XG5cbiAgICAgIGlmIChjZmcuQUREX1VSSV9TQUZFX0FUVFIpIHtcbiAgICAgICAgYWRkVG9TZXQoVVJJX1NBRkVfQVRUUklCVVRFUywgY2ZnLkFERF9VUklfU0FGRV9BVFRSKTtcbiAgICAgIH1cblxuICAgICAgLyogQWRkICN0ZXh0IGluIGNhc2UgS0VFUF9DT05URU5UIGlzIHNldCB0byB0cnVlICovXG4gICAgICBpZiAoS0VFUF9DT05URU5UKSB7XG4gICAgICAgIEFMTE9XRURfVEFHU1snI3RleHQnXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8qIEFkZCBodG1sLCBoZWFkIGFuZCBib2R5IHRvIEFMTE9XRURfVEFHUyBpbiBjYXNlIFdIT0xFX0RPQ1VNRU5UIGlzIHRydWUgKi9cbiAgICAgIGlmIChXSE9MRV9ET0NVTUVOVCkge1xuICAgICAgICBhZGRUb1NldChBTExPV0VEX1RBR1MsIFsnaHRtbCcsICdoZWFkJywgJ2JvZHknXSk7XG4gICAgICB9XG5cbiAgICAgIC8qIEFkZCB0Ym9keSB0byBBTExPV0VEX1RBR1MgaW4gY2FzZSB0YWJsZXMgYXJlIHBlcm1pdHRlZCwgc2VlICMyODYsICMzNjUgKi9cbiAgICAgIGlmIChBTExPV0VEX1RBR1MudGFibGUpIHtcbiAgICAgICAgYWRkVG9TZXQoQUxMT1dFRF9UQUdTLCBbJ3Rib2R5J10pO1xuICAgICAgICBkZWxldGUgRk9SQklEX1RBR1MudGJvZHk7XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXZlbnQgZnVydGhlciBtYW5pcHVsYXRpb24gb2YgY29uZmlndXJhdGlvbi5cbiAgICAgIC8vIE5vdCBhdmFpbGFibGUgaW4gSUU4LCBTYWZhcmkgNSwgZXRjLlxuICAgICAgaWYgKGZyZWV6ZSkge1xuICAgICAgICBmcmVlemUoY2ZnKTtcbiAgICAgIH1cblxuICAgICAgQ09ORklHID0gY2ZnO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBfZm9yY2VSZW1vdmVcbiAgICAgKlxuICAgICAqIEBwYXJhbSAge05vZGV9IG5vZGUgYSBET00gbm9kZVxuICAgICAqL1xuICAgIHZhciBfZm9yY2VSZW1vdmUgPSBmdW5jdGlvbiBfZm9yY2VSZW1vdmUobm9kZSkge1xuICAgICAgYXJyYXlQdXNoKERPTVB1cmlmeS5yZW1vdmVkLCB7IGVsZW1lbnQ6IG5vZGUgfSk7XG4gICAgICB0cnkge1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgIG5vZGUub3V0ZXJIVE1MID0gZW1wdHlIVE1MO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBfcmVtb3ZlQXR0cmlidXRlXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IG5hbWUgYW4gQXR0cmlidXRlIG5hbWVcbiAgICAgKiBAcGFyYW0gIHtOb2RlfSBub2RlIGEgRE9NIG5vZGVcbiAgICAgKi9cbiAgICB2YXIgX3JlbW92ZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uIF9yZW1vdmVBdHRyaWJ1dGUobmFtZSwgbm9kZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXJyYXlQdXNoKERPTVB1cmlmeS5yZW1vdmVkLCB7XG4gICAgICAgICAgYXR0cmlidXRlOiBub2RlLmdldEF0dHJpYnV0ZU5vZGUobmFtZSksXG4gICAgICAgICAgZnJvbTogbm9kZVxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgYXJyYXlQdXNoKERPTVB1cmlmeS5yZW1vdmVkLCB7XG4gICAgICAgICAgYXR0cmlidXRlOiBudWxsLFxuICAgICAgICAgIGZyb206IG5vZGVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBfaW5pdERvY3VtZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IGRpcnR5IGEgc3RyaW5nIG9mIGRpcnR5IG1hcmt1cFxuICAgICAqIEByZXR1cm4ge0RvY3VtZW50fSBhIERPTSwgZmlsbGVkIHdpdGggdGhlIGRpcnR5IG1hcmt1cFxuICAgICAqL1xuICAgIHZhciBfaW5pdERvY3VtZW50ID0gZnVuY3Rpb24gX2luaXREb2N1bWVudChkaXJ0eSkge1xuICAgICAgLyogQ3JlYXRlIGEgSFRNTCBkb2N1bWVudCAqL1xuICAgICAgdmFyIGRvYyA9IHZvaWQgMDtcbiAgICAgIHZhciBsZWFkaW5nV2hpdGVzcGFjZSA9IHZvaWQgMDtcblxuICAgICAgaWYgKEZPUkNFX0JPRFkpIHtcbiAgICAgICAgZGlydHkgPSAnPHJlbW92ZT48L3JlbW92ZT4nICsgZGlydHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBJZiBGT1JDRV9CT0RZIGlzbid0IHVzZWQsIGxlYWRpbmcgd2hpdGVzcGFjZSBuZWVkcyB0byBiZSBwcmVzZXJ2ZWQgbWFudWFsbHkgKi9cbiAgICAgICAgdmFyIG1hdGNoZXMgPSBzdHJpbmdNYXRjaChkaXJ0eSwgL15bXFxyXFxuXFx0IF0rLyk7XG4gICAgICAgIGxlYWRpbmdXaGl0ZXNwYWNlID0gbWF0Y2hlcyAmJiBtYXRjaGVzWzBdO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlydHlQYXlsb2FkID0gdHJ1c3RlZFR5cGVzUG9saWN5ID8gdHJ1c3RlZFR5cGVzUG9saWN5LmNyZWF0ZUhUTUwoZGlydHkpIDogZGlydHk7XG4gICAgICAvKiBVc2UgdGhlIERPTVBhcnNlciBBUEkgYnkgZGVmYXVsdCwgZmFsbGJhY2sgbGF0ZXIgaWYgbmVlZHMgYmUgKi9cbiAgICAgIHRyeSB7XG4gICAgICAgIGRvYyA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoZGlydHlQYXlsb2FkLCAndGV4dC9odG1sJyk7XG4gICAgICB9IGNhdGNoIChfKSB7fVxuXG4gICAgICAvKiBVc2UgY3JlYXRlSFRNTERvY3VtZW50IGluIGNhc2UgRE9NUGFyc2VyIGlzIG5vdCBhdmFpbGFibGUgKi9cbiAgICAgIGlmICghZG9jIHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgIGRvYyA9IGltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgnJyk7XG4gICAgICAgIHZhciBfZG9jID0gZG9jLFxuICAgICAgICAgICAgYm9keSA9IF9kb2MuYm9keTtcblxuICAgICAgICBib2R5LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYm9keS5wYXJlbnROb2RlLmZpcnN0RWxlbWVudENoaWxkKTtcbiAgICAgICAgYm9keS5vdXRlckhUTUwgPSBkaXJ0eVBheWxvYWQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXJ0eSAmJiBsZWFkaW5nV2hpdGVzcGFjZSkge1xuICAgICAgICBkb2MuYm9keS5pbnNlcnRCZWZvcmUoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobGVhZGluZ1doaXRlc3BhY2UpLCBkb2MuYm9keS5jaGlsZE5vZGVzWzBdIHx8IG51bGwpO1xuICAgICAgfVxuXG4gICAgICAvKiBXb3JrIG9uIHdob2xlIGRvY3VtZW50IG9yIGp1c3QgaXRzIGJvZHkgKi9cbiAgICAgIHJldHVybiBnZXRFbGVtZW50c0J5VGFnTmFtZS5jYWxsKGRvYywgV0hPTEVfRE9DVU1FTlQgPyAnaHRtbCcgOiAnYm9keScpWzBdO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBfY3JlYXRlSXRlcmF0b3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSAge0RvY3VtZW50fSByb290IGRvY3VtZW50L2ZyYWdtZW50IHRvIGNyZWF0ZSBpdGVyYXRvciBmb3JcbiAgICAgKiBAcmV0dXJuIHtJdGVyYXRvcn0gaXRlcmF0b3IgaW5zdGFuY2VcbiAgICAgKi9cbiAgICB2YXIgX2NyZWF0ZUl0ZXJhdG9yID0gZnVuY3Rpb24gX2NyZWF0ZUl0ZXJhdG9yKHJvb3QpIHtcbiAgICAgIHJldHVybiBjcmVhdGVOb2RlSXRlcmF0b3IuY2FsbChyb290Lm93bmVyRG9jdW1lbnQgfHwgcm9vdCwgcm9vdCwgTm9kZUZpbHRlci5TSE9XX0VMRU1FTlQgfCBOb2RlRmlsdGVyLlNIT1dfQ09NTUVOVCB8IE5vZGVGaWx0ZXIuU0hPV19URVhULCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBOb2RlRmlsdGVyLkZJTFRFUl9BQ0NFUFQ7XG4gICAgICB9LCBmYWxzZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIF9pc0Nsb2JiZXJlZFxuICAgICAqXG4gICAgICogQHBhcmFtICB7Tm9kZX0gZWxtIGVsZW1lbnQgdG8gY2hlY2sgZm9yIGNsb2JiZXJpbmcgYXR0YWNrc1xuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgY2xvYmJlcmVkLCBmYWxzZSBpZiBzYWZlXG4gICAgICovXG4gICAgdmFyIF9pc0Nsb2JiZXJlZCA9IGZ1bmN0aW9uIF9pc0Nsb2JiZXJlZChlbG0pIHtcbiAgICAgIGlmIChlbG0gaW5zdGFuY2VvZiBUZXh0IHx8IGVsbSBpbnN0YW5jZW9mIENvbW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGVsbS5ub2RlTmFtZSAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIGVsbS50ZXh0Q29udGVudCAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIGVsbS5yZW1vdmVDaGlsZCAhPT0gJ2Z1bmN0aW9uJyB8fCAhKGVsbS5hdHRyaWJ1dGVzIGluc3RhbmNlb2YgTmFtZWROb2RlTWFwKSB8fCB0eXBlb2YgZWxtLnJlbW92ZUF0dHJpYnV0ZSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZWxtLnNldEF0dHJpYnV0ZSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZWxtLm5hbWVzcGFjZVVSSSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogX2lzTm9kZVxuICAgICAqXG4gICAgICogQHBhcmFtICB7Tm9kZX0gb2JqIG9iamVjdCB0byBjaGVjayB3aGV0aGVyIGl0J3MgYSBET00gbm9kZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaXMgb2JqZWN0IGlzIGEgRE9NIG5vZGVcbiAgICAgKi9cbiAgICB2YXIgX2lzTm9kZSA9IGZ1bmN0aW9uIF9pc05vZGUob2JqZWN0KSB7XG4gICAgICByZXR1cm4gKHR5cGVvZiBOb2RlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihOb2RlKSkgPT09ICdvYmplY3QnID8gb2JqZWN0IGluc3RhbmNlb2YgTm9kZSA6IG9iamVjdCAmJiAodHlwZW9mIG9iamVjdCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqZWN0KSkgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvYmplY3Qubm9kZU5hbWUgPT09ICdzdHJpbmcnO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBfZXhlY3V0ZUhvb2tcbiAgICAgKiBFeGVjdXRlIHVzZXIgY29uZmlndXJhYmxlIGhvb2tzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IGVudHJ5UG9pbnQgIE5hbWUgb2YgdGhlIGhvb2sncyBlbnRyeSBwb2ludFxuICAgICAqIEBwYXJhbSAge05vZGV9IGN1cnJlbnROb2RlIG5vZGUgdG8gd29yayBvbiB3aXRoIHRoZSBob29rXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBkYXRhIGFkZGl0aW9uYWwgaG9vayBwYXJhbWV0ZXJzXG4gICAgICovXG4gICAgdmFyIF9leGVjdXRlSG9vayA9IGZ1bmN0aW9uIF9leGVjdXRlSG9vayhlbnRyeVBvaW50LCBjdXJyZW50Tm9kZSwgZGF0YSkge1xuICAgICAgaWYgKCFob29rc1tlbnRyeVBvaW50XSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFycmF5Rm9yRWFjaChob29rc1tlbnRyeVBvaW50XSwgZnVuY3Rpb24gKGhvb2spIHtcbiAgICAgICAgaG9vay5jYWxsKERPTVB1cmlmeSwgY3VycmVudE5vZGUsIGRhdGEsIENPTkZJRyk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogX3Nhbml0aXplRWxlbWVudHNcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0IG5vZGVOYW1lXG4gICAgICogQHByb3RlY3QgdGV4dENvbnRlbnRcbiAgICAgKiBAcHJvdGVjdCByZW1vdmVDaGlsZFxuICAgICAqXG4gICAgICogQHBhcmFtICAge05vZGV9IGN1cnJlbnROb2RlIHRvIGNoZWNrIGZvciBwZXJtaXNzaW9uIHRvIGV4aXN0XG4gICAgICogQHJldHVybiAge0Jvb2xlYW59IHRydWUgaWYgbm9kZSB3YXMga2lsbGVkLCBmYWxzZSBpZiBsZWZ0IGFsaXZlXG4gICAgICovXG4gICAgdmFyIF9zYW5pdGl6ZUVsZW1lbnRzID0gZnVuY3Rpb24gX3Nhbml0aXplRWxlbWVudHMoY3VycmVudE5vZGUpIHtcbiAgICAgIHZhciBjb250ZW50ID0gdm9pZCAwO1xuXG4gICAgICAvKiBFeGVjdXRlIGEgaG9vayBpZiBwcmVzZW50ICovXG4gICAgICBfZXhlY3V0ZUhvb2soJ2JlZm9yZVNhbml0aXplRWxlbWVudHMnLCBjdXJyZW50Tm9kZSwgbnVsbCk7XG5cbiAgICAgIC8qIENoZWNrIGlmIGVsZW1lbnQgaXMgY2xvYmJlcmVkIG9yIGNhbiBjbG9iYmVyICovXG4gICAgICBpZiAoX2lzQ2xvYmJlcmVkKGN1cnJlbnROb2RlKSkge1xuICAgICAgICBfZm9yY2VSZW1vdmUoY3VycmVudE5vZGUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLyogQ2hlY2sgaWYgdGFnbmFtZSBjb250YWlucyBVbmljb2RlICovXG4gICAgICBpZiAoc3RyaW5nTWF0Y2goY3VycmVudE5vZGUubm9kZU5hbWUsIC9bXFx1MDA4MC1cXHVGRkZGXS8pKSB7XG4gICAgICAgIF9mb3JjZVJlbW92ZShjdXJyZW50Tm9kZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvKiBOb3cgbGV0J3MgY2hlY2sgdGhlIGVsZW1lbnQncyB0eXBlIGFuZCBuYW1lICovXG4gICAgICB2YXIgdGFnTmFtZSA9IHN0cmluZ1RvTG93ZXJDYXNlKGN1cnJlbnROb2RlLm5vZGVOYW1lKTtcblxuICAgICAgLyogRXhlY3V0ZSBhIGhvb2sgaWYgcHJlc2VudCAqL1xuICAgICAgX2V4ZWN1dGVIb29rKCd1cG9uU2FuaXRpemVFbGVtZW50JywgY3VycmVudE5vZGUsIHtcbiAgICAgICAgdGFnTmFtZTogdGFnTmFtZSxcbiAgICAgICAgYWxsb3dlZFRhZ3M6IEFMTE9XRURfVEFHU1xuICAgICAgfSk7XG5cbiAgICAgIC8qIFRha2UgY2FyZSBvZiBhbiBtWFNTIHBhdHRlcm4gdXNpbmcgcCwgYnIgaW5zaWRlIHN2ZywgbWF0aCAqL1xuICAgICAgaWYgKCh0YWdOYW1lID09PSAnc3ZnJyB8fCB0YWdOYW1lID09PSAnbWF0aCcpICYmIGN1cnJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3AsIGJyJykubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIF9mb3JjZVJlbW92ZShjdXJyZW50Tm9kZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvKiBEZXRlY3QgbVhTUyBhdHRlbXB0cyBhYnVzaW5nIG5hbWVzcGFjZSBjb25mdXNpb24gKi9cbiAgICAgIGlmICghX2lzTm9kZShjdXJyZW50Tm9kZS5maXJzdEVsZW1lbnRDaGlsZCkgJiYgKCFfaXNOb2RlKGN1cnJlbnROb2RlLmNvbnRlbnQpIHx8ICFfaXNOb2RlKGN1cnJlbnROb2RlLmNvbnRlbnQuZmlyc3RFbGVtZW50Q2hpbGQpKSAmJiByZWdFeHBUZXN0KC88WyEvXFx3XS9nLCBjdXJyZW50Tm9kZS5pbm5lckhUTUwpICYmIHJlZ0V4cFRlc3QoLzxbIS9cXHddL2csIGN1cnJlbnROb2RlLnRleHRDb250ZW50KSkge1xuICAgICAgICBfZm9yY2VSZW1vdmUoY3VycmVudE5vZGUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLyogUmVtb3ZlIGVsZW1lbnQgaWYgYW55dGhpbmcgZm9yYmlkcyBpdHMgcHJlc2VuY2UgKi9cbiAgICAgIGlmICghQUxMT1dFRF9UQUdTW3RhZ05hbWVdIHx8IEZPUkJJRF9UQUdTW3RhZ05hbWVdKSB7XG4gICAgICAgIC8qIEtlZXAgY29udGVudCBleGNlcHQgZm9yIGJhZC1saXN0ZWQgZWxlbWVudHMgKi9cbiAgICAgICAgaWYgKEtFRVBfQ09OVEVOVCAmJiAhRk9SQklEX0NPTlRFTlRTW3RhZ05hbWVdICYmIHR5cGVvZiBjdXJyZW50Tm9kZS5pbnNlcnRBZGphY2VudEhUTUwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGh0bWxUb0luc2VydCA9IGN1cnJlbnROb2RlLmlubmVySFRNTDtcbiAgICAgICAgICAgIGN1cnJlbnROb2RlLmluc2VydEFkamFjZW50SFRNTCgnQWZ0ZXJFbmQnLCB0cnVzdGVkVHlwZXNQb2xpY3kgPyB0cnVzdGVkVHlwZXNQb2xpY3kuY3JlYXRlSFRNTChodG1sVG9JbnNlcnQpIDogaHRtbFRvSW5zZXJ0KTtcbiAgICAgICAgICB9IGNhdGNoIChfKSB7fVxuICAgICAgICB9XG5cbiAgICAgICAgX2ZvcmNlUmVtb3ZlKGN1cnJlbnROb2RlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8qIFJlbW92ZSBpbiBjYXNlIGEgbm9zY3JpcHQvbm9lbWJlZCBYU1MgaXMgc3VzcGVjdGVkICovXG4gICAgICBpZiAoKHRhZ05hbWUgPT09ICdub3NjcmlwdCcgfHwgdGFnTmFtZSA9PT0gJ25vZW1iZWQnKSAmJiByZWdFeHBUZXN0KC88XFwvbm8oc2NyaXB0fGVtYmVkKS9pLCBjdXJyZW50Tm9kZS5pbm5lckhUTUwpKSB7XG4gICAgICAgIF9mb3JjZVJlbW92ZShjdXJyZW50Tm9kZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvKiBTYW5pdGl6ZSBlbGVtZW50IGNvbnRlbnQgdG8gYmUgdGVtcGxhdGUtc2FmZSAqL1xuICAgICAgaWYgKFNBRkVfRk9SX1RFTVBMQVRFUyAmJiBjdXJyZW50Tm9kZS5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgICAvKiBHZXQgdGhlIGVsZW1lbnQncyB0ZXh0IGNvbnRlbnQgKi9cbiAgICAgICAgY29udGVudCA9IGN1cnJlbnROb2RlLnRleHRDb250ZW50O1xuICAgICAgICBjb250ZW50ID0gc3RyaW5nUmVwbGFjZShjb250ZW50LCBNVVNUQUNIRV9FWFBSJCQxLCAnICcpO1xuICAgICAgICBjb250ZW50ID0gc3RyaW5nUmVwbGFjZShjb250ZW50LCBFUkJfRVhQUiQkMSwgJyAnKTtcbiAgICAgICAgaWYgKGN1cnJlbnROb2RlLnRleHRDb250ZW50ICE9PSBjb250ZW50KSB7XG4gICAgICAgICAgYXJyYXlQdXNoKERPTVB1cmlmeS5yZW1vdmVkLCB7IGVsZW1lbnQ6IGN1cnJlbnROb2RlLmNsb25lTm9kZSgpIH0pO1xuICAgICAgICAgIGN1cnJlbnROb2RlLnRleHRDb250ZW50ID0gY29udGVudDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKiBFeGVjdXRlIGEgaG9vayBpZiBwcmVzZW50ICovXG4gICAgICBfZXhlY3V0ZUhvb2soJ2FmdGVyU2FuaXRpemVFbGVtZW50cycsIGN1cnJlbnROb2RlLCBudWxsKTtcblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBfaXNWYWxpZEF0dHJpYnV0ZVxuICAgICAqXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBsY1RhZyBMb3dlcmNhc2UgdGFnIG5hbWUgb2YgY29udGFpbmluZyBlbGVtZW50LlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gbGNOYW1lIExvd2VyY2FzZSBhdHRyaWJ1dGUgbmFtZS5cbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IHZhbHVlIEF0dHJpYnV0ZSB2YWx1ZS5cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyB2YWxpZCwgb3RoZXJ3aXNlIGZhbHNlLlxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gICAgdmFyIF9pc1ZhbGlkQXR0cmlidXRlID0gZnVuY3Rpb24gX2lzVmFsaWRBdHRyaWJ1dGUobGNUYWcsIGxjTmFtZSwgdmFsdWUpIHtcbiAgICAgIC8qIE1ha2Ugc3VyZSBhdHRyaWJ1dGUgY2Fubm90IGNsb2JiZXIgKi9cbiAgICAgIGlmIChTQU5JVElaRV9ET00gJiYgKGxjTmFtZSA9PT0gJ2lkJyB8fCBsY05hbWUgPT09ICduYW1lJykgJiYgKHZhbHVlIGluIGRvY3VtZW50IHx8IHZhbHVlIGluIGZvcm1FbGVtZW50KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8qIEFsbG93IHZhbGlkIGRhdGEtKiBhdHRyaWJ1dGVzOiBBdCBsZWFzdCBvbmUgY2hhcmFjdGVyIGFmdGVyIFwiLVwiXG4gICAgICAgICAgKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2RvbS5odG1sI2VtYmVkZGluZy1jdXN0b20tbm9uLXZpc2libGUtZGF0YS13aXRoLXRoZS1kYXRhLSotYXR0cmlidXRlcylcbiAgICAgICAgICBYTUwtY29tcGF0aWJsZSAoaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5mcmFzdHJ1Y3R1cmUuaHRtbCN4bWwtY29tcGF0aWJsZSBhbmQgaHR0cDovL3d3dy53My5vcmcvVFIveG1sLyNkMGU4MDQpXG4gICAgICAgICAgV2UgZG9uJ3QgbmVlZCB0byBjaGVjayB0aGUgdmFsdWU7IGl0J3MgYWx3YXlzIFVSSSBzYWZlLiAqL1xuICAgICAgaWYgKEFMTE9XX0RBVEFfQVRUUiAmJiByZWdFeHBUZXN0KERBVEFfQVRUUiQkMSwgbGNOYW1lKSkgOyBlbHNlIGlmIChBTExPV19BUklBX0FUVFIgJiYgcmVnRXhwVGVzdChBUklBX0FUVFIkJDEsIGxjTmFtZSkpIDsgZWxzZSBpZiAoIUFMTE9XRURfQVRUUltsY05hbWVdIHx8IEZPUkJJRF9BVFRSW2xjTmFtZV0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIC8qIENoZWNrIHZhbHVlIGlzIHNhZmUuIEZpcnN0LCBpcyBhdHRyIGluZXJ0PyBJZiBzbywgaXMgc2FmZSAqL1xuICAgICAgfSBlbHNlIGlmIChVUklfU0FGRV9BVFRSSUJVVEVTW2xjTmFtZV0pIDsgZWxzZSBpZiAocmVnRXhwVGVzdChJU19BTExPV0VEX1VSSSQkMSwgc3RyaW5nUmVwbGFjZSh2YWx1ZSwgQVRUUl9XSElURVNQQUNFJCQxLCAnJykpKSA7IGVsc2UgaWYgKChsY05hbWUgPT09ICdzcmMnIHx8IGxjTmFtZSA9PT0gJ3hsaW5rOmhyZWYnIHx8IGxjTmFtZSA9PT0gJ2hyZWYnKSAmJiBsY1RhZyAhPT0gJ3NjcmlwdCcgJiYgc3RyaW5nSW5kZXhPZih2YWx1ZSwgJ2RhdGE6JykgPT09IDAgJiYgREFUQV9VUklfVEFHU1tsY1RhZ10pIDsgZWxzZSBpZiAoQUxMT1dfVU5LTk9XTl9QUk9UT0NPTFMgJiYgIXJlZ0V4cFRlc3QoSVNfU0NSSVBUX09SX0RBVEEkJDEsIHN0cmluZ1JlcGxhY2UodmFsdWUsIEFUVFJfV0hJVEVTUEFDRSQkMSwgJycpKSkgOyBlbHNlIGlmICghdmFsdWUpIDsgZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIF9zYW5pdGl6ZUF0dHJpYnV0ZXNcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0IGF0dHJpYnV0ZXNcbiAgICAgKiBAcHJvdGVjdCBub2RlTmFtZVxuICAgICAqIEBwcm90ZWN0IHJlbW92ZUF0dHJpYnV0ZVxuICAgICAqIEBwcm90ZWN0IHNldEF0dHJpYnV0ZVxuICAgICAqXG4gICAgICogQHBhcmFtICB7Tm9kZX0gY3VycmVudE5vZGUgdG8gc2FuaXRpemVcbiAgICAgKi9cbiAgICB2YXIgX3Nhbml0aXplQXR0cmlidXRlcyA9IGZ1bmN0aW9uIF9zYW5pdGl6ZUF0dHJpYnV0ZXMoY3VycmVudE5vZGUpIHtcbiAgICAgIHZhciBhdHRyID0gdm9pZCAwO1xuICAgICAgdmFyIHZhbHVlID0gdm9pZCAwO1xuICAgICAgdmFyIGxjTmFtZSA9IHZvaWQgMDtcbiAgICAgIHZhciBsID0gdm9pZCAwO1xuICAgICAgLyogRXhlY3V0ZSBhIGhvb2sgaWYgcHJlc2VudCAqL1xuICAgICAgX2V4ZWN1dGVIb29rKCdiZWZvcmVTYW5pdGl6ZUF0dHJpYnV0ZXMnLCBjdXJyZW50Tm9kZSwgbnVsbCk7XG5cbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gY3VycmVudE5vZGUuYXR0cmlidXRlcztcblxuICAgICAgLyogQ2hlY2sgaWYgd2UgaGF2ZSBhdHRyaWJ1dGVzOyBpZiBub3Qgd2UgbWlnaHQgaGF2ZSBhIHRleHQgbm9kZSAqL1xuXG4gICAgICBpZiAoIWF0dHJpYnV0ZXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaG9va0V2ZW50ID0ge1xuICAgICAgICBhdHRyTmFtZTogJycsXG4gICAgICAgIGF0dHJWYWx1ZTogJycsXG4gICAgICAgIGtlZXBBdHRyOiB0cnVlLFxuICAgICAgICBhbGxvd2VkQXR0cmlidXRlczogQUxMT1dFRF9BVFRSXG4gICAgICB9O1xuICAgICAgbCA9IGF0dHJpYnV0ZXMubGVuZ3RoO1xuXG4gICAgICAvKiBHbyBiYWNrd2FyZHMgb3ZlciBhbGwgYXR0cmlidXRlczsgc2FmZWx5IHJlbW92ZSBiYWQgb25lcyAqL1xuICAgICAgd2hpbGUgKGwtLSkge1xuICAgICAgICBhdHRyID0gYXR0cmlidXRlc1tsXTtcbiAgICAgICAgdmFyIF9hdHRyID0gYXR0cixcbiAgICAgICAgICAgIG5hbWUgPSBfYXR0ci5uYW1lLFxuICAgICAgICAgICAgbmFtZXNwYWNlVVJJID0gX2F0dHIubmFtZXNwYWNlVVJJO1xuXG4gICAgICAgIHZhbHVlID0gc3RyaW5nVHJpbShhdHRyLnZhbHVlKTtcbiAgICAgICAgbGNOYW1lID0gc3RyaW5nVG9Mb3dlckNhc2UobmFtZSk7XG5cbiAgICAgICAgLyogRXhlY3V0ZSBhIGhvb2sgaWYgcHJlc2VudCAqL1xuICAgICAgICBob29rRXZlbnQuYXR0ck5hbWUgPSBsY05hbWU7XG4gICAgICAgIGhvb2tFdmVudC5hdHRyVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgaG9va0V2ZW50LmtlZXBBdHRyID0gdHJ1ZTtcbiAgICAgICAgaG9va0V2ZW50LmZvcmNlS2VlcEF0dHIgPSB1bmRlZmluZWQ7IC8vIEFsbG93cyBkZXZlbG9wZXJzIHRvIHNlZSB0aGlzIGlzIGEgcHJvcGVydHkgdGhleSBjYW4gc2V0XG4gICAgICAgIF9leGVjdXRlSG9vaygndXBvblNhbml0aXplQXR0cmlidXRlJywgY3VycmVudE5vZGUsIGhvb2tFdmVudCk7XG4gICAgICAgIHZhbHVlID0gaG9va0V2ZW50LmF0dHJWYWx1ZTtcbiAgICAgICAgLyogRGlkIHRoZSBob29rcyBhcHByb3ZlIG9mIHRoZSBhdHRyaWJ1dGU/ICovXG4gICAgICAgIGlmIChob29rRXZlbnQuZm9yY2VLZWVwQXR0cikge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogUmVtb3ZlIGF0dHJpYnV0ZSAqL1xuICAgICAgICBfcmVtb3ZlQXR0cmlidXRlKG5hbWUsIGN1cnJlbnROb2RlKTtcblxuICAgICAgICAvKiBEaWQgdGhlIGhvb2tzIGFwcHJvdmUgb2YgdGhlIGF0dHJpYnV0ZT8gKi9cbiAgICAgICAgaWYgKCFob29rRXZlbnQua2VlcEF0dHIpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIFdvcmsgYXJvdW5kIGEgc2VjdXJpdHkgaXNzdWUgaW4galF1ZXJ5IDMuMCAqL1xuICAgICAgICBpZiAocmVnRXhwVGVzdCgvXFwvPi9pLCB2YWx1ZSkpIHtcbiAgICAgICAgICBfcmVtb3ZlQXR0cmlidXRlKG5hbWUsIGN1cnJlbnROb2RlKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIFNhbml0aXplIGF0dHJpYnV0ZSBjb250ZW50IHRvIGJlIHRlbXBsYXRlLXNhZmUgKi9cbiAgICAgICAgaWYgKFNBRkVfRk9SX1RFTVBMQVRFUykge1xuICAgICAgICAgIHZhbHVlID0gc3RyaW5nUmVwbGFjZSh2YWx1ZSwgTVVTVEFDSEVfRVhQUiQkMSwgJyAnKTtcbiAgICAgICAgICB2YWx1ZSA9IHN0cmluZ1JlcGxhY2UodmFsdWUsIEVSQl9FWFBSJCQxLCAnICcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogSXMgYHZhbHVlYCB2YWxpZCBmb3IgdGhpcyBhdHRyaWJ1dGU/ICovXG4gICAgICAgIHZhciBsY1RhZyA9IGN1cnJlbnROb2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICghX2lzVmFsaWRBdHRyaWJ1dGUobGNUYWcsIGxjTmFtZSwgdmFsdWUpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBIYW5kbGUgaW52YWxpZCBkYXRhLSogYXR0cmlidXRlIHNldCBieSB0cnktY2F0Y2hpbmcgaXQgKi9cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAobmFtZXNwYWNlVVJJKSB7XG4gICAgICAgICAgICBjdXJyZW50Tm9kZS5zZXRBdHRyaWJ1dGVOUyhuYW1lc3BhY2VVUkksIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLyogRmFsbGJhY2sgdG8gc2V0QXR0cmlidXRlKCkgZm9yIGJyb3dzZXItdW5yZWNvZ25pemVkIG5hbWVzcGFjZXMgZS5nLiBcIngtc2NoZW1hXCIuICovXG4gICAgICAgICAgICBjdXJyZW50Tm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFycmF5UG9wKERPTVB1cmlmeS5yZW1vdmVkKTtcbiAgICAgICAgfSBjYXRjaCAoXykge31cbiAgICAgIH1cblxuICAgICAgLyogRXhlY3V0ZSBhIGhvb2sgaWYgcHJlc2VudCAqL1xuICAgICAgX2V4ZWN1dGVIb29rKCdhZnRlclNhbml0aXplQXR0cmlidXRlcycsIGN1cnJlbnROb2RlLCBudWxsKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogX3Nhbml0aXplU2hhZG93RE9NXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtEb2N1bWVudEZyYWdtZW50fSBmcmFnbWVudCB0byBpdGVyYXRlIG92ZXIgcmVjdXJzaXZlbHlcbiAgICAgKi9cbiAgICB2YXIgX3Nhbml0aXplU2hhZG93RE9NID0gZnVuY3Rpb24gX3Nhbml0aXplU2hhZG93RE9NKGZyYWdtZW50KSB7XG4gICAgICB2YXIgc2hhZG93Tm9kZSA9IHZvaWQgMDtcbiAgICAgIHZhciBzaGFkb3dJdGVyYXRvciA9IF9jcmVhdGVJdGVyYXRvcihmcmFnbWVudCk7XG5cbiAgICAgIC8qIEV4ZWN1dGUgYSBob29rIGlmIHByZXNlbnQgKi9cbiAgICAgIF9leGVjdXRlSG9vaygnYmVmb3JlU2FuaXRpemVTaGFkb3dET00nLCBmcmFnbWVudCwgbnVsbCk7XG5cbiAgICAgIHdoaWxlIChzaGFkb3dOb2RlID0gc2hhZG93SXRlcmF0b3IubmV4dE5vZGUoKSkge1xuICAgICAgICAvKiBFeGVjdXRlIGEgaG9vayBpZiBwcmVzZW50ICovXG4gICAgICAgIF9leGVjdXRlSG9vaygndXBvblNhbml0aXplU2hhZG93Tm9kZScsIHNoYWRvd05vZGUsIG51bGwpO1xuXG4gICAgICAgIC8qIFNhbml0aXplIHRhZ3MgYW5kIGVsZW1lbnRzICovXG4gICAgICAgIGlmIChfc2FuaXRpemVFbGVtZW50cyhzaGFkb3dOb2RlKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogRGVlcCBzaGFkb3cgRE9NIGRldGVjdGVkICovXG4gICAgICAgIGlmIChzaGFkb3dOb2RlLmNvbnRlbnQgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KSB7XG4gICAgICAgICAgX3Nhbml0aXplU2hhZG93RE9NKHNoYWRvd05vZGUuY29udGVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBDaGVjayBhdHRyaWJ1dGVzLCBzYW5pdGl6ZSBpZiBuZWNlc3NhcnkgKi9cbiAgICAgICAgX3Nhbml0aXplQXR0cmlidXRlcyhzaGFkb3dOb2RlKTtcbiAgICAgIH1cblxuICAgICAgLyogRXhlY3V0ZSBhIGhvb2sgaWYgcHJlc2VudCAqL1xuICAgICAgX2V4ZWN1dGVIb29rKCdhZnRlclNhbml0aXplU2hhZG93RE9NJywgZnJhZ21lbnQsIG51bGwpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTYW5pdGl6ZVxuICAgICAqIFB1YmxpYyBtZXRob2QgcHJvdmlkaW5nIGNvcmUgc2FuaXRhdGlvbiBmdW5jdGlvbmFsaXR5XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xOb2RlfSBkaXJ0eSBzdHJpbmcgb3IgRE9NIG5vZGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuICAgIERPTVB1cmlmeS5zYW5pdGl6ZSA9IGZ1bmN0aW9uIChkaXJ0eSwgY2ZnKSB7XG4gICAgICB2YXIgYm9keSA9IHZvaWQgMDtcbiAgICAgIHZhciBpbXBvcnRlZE5vZGUgPSB2b2lkIDA7XG4gICAgICB2YXIgY3VycmVudE5vZGUgPSB2b2lkIDA7XG4gICAgICB2YXIgb2xkTm9kZSA9IHZvaWQgMDtcbiAgICAgIHZhciByZXR1cm5Ob2RlID0gdm9pZCAwO1xuICAgICAgLyogTWFrZSBzdXJlIHdlIGhhdmUgYSBzdHJpbmcgdG8gc2FuaXRpemUuXG4gICAgICAgIERPIE5PVCByZXR1cm4gZWFybHksIGFzIHRoaXMgd2lsbCByZXR1cm4gdGhlIHdyb25nIHR5cGUgaWZcbiAgICAgICAgdGhlIHVzZXIgaGFzIHJlcXVlc3RlZCBhIERPTSBvYmplY3QgcmF0aGVyIHRoYW4gYSBzdHJpbmcgKi9cbiAgICAgIGlmICghZGlydHkpIHtcbiAgICAgICAgZGlydHkgPSAnPCEtLT4nO1xuICAgICAgfVxuXG4gICAgICAvKiBTdHJpbmdpZnksIGluIGNhc2UgZGlydHkgaXMgYW4gb2JqZWN0ICovXG4gICAgICBpZiAodHlwZW9mIGRpcnR5ICE9PSAnc3RyaW5nJyAmJiAhX2lzTm9kZShkaXJ0eSkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lZ2F0ZWQtY29uZGl0aW9uXG4gICAgICAgIGlmICh0eXBlb2YgZGlydHkudG9TdHJpbmcgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyB0eXBlRXJyb3JDcmVhdGUoJ3RvU3RyaW5nIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlydHkgPSBkaXJ0eS50b1N0cmluZygpO1xuICAgICAgICAgIGlmICh0eXBlb2YgZGlydHkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyB0eXBlRXJyb3JDcmVhdGUoJ2RpcnR5IGlzIG5vdCBhIHN0cmluZywgYWJvcnRpbmcnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyogQ2hlY2sgd2UgY2FuIHJ1bi4gT3RoZXJ3aXNlIGZhbGwgYmFjayBvciBpZ25vcmUgKi9cbiAgICAgIGlmICghRE9NUHVyaWZ5LmlzU3VwcG9ydGVkKSB7XG4gICAgICAgIGlmIChfdHlwZW9mKHdpbmRvdy50b1N0YXRpY0hUTUwpID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygd2luZG93LnRvU3RhdGljSFRNTCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGlydHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93LnRvU3RhdGljSFRNTChkaXJ0eSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF9pc05vZGUoZGlydHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93LnRvU3RhdGljSFRNTChkaXJ0eS5vdXRlckhUTUwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkaXJ0eTtcbiAgICAgIH1cblxuICAgICAgLyogQXNzaWduIGNvbmZpZyB2YXJzICovXG4gICAgICBpZiAoIVNFVF9DT05GSUcpIHtcbiAgICAgICAgX3BhcnNlQ29uZmlnKGNmZyk7XG4gICAgICB9XG5cbiAgICAgIC8qIENsZWFuIHVwIHJlbW92ZWQgZWxlbWVudHMgKi9cbiAgICAgIERPTVB1cmlmeS5yZW1vdmVkID0gW107XG5cbiAgICAgIC8qIENoZWNrIGlmIGRpcnR5IGlzIGNvcnJlY3RseSB0eXBlZCBmb3IgSU5fUExBQ0UgKi9cbiAgICAgIGlmICh0eXBlb2YgZGlydHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIElOX1BMQUNFID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChJTl9QTEFDRSkgOyBlbHNlIGlmIChkaXJ0eSBpbnN0YW5jZW9mIE5vZGUpIHtcbiAgICAgICAgLyogSWYgZGlydHkgaXMgYSBET00gZWxlbWVudCwgYXBwZW5kIHRvIGFuIGVtcHR5IGRvY3VtZW50IHRvIGF2b2lkXG4gICAgICAgICAgIGVsZW1lbnRzIGJlaW5nIHN0cmlwcGVkIGJ5IHRoZSBwYXJzZXIgKi9cbiAgICAgICAgYm9keSA9IF9pbml0RG9jdW1lbnQoJzwhLS0tLT4nKTtcbiAgICAgICAgaW1wb3J0ZWROb2RlID0gYm9keS5vd25lckRvY3VtZW50LmltcG9ydE5vZGUoZGlydHksIHRydWUpO1xuICAgICAgICBpZiAoaW1wb3J0ZWROb2RlLm5vZGVUeXBlID09PSAxICYmIGltcG9ydGVkTm9kZS5ub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgICAgLyogTm9kZSBpcyBhbHJlYWR5IGEgYm9keSwgdXNlIGFzIGlzICovXG4gICAgICAgICAgYm9keSA9IGltcG9ydGVkTm9kZTtcbiAgICAgICAgfSBlbHNlIGlmIChpbXBvcnRlZE5vZGUubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgICAgIGJvZHkgPSBpbXBvcnRlZE5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vcHJlZmVyLW5vZGUtYXBwZW5kXG4gICAgICAgICAgYm9keS5hcHBlbmRDaGlsZChpbXBvcnRlZE5vZGUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBFeGl0IGRpcmVjdGx5IGlmIHdlIGhhdmUgbm90aGluZyB0byBkbyAqL1xuICAgICAgICBpZiAoIVJFVFVSTl9ET00gJiYgIVNBRkVfRk9SX1RFTVBMQVRFUyAmJiAhV0hPTEVfRE9DVU1FTlQgJiZcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vcHJlZmVyLWluY2x1ZGVzXG4gICAgICAgIGRpcnR5LmluZGV4T2YoJzwnKSA9PT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1c3RlZFR5cGVzUG9saWN5ICYmIFJFVFVSTl9UUlVTVEVEX1RZUEUgPyB0cnVzdGVkVHlwZXNQb2xpY3kuY3JlYXRlSFRNTChkaXJ0eSkgOiBkaXJ0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIEluaXRpYWxpemUgdGhlIGRvY3VtZW50IHRvIHdvcmsgb24gKi9cbiAgICAgICAgYm9keSA9IF9pbml0RG9jdW1lbnQoZGlydHkpO1xuXG4gICAgICAgIC8qIENoZWNrIHdlIGhhdmUgYSBET00gbm9kZSBmcm9tIHRoZSBkYXRhICovXG4gICAgICAgIGlmICghYm9keSkge1xuICAgICAgICAgIHJldHVybiBSRVRVUk5fRE9NID8gbnVsbCA6IGVtcHR5SFRNTDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKiBSZW1vdmUgZmlyc3QgZWxlbWVudCBub2RlIChvdXJzKSBpZiBGT1JDRV9CT0RZIGlzIHNldCAqL1xuICAgICAgaWYgKGJvZHkgJiYgRk9SQ0VfQk9EWSkge1xuICAgICAgICBfZm9yY2VSZW1vdmUoYm9keS5maXJzdENoaWxkKTtcbiAgICAgIH1cblxuICAgICAgLyogR2V0IG5vZGUgaXRlcmF0b3IgKi9cbiAgICAgIHZhciBub2RlSXRlcmF0b3IgPSBfY3JlYXRlSXRlcmF0b3IoSU5fUExBQ0UgPyBkaXJ0eSA6IGJvZHkpO1xuXG4gICAgICAvKiBOb3cgc3RhcnQgaXRlcmF0aW5nIG92ZXIgdGhlIGNyZWF0ZWQgZG9jdW1lbnQgKi9cbiAgICAgIHdoaWxlIChjdXJyZW50Tm9kZSA9IG5vZGVJdGVyYXRvci5uZXh0Tm9kZSgpKSB7XG4gICAgICAgIC8qIEZpeCBJRSdzIHN0cmFuZ2UgYmVoYXZpb3Igd2l0aCBtYW5pcHVsYXRlZCB0ZXh0Tm9kZXMgIzg5ICovXG4gICAgICAgIGlmIChjdXJyZW50Tm9kZS5ub2RlVHlwZSA9PT0gMyAmJiBjdXJyZW50Tm9kZSA9PT0gb2xkTm9kZSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogU2FuaXRpemUgdGFncyBhbmQgZWxlbWVudHMgKi9cbiAgICAgICAgaWYgKF9zYW5pdGl6ZUVsZW1lbnRzKGN1cnJlbnROb2RlKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogU2hhZG93IERPTSBkZXRlY3RlZCwgc2FuaXRpemUgaXQgKi9cbiAgICAgICAgaWYgKGN1cnJlbnROb2RlLmNvbnRlbnQgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KSB7XG4gICAgICAgICAgX3Nhbml0aXplU2hhZG93RE9NKGN1cnJlbnROb2RlLmNvbnRlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogQ2hlY2sgYXR0cmlidXRlcywgc2FuaXRpemUgaWYgbmVjZXNzYXJ5ICovXG4gICAgICAgIF9zYW5pdGl6ZUF0dHJpYnV0ZXMoY3VycmVudE5vZGUpO1xuXG4gICAgICAgIG9sZE5vZGUgPSBjdXJyZW50Tm9kZTtcbiAgICAgIH1cblxuICAgICAgb2xkTm9kZSA9IG51bGw7XG5cbiAgICAgIC8qIElmIHdlIHNhbml0aXplZCBgZGlydHlgIGluLXBsYWNlLCByZXR1cm4gaXQuICovXG4gICAgICBpZiAoSU5fUExBQ0UpIHtcbiAgICAgICAgcmV0dXJuIGRpcnR5O1xuICAgICAgfVxuXG4gICAgICAvKiBSZXR1cm4gc2FuaXRpemVkIHN0cmluZyBvciBET00gKi9cbiAgICAgIGlmIChSRVRVUk5fRE9NKSB7XG4gICAgICAgIGlmIChSRVRVUk5fRE9NX0ZSQUdNRU5UKSB7XG4gICAgICAgICAgcmV0dXJuTm9kZSA9IGNyZWF0ZURvY3VtZW50RnJhZ21lbnQuY2FsbChib2R5Lm93bmVyRG9jdW1lbnQpO1xuXG4gICAgICAgICAgd2hpbGUgKGJvZHkuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vcHJlZmVyLW5vZGUtYXBwZW5kXG4gICAgICAgICAgICByZXR1cm5Ob2RlLmFwcGVuZENoaWxkKGJvZHkuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybk5vZGUgPSBib2R5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFJFVFVSTl9ET01fSU1QT1JUKSB7XG4gICAgICAgICAgLypcbiAgICAgICAgICAgIEFkb3B0Tm9kZSgpIGlzIG5vdCB1c2VkIGJlY2F1c2UgaW50ZXJuYWwgc3RhdGUgaXMgbm90IHJlc2V0XG4gICAgICAgICAgICAoZS5nLiB0aGUgcGFzdCBuYW1lcyBtYXAgb2YgYSBIVE1MRm9ybUVsZW1lbnQpLCB0aGlzIGlzIHNhZmVcbiAgICAgICAgICAgIGluIHRoZW9yeSBidXQgd2Ugd291bGQgcmF0aGVyIG5vdCByaXNrIGFub3RoZXIgYXR0YWNrIHZlY3Rvci5cbiAgICAgICAgICAgIFRoZSBzdGF0ZSB0aGF0IGlzIGNsb25lZCBieSBpbXBvcnROb2RlKCkgaXMgZXhwbGljaXRseSBkZWZpbmVkXG4gICAgICAgICAgICBieSB0aGUgc3BlY3MuXG4gICAgICAgICAgKi9cbiAgICAgICAgICByZXR1cm5Ob2RlID0gaW1wb3J0Tm9kZS5jYWxsKG9yaWdpbmFsRG9jdW1lbnQsIHJldHVybk5vZGUsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldHVybk5vZGU7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZXJpYWxpemVkSFRNTCA9IFdIT0xFX0RPQ1VNRU5UID8gYm9keS5vdXRlckhUTUwgOiBib2R5LmlubmVySFRNTDtcblxuICAgICAgLyogU2FuaXRpemUgZmluYWwgc3RyaW5nIHRlbXBsYXRlLXNhZmUgKi9cbiAgICAgIGlmIChTQUZFX0ZPUl9URU1QTEFURVMpIHtcbiAgICAgICAgc2VyaWFsaXplZEhUTUwgPSBzdHJpbmdSZXBsYWNlKHNlcmlhbGl6ZWRIVE1MLCBNVVNUQUNIRV9FWFBSJCQxLCAnICcpO1xuICAgICAgICBzZXJpYWxpemVkSFRNTCA9IHN0cmluZ1JlcGxhY2Uoc2VyaWFsaXplZEhUTUwsIEVSQl9FWFBSJCQxLCAnICcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1c3RlZFR5cGVzUG9saWN5ICYmIFJFVFVSTl9UUlVTVEVEX1RZUEUgPyB0cnVzdGVkVHlwZXNQb2xpY3kuY3JlYXRlSFRNTChzZXJpYWxpemVkSFRNTCkgOiBzZXJpYWxpemVkSFRNTDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUHVibGljIG1ldGhvZCB0byBzZXQgdGhlIGNvbmZpZ3VyYXRpb24gb25jZVxuICAgICAqIHNldENvbmZpZ1xuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqL1xuICAgIERPTVB1cmlmeS5zZXRDb25maWcgPSBmdW5jdGlvbiAoY2ZnKSB7XG4gICAgICBfcGFyc2VDb25maWcoY2ZnKTtcbiAgICAgIFNFVF9DT05GSUcgPSB0cnVlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQdWJsaWMgbWV0aG9kIHRvIHJlbW92ZSB0aGUgY29uZmlndXJhdGlvblxuICAgICAqIGNsZWFyQ29uZmlnXG4gICAgICpcbiAgICAgKi9cbiAgICBET01QdXJpZnkuY2xlYXJDb25maWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBDT05GSUcgPSBudWxsO1xuICAgICAgU0VUX0NPTkZJRyA9IGZhbHNlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQdWJsaWMgbWV0aG9kIHRvIGNoZWNrIGlmIGFuIGF0dHJpYnV0ZSB2YWx1ZSBpcyB2YWxpZC5cbiAgICAgKiBVc2VzIGxhc3Qgc2V0IGNvbmZpZywgaWYgYW55LiBPdGhlcndpc2UsIHVzZXMgY29uZmlnIGRlZmF1bHRzLlxuICAgICAqIGlzVmFsaWRBdHRyaWJ1dGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gdGFnIFRhZyBuYW1lIG9mIGNvbnRhaW5pbmcgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGF0dHIgQXR0cmlidXRlIG5hbWUuXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSB2YWx1ZSBBdHRyaWJ1dGUgdmFsdWUuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgdmFsaWQuIE90aGVyd2lzZSwgcmV0dXJucyBmYWxzZS5cbiAgICAgKi9cbiAgICBET01QdXJpZnkuaXNWYWxpZEF0dHJpYnV0ZSA9IGZ1bmN0aW9uICh0YWcsIGF0dHIsIHZhbHVlKSB7XG4gICAgICAvKiBJbml0aWFsaXplIHNoYXJlZCBjb25maWcgdmFycyBpZiBuZWNlc3NhcnkuICovXG4gICAgICBpZiAoIUNPTkZJRykge1xuICAgICAgICBfcGFyc2VDb25maWcoe30pO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGNUYWcgPSBzdHJpbmdUb0xvd2VyQ2FzZSh0YWcpO1xuICAgICAgdmFyIGxjTmFtZSA9IHN0cmluZ1RvTG93ZXJDYXNlKGF0dHIpO1xuICAgICAgcmV0dXJuIF9pc1ZhbGlkQXR0cmlidXRlKGxjVGFnLCBsY05hbWUsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkSG9va1xuICAgICAqIFB1YmxpYyBtZXRob2QgdG8gYWRkIERPTVB1cmlmeSBob29rc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGVudHJ5UG9pbnQgZW50cnkgcG9pbnQgZm9yIHRoZSBob29rIHRvIGFkZFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhvb2tGdW5jdGlvbiBmdW5jdGlvbiB0byBleGVjdXRlXG4gICAgICovXG4gICAgRE9NUHVyaWZ5LmFkZEhvb2sgPSBmdW5jdGlvbiAoZW50cnlQb2ludCwgaG9va0Z1bmN0aW9uKSB7XG4gICAgICBpZiAodHlwZW9mIGhvb2tGdW5jdGlvbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGhvb2tzW2VudHJ5UG9pbnRdID0gaG9va3NbZW50cnlQb2ludF0gfHwgW107XG4gICAgICBhcnJheVB1c2goaG9va3NbZW50cnlQb2ludF0sIGhvb2tGdW5jdGlvbik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZUhvb2tcbiAgICAgKiBQdWJsaWMgbWV0aG9kIHRvIHJlbW92ZSBhIERPTVB1cmlmeSBob29rIGF0IGEgZ2l2ZW4gZW50cnlQb2ludFxuICAgICAqIChwb3BzIGl0IGZyb20gdGhlIHN0YWNrIG9mIGhvb2tzIGlmIG1vcmUgYXJlIHByZXNlbnQpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZW50cnlQb2ludCBlbnRyeSBwb2ludCBmb3IgdGhlIGhvb2sgdG8gcmVtb3ZlXG4gICAgICovXG4gICAgRE9NUHVyaWZ5LnJlbW92ZUhvb2sgPSBmdW5jdGlvbiAoZW50cnlQb2ludCkge1xuICAgICAgaWYgKGhvb2tzW2VudHJ5UG9pbnRdKSB7XG4gICAgICAgIGFycmF5UG9wKGhvb2tzW2VudHJ5UG9pbnRdKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlSG9va3NcbiAgICAgKiBQdWJsaWMgbWV0aG9kIHRvIHJlbW92ZSBhbGwgRE9NUHVyaWZ5IGhvb2tzIGF0IGEgZ2l2ZW4gZW50cnlQb2ludFxuICAgICAqXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBlbnRyeVBvaW50IGVudHJ5IHBvaW50IGZvciB0aGUgaG9va3MgdG8gcmVtb3ZlXG4gICAgICovXG4gICAgRE9NUHVyaWZ5LnJlbW92ZUhvb2tzID0gZnVuY3Rpb24gKGVudHJ5UG9pbnQpIHtcbiAgICAgIGlmIChob29rc1tlbnRyeVBvaW50XSkge1xuICAgICAgICBob29rc1tlbnRyeVBvaW50XSA9IFtdO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVBbGxIb29rc1xuICAgICAqIFB1YmxpYyBtZXRob2QgdG8gcmVtb3ZlIGFsbCBET01QdXJpZnkgaG9va3NcbiAgICAgKlxuICAgICAqL1xuICAgIERPTVB1cmlmeS5yZW1vdmVBbGxIb29rcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGhvb2tzID0ge307XG4gICAgfTtcblxuICAgIHJldHVybiBET01QdXJpZnk7XG4gIH1cblxuICB2YXIgcHVyaWZ5ID0gY3JlYXRlRE9NUHVyaWZ5KCk7XG5cbiAgcmV0dXJuIHB1cmlmeTtcblxufSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVyaWZ5LmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGFuYWx5dGljc18xID0gcmVxdWlyZShcIi4vdXRpbHMvYW5hbHl0aWNzXCIpO1xuY29uc3QgZG9tXzEgPSByZXF1aXJlKFwiLi91dGlscy9kb21cIik7XG5jb25zdCBub3RpZmljYXRpb25zXzEgPSByZXF1aXJlKFwiLi91dGlscy9ub3RpZmljYXRpb25zXCIpO1xuLy8gUmVnaXN0ZXJpbmcgdGhpcyBsaXN0ZW5lciB3aGVuIHRoZSBzY3JpcHQgaXMgZmlyc3QgZXhlY3V0ZWQgZW5zdXJlcyB0aGF0IHRoZVxuLy8gb2Zmc2NyZWVuIGRvY3VtZW50IHdpbGwgYmUgYWJsZSB0byByZWNlaXZlIG1lc3NhZ2VzIHdoZW4gdGhlIHByb21pc2UgcmV0dXJuZWRcbi8vIGJ5IGBvZmZzY3JlZW4uY3JlYXRlRG9jdW1lbnQoKWAgcmVzb2x2ZXMuXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoaGFuZGxlTWVzc2FnZXMpO1xubGV0IGFuYWx5dGljc0lzRW5hYmxlZCA9IGZhbHNlO1xuLy8gVGhpcyBmdW5jdGlvbiBwZXJmb3JtcyBiYXNpYyBmaWx0ZXJpbmcgYW5kIGVycm9yIGNoZWNraW5nIG9uIG1lc3NhZ2VzIGJlZm9yZVxuLy8gZGlzcGF0Y2hpbmcgdGhlIG1lc3NhZ2UgdG8gYSBtb3JlIHNwZWNpZmljIG1lc3NhZ2UgaGFuZGxlci5cbmZ1bmN0aW9uIGhhbmRsZU1lc3NhZ2VzKG1lc3NhZ2UsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIC8vIFJldHVybiBlYXJseSBpZiB0aGlzIG1lc3NhZ2UgaXNuJ3QgbWVhbnQgZm9yIHRoZSBvZmZzY3JlZW4gZG9jdW1lbnQuXG4gICAgICAgIGlmIChtZXNzYWdlLnRhcmdldCAhPT0gXCJvZmZzY3JlZW5cIikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIERpc3BhdGNoIHRoZSBtZXNzYWdlIHRvIGFuIGFwcHJvcHJpYXRlIGhhbmRsZXIuXG4gICAgICAgIHN3aXRjaCAobWVzc2FnZS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwib2Zmc2NyZWVuLW5vdGlmaWNhdGlvbnNcIjpcbiAgICAgICAgICAgICAgICBsZXQgeyBub3RpZmljYXRpb24sIG5hbWUsIGNvdW50LCBsYXN0VGltZSwgdGltZU1vZGlmaWVkIH0gPSB5aWVsZCAoMCwgbm90aWZpY2F0aW9uc18xLmxvYWRBc3NpZ25tZW50Tm90aWZpY2F0aW9ucykobWVzc2FnZS5kYXRhLnVybCwgbWVzc2FnZS5kYXRhLmxhc3RUaW1lKTtcbiAgICAgICAgICAgICAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibm90aWZpY2F0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RUaW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZU1vZGlmaWVkLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm9mZnNjcmVlbi1hbmFseXRpY3NcIjpcbiAgICAgICAgICAgICAgICBpZiAoIWFuYWx5dGljc0lzRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCAoMCwgYW5hbHl0aWNzXzEuaW5pdGlhbGl6ZUFuYWx5dGljcykoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRDb250ZXh0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQW5hbHl0aWNzRW5hYmxlZDogKDAsIGRvbV8xLmdldEJyb3dzZXIpKCkgIT09IFwiRmlyZWZveFwiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5kYXRhLnNldHRpbmdzLmFuYWx5dGljcyAhPT0gXCJkaXNhYmxlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRUaGVtZTogKF9hID0gbWVzc2FnZS5kYXRhLnNldHRpbmdzLnRoZW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIjx1bnNldD5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQmV0YTogKF9iID0gbWVzc2FnZS5kYXRhLnNldHRpbmdzLmJldGEpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFwiPHVuc2V0PlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFZlcnNpb246IG1lc3NhZ2UuZGF0YS5zZXR0aW5ncy52ZXJzaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmVyc2lvbjogKF9jID0gbWVzc2FnZS5kYXRhLnNldHRpbmdzLm5ld1ZlcnNpb24pICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IFwiPHVuc2V0PlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZG9tVXNlcklkOiBtZXNzYWdlLmRhdGEuc2V0dGluZ3MucmFuZG9tVXNlcklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhlbWVJc01vZGVybjogXCI8dW5zZXQ+XCIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBhbmFseXRpY3NJc0VuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAoMCwgYW5hbHl0aWNzXzEudHJhY2tFdmVudCkobWVzc2FnZS5kYXRhLm5hbWUsIG1lc3NhZ2UuZGF0YS5wcm9wcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgVW5leHBlY3RlZCBtZXNzYWdlIHR5cGUgcmVjZWl2ZWQ6ICcke21lc3NhZ2UudHlwZX0nLmApO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW5pdGlhbGl6ZUFuYWx5dGljcyA9IGV4cG9ydHMuZ2V0QW5hbHl0aWNzVXNlcklkID0gZXhwb3J0cy50cmFja0V2ZW50ID0gdm9pZCAwO1xuLyoqXG4gKiBUcmFja3MgYW4gZXZlbnQgdXNpbmcgR29vZ2xlIEFuYWx5dGljcyBpZiB0aGUgdXNlciBkaWQgbm90IG9wdCBvdXRcbiAqIE5PVEU6IFRoZSBGaXJlZm94IHZlcnNpb24gb2YgdGhlIGV4dGVuc2lvbiBoYXMgbm8gc3VwcG9ydCBmb3IgR29vZ2xlIEFuYWx5dGljc1xuICovXG52YXIgdHJhY2tFdmVudCA9IGZ1bmN0aW9uIChldmVudE5hbWUsIF9hID0ge30pIHtcbiAgICB2YXIgeyBsZWdhY3lUYXJnZXQsIGxlZ2FjeUFjdGlvbiwgbGVnYWN5TGFiZWwgPSB1bmRlZmluZWQsIGxlZ2FjeVZhbHVlID0gdW5kZWZpbmVkLCBpZCwgY29udGV4dCwgdmFsdWUgfSA9IF9hLCBleHRyYVByb3BzID0gX19yZXN0KF9hLCBbXCJsZWdhY3lUYXJnZXRcIiwgXCJsZWdhY3lBY3Rpb25cIiwgXCJsZWdhY3lMYWJlbFwiLCBcImxlZ2FjeVZhbHVlXCIsIFwiaWRcIiwgXCJjb250ZXh0XCIsIFwidmFsdWVcIl0pO1xuICAgIGNvbnNvbGUuZGVidWcoXCJbUytdIFRyYWNraW5nIGRpc2FibGVkIGJ5IHVzZXJcIiwgYXJndW1lbnRzKTtcbn07XG5leHBvcnRzLnRyYWNrRXZlbnQgPSB0cmFja0V2ZW50O1xuZnVuY3Rpb24gZ2V0QW5hbHl0aWNzVXNlcklkKCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGdldFJhbmRvbVRva2VuKCkge1xuICAgICAgICAgICAgLy8gRS5nLiA4ICogMzIgPSAyNTYgYml0cyB0b2tlblxuICAgICAgICAgICAgdmFyIHJhbmRvbVBvb2wgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgICAgICAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHJhbmRvbVBvb2wpO1xuICAgICAgICAgICAgdmFyIGhleCA9IFwiXCI7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhbmRvbVBvb2wubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBoZXggKz0gcmFuZG9tUG9vbFtpXS50b1N0cmluZygxNik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBFLmcuIGRiMTg0NThlMjc4MmIyYjc3ZTM2NzY5YzU2OWUyNjNhNTM4ODVhOTk0NGRkMGE4NjFlNTA2NGVhYzE2ZjFhXG4gICAgICAgICAgICByZXR1cm4gaGV4O1xuICAgICAgICB9XG4gICAgICAgIGxldCBsID0geWllbGQgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KHsgcmFuZG9tVXNlcklkOiBudWxsIH0pO1xuICAgICAgICBpZiAoIWwucmFuZG9tVXNlcklkKSB7XG4gICAgICAgICAgICBsZXQgcmFuZG9tVXNlcklkID0gZ2V0UmFuZG9tVG9rZW4oKTtcbiAgICAgICAgICAgIHlpZWxkIGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7IHJhbmRvbVVzZXJJZCB9KTtcbiAgICAgICAgICAgIHJldHVybiByYW5kb21Vc2VySWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGwucmFuZG9tVXNlcklkO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRBbmFseXRpY3NVc2VySWQgPSBnZXRBbmFseXRpY3NVc2VySWQ7XG5mdW5jdGlvbiBpbml0aWFsaXplQW5hbHl0aWNzKF9hKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCBhcmd1bWVudHMsIHZvaWQgMCwgZnVuY3Rpb24qICh7IGRvY3VtZW50Q29udGV4dCwgaXNBbmFseXRpY3NFbmFibGVkLCBzZWxlY3RlZFRoZW1lLCBzZWxlY3RlZEJldGEsIGN1cnJlbnRWZXJzaW9uLCBuZXdWZXJzaW9uLCByYW5kb21Vc2VySWQsIHRoZW1lSXNNb2Rlcm4sIH0pIHtcbiAgICAgICAgaWYgKGlzQW5hbHl0aWNzRW5hYmxlZCkge1xuICAgICAgICAgICAgZW5hYmxlQW5hbHl0aWNzKCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZW5hYmxlQW5hbHl0aWNzKCkge1xuICAgICAgICAgICAgLy8gR29vZ2xlIEFuYWx5dGljcyB2NFxuICAgICAgICAgICAgZ2xvYmFsVGhpcy5kYXRhTGF5ZXIgPSBnbG9iYWxUaGlzLmRhdGFMYXllciB8fCBbXTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGd0YWcoLi4uYXJncykge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAoX2EgPSBnbG9iYWxUaGlzLmRhdGFMYXllcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnB1c2goYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGd0YWcoXCJqc1wiLCBuZXcgRGF0ZSgpKTtcbiAgICAgICAgICAgIGNvbnN0IGd0YWdDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgcGFnZV9sb2NhdGlvbjogbG9jYXRpb24uaHJlZi5yZXBsYWNlKC9cXC9cXGR7Myx9XFxiL2csIFwiLypcIiksXG4gICAgICAgICAgICAgICAgcGFnZV9wYXRoOiBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9cXGR7Myx9XFxiL2csIFwiLypcIiksXG4gICAgICAgICAgICAgICAgcGFnZV90aXRsZTogbnVsbCxcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByYW5kb21Vc2VySWQsXG4gICAgICAgICAgICAgICAgdXNlcl9wcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoZW1lOiBzZWxlY3RlZFRoZW1lLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVCZXRhOiBzZWxlY3RlZEJldGEsXG4gICAgICAgICAgICAgICAgICAgIGxhc3RFbmFibGVkVmVyc2lvbjogbmV3VmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uVmVyc2lvbjogY3VycmVudFZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgIGRvbWFpbjogbG9jYXRpb24uaG9zdCxcbiAgICAgICAgICAgICAgICAgICAgbW9kZXJuVGhlbWU6IHRoZW1lSXNNb2Rlcm4sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBndGFnKFwiY29uZmlnXCIsIFwiRy1ZTTZCMDBSRFlDXCIsIGd0YWdDb25maWcpO1xuICAgICAgICAgICAgZXhwb3J0cy50cmFja0V2ZW50ID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgX2EgPSB7fSkge1xuICAgICAgICAgICAgICAgIHZhciB7IGxlZ2FjeVRhcmdldCwgbGVnYWN5QWN0aW9uLCBsZWdhY3lMYWJlbCA9IHVuZGVmaW5lZCwgbGVnYWN5VmFsdWUgPSB1bmRlZmluZWQsIGlkLCBjb250ZXh0LCB2YWx1ZSB9ID0gX2EsIGV4dHJhUHJvcHMgPSBfX3Jlc3QoX2EsIFtcImxlZ2FjeVRhcmdldFwiLCBcImxlZ2FjeUFjdGlvblwiLCBcImxlZ2FjeUxhYmVsXCIsIFwibGVnYWN5VmFsdWVcIiwgXCJpZFwiLCBcImNvbnRleHRcIiwgXCJ2YWx1ZVwiXSk7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50RGF0YSA9IE9iamVjdC5hc3NpZ24oeyBpZCxcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgfSwgZXh0cmFQcm9wcyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhgW1MrXSBUcmFja2VkIGV2ZW50OmAsIGV2ZW50TmFtZSwgZXZlbnREYXRhKTtcbiAgICAgICAgICAgICAgICBndGFnKFwiZXZlbnRcIiwgZXZlbnROYW1lLCBldmVudERhdGEpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHRyYWNrQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWV2ZW50LmlzVHJ1c3RlZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSAoZXZlbnQuY3VycmVudFRhcmdldCB8fCBldmVudC50YXJnZXQpO1xuICAgICAgICAgICAgICAgICgwLCBleHBvcnRzLnRyYWNrRXZlbnQpKFwidHJhY2tpbmdfbGlua19jbGlja1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIGxlZ2FjeVRhcmdldDogdGFyZ2V0LmRhdGFzZXQuc3BsdXNUcmFja2luZ0lkIHx8IHRhcmdldC5pZCB8fCBcIlVubGFiZWxlZCBCdXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAgbGVnYWN5QWN0aW9uOiBcImNsaWNrXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlZ2FjeUxhYmVsOiB0YXJnZXQuZGF0YXNldC5zcGx1c1RyYWNraW5nQ29udGV4dCB8fCBcIlRyYWNraW5nIExpbmtcIixcbiAgICAgICAgICAgICAgICAgICAgbGVnYWN5VmFsdWU6IHRhcmdldC5kYXRhc2V0LnNwbHVzVHJhY2tpbmdWYWx1ZSB8fCBldmVudC5idXR0b24sXG4gICAgICAgICAgICAgICAgICAgIGlkOiB0YXJnZXQuZGF0YXNldC5zcGx1c1RyYWNraW5nSWQgfHwgdGFyZ2V0LmlkIHx8IFwiVW5sYWJlbGVkIEJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiB0YXJnZXQuZGF0YXNldC5zcGx1c1RyYWNraW5nQ29udGV4dCB8fCBcIlRyYWNraW5nIExpbmtcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRhcmdldC5kYXRhc2V0LnNwbHVzVHJhY2tpbmdWYWx1ZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkb2N1bWVudENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBsZXQgdHJhY2tlZEVsZW1lbnRzID0gbmV3IFNldCgpO1xuICAgICAgICAgICAgICAgIGxldCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMsIG11dGF0aW9uT2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgZWxlbSBvZiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNwbHVzLXRyYWNrLWNsaWNrczpub3QoLnNwbHVzLXRyYWNrZWQpXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRyYWNrZWRFbGVtZW50cy5oYXMoZWxlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0cmFja0NsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJhdXhjbGlja1wiLCB0cmFja0NsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5hZGQoXCJzcGx1cy10cmFja2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrZWRFbGVtZW50cy5hZGQoZWxlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YXIgcmVhZHlTdGF0ZUNoZWNrSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocmVhZHlTdGF0ZUNoZWNrSW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgMTApO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuYm9keSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidHJlZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGVsZW0gb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zcGx1cy10cmFjay1jbGlja3NcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdHJhY2tlZEVsZW1lbnRzLmhhcyhlbGVtKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRyYWNrQ2xpY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcihcImF1eGNsaWNrXCIsIHRyYWNrQ2xpY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChcInNwbHVzLXRyYWNrZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tlZEVsZW1lbnRzLmFkZChlbGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5pbml0aWFsaXplQW5hbHl0aWNzID0gaW5pdGlhbGl6ZUFuYWx5dGljcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy53YWl0Rm9yRWxlbWVudCA9IGV4cG9ydHMuY3JlYXRlU3ZnTG9nbyA9IGV4cG9ydHMuc2V0Q1NTVmFyaWFibGUgPSBleHBvcnRzLmdldFBhcmVudHMgPSBleHBvcnRzLmlzVmlzaWJsZSA9IGV4cG9ydHMuZ2V0QnJvd3NlciA9IGV4cG9ydHMuY3JlYXRlQnV0dG9uV2l0aExvZ28gPSBleHBvcnRzLmNyZWF0ZUJ1dHRvbiA9IGV4cG9ydHMuY3JlYXRlRWxlbWVudCA9IHZvaWQgMDtcbi8qKlxuICogQ3JlYXRlcyBhIERPTSBlbGVtZW50XG4gKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IEEgRE9NIGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgLSBUaGUgSFRNTCB0YWcgbmFtZSBvZiB0aGUgdHlwZSBvZiBET00gZWxlbWVudCB0byBjcmVhdGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IGNsYXNzTGlzdCAtIENTUyBjbGFzc2VzIHRvIGFwcGx5IHRvIHRoZSBET00gZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZyxhbnk+fSBwcm9wZXJ0aWVzIC0gUHJvcGVydGllcyB0byBhcHBseSB0byB0aGUgRE9NIGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnRbXX0gY2hpbGRyZW4gLSBFbGVtZW50cyB0byBhcHBlbmQgYXMgY2hpbGRyZW4gdG8gdGhlIGNyZWF0ZWQgZWxlbWVudFxuICovXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50KHRhZywgY2xhc3NMaXN0LCBwcm9wZXJ0aWVzLCBjaGlsZHJlbikge1xuICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICAgIGlmIChjbGFzc0xpc3QpIHtcbiAgICAgICAgZm9yIChsZXQgYyBvZiBjbGFzc0xpc3QpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvcGVydGllcykge1xuICAgICAgICBmb3IgKGxldCBwcm9wZXJ0eSBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBpZiAocHJvcGVydGllc1twcm9wZXJ0eV0gaW5zdGFuY2VvZiBPYmplY3QgJiZcbiAgICAgICAgICAgICAgICAhKHByb3BlcnRpZXNbcHJvcGVydHldIGluc3RhbmNlb2YgRnVuY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc3VicHJvcGVydHkgaW4gcHJvcGVydGllc1twcm9wZXJ0eV0pIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudFtwcm9wZXJ0eV1bc3VicHJvcGVydHldID0gcHJvcGVydGllc1twcm9wZXJ0eV1bc3VicHJvcGVydHldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHByb3BlcnR5ICE9PSB1bmRlZmluZWQgJiYgcHJvcGVydGllc1twcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnRbcHJvcGVydHldID0gcHJvcGVydGllc1twcm9wZXJ0eV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgIGZvciAobGV0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudDtcbn1cbmV4cG9ydHMuY3JlYXRlRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQ7XG4vKipcbiAqIENyZWF0ZXMgYSBTY2hvb2xvZ3kgUGx1cyB0aGVtZWQgYnV0dG9uIGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgSUQgZm9yIHRoZSBidXR0b24gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIHRleHQgdG8gc2hvdyBvbiB0aGUgYnV0dG9uXG4gKiBAcGFyYW0geyhlOiBFdmVudCk9PnZvaWR9IGNhbGxiYWNrIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvbihpZCwgdGV4dCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgW1wic3VibWl0LXNwYW4td3JhcHBlclwiLCBcInNwbHVzLW1vZGFsLWJ1dHRvblwiXSwgeyBvbmNsaWNrOiBjYWxsYmFjayB9LCBbXG4gICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCBbXCJmb3JtLXN1Ym1pdFwiLCBcInNwbHVzLXRyYWNrLWNsaWNrc1wiXSwge1xuICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICAgIHZhbHVlOiB0ZXh0LFxuICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgZGF0YXNldDogeyBzcGx1c1RyYWNraW5nQ29udGV4dDogXCJTKyBCdXR0b25cIiB9LFxuICAgICAgICB9KSxcbiAgICBdKTtcbn1cbmV4cG9ydHMuY3JlYXRlQnV0dG9uID0gY3JlYXRlQnV0dG9uO1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uV2l0aExvZ28oaWQsIHRleHQsIGNhbGxiYWNrKSB7XG4gICAgbGV0IGJ1dHRvbiA9IGNyZWF0ZUJ1dHRvbihpZCwgdGV4dCwgY2FsbGJhY2spO1xuICAgIGxldCBpbWcgPSBjcmVhdGVTdmdMb2dvKCk7XG4gICAgT2JqZWN0LmFzc2lnbihpbWcuc3R5bGUsIHtcbiAgICAgICAgdmVydGljYWxBbGlnbjogXCJtaWRkbGVcIixcbiAgICAgICAgcGFkZGluZ0xlZnQ6IFwiNHB4XCIsXG4gICAgICAgIHdpZHRoOiBcIjE4cHhcIixcbiAgICB9KTtcbiAgICBidXR0b24ucHJlcGVuZChpbWcpO1xuICAgIGJ1dHRvbi5zdHlsZS5zZXRQcm9wZXJ0eShcImhlaWdodFwiLCBcIjM2cHhcIiwgXCJpbXBvcnRhbnRcIik7XG4gICAgbGV0IGJ1dHRvbklucHV0ID0gYnV0dG9uLnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKTtcbiAgICBidXR0b25JbnB1dC5zdHlsZS5wYWRkaW5nTGVmdCA9IFwiNHB4XCI7XG4gICAgYnV0dG9uSW5wdXQuc3R5bGUuc2V0UHJvcGVydHkoXCJoZWlnaHRcIiwgXCIzNnB4XCIsIFwiaW1wb3J0YW50XCIpO1xuICAgIGJ1dHRvbi5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICByZXR1cm4gYnV0dG9uO1xufVxuZXhwb3J0cy5jcmVhdGVCdXR0b25XaXRoTG9nbyA9IGNyZWF0ZUJ1dHRvbldpdGhMb2dvO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBjdXJyZW50IGJyb3dzZXJcbiAqIEByZXR1cm5zIHtcIkNocm9tZVwifFwiRmlyZWZveFwifFwiT3RoZXJcIn0gTmFtZSBvZiB0aGUgY3VycmVudCBicm93c2VyXG4gKi9cbmZ1bmN0aW9uIGdldEJyb3dzZXIoKSB7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzLmNocm9tZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMuYnJvd3NlciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgcmV0dXJuIFwiRmlyZWZveFwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gTGlrZWx5IGNhcHR1cmVzIGFsbCBDaHJvbWl1bS1iYXNlZCBicm93c2Vyc1xuICAgICAgICAgICAgcmV0dXJuIFwiQ2hyb21lXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBcIk90aGVyXCI7XG4gICAgfVxufVxuZXhwb3J0cy5nZXRCcm93c2VyID0gZ2V0QnJvd3Nlcjtcbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZWxlbWVudCBpcyB2aXNpYmxlIHRvIHRoZSB1c2VyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtIFRoZSBlbGVtZW50IHRvIGNoZWNrIGZvciB2aXNpYmlsaXR5XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIGVsZW1lbnQgaXMgdmlzaWJsZVxuICovXG5mdW5jdGlvbiBpc1Zpc2libGUoZWxlbSkge1xuICAgIHJldHVybiAhIShlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpO1xufVxuZXhwb3J0cy5pc1Zpc2libGUgPSBpc1Zpc2libGU7XG4vKipcbiAqIFJldHVybnMgYWxsIHBhcmVudCBlbGVtZW50cyBtYXRjaGluZyB0aGUgcHJvdmlkZWQgc2VsZWN0b3IuXG4gKiBFc3NlbnRpYWxseSB3b3JrcyBsaWtlIGEgcmV2ZXJzZSBgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbGAuXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtIFRoZSB0YXJnZXQgZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIEEgQ1NTIHNlbGVjdG9yXG4gKiBAcmV0dXJucyB7SFRNTEVsZW1lbnRbXX0gQW4gYXJyYXkgb2YgbWF0Y2hpbmcgcGFyZW50IGVsZW1lbnRzXG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudHMoZWxlbSwgc2VsZWN0b3IpIHtcbiAgICB2YXIgcGFyZW50cyA9IFtdO1xuICAgIHZhciBmaXJzdENoYXI7XG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGZpcnN0Q2hhciA9IHNlbGVjdG9yLmNoYXJBdCgwKTtcbiAgICB9XG4gICAgZm9yICg7IGVsZW0gJiYgZWxlbSAhPT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OyBlbGVtID0gZWxlbS5wYXJlbnROb2RlKSB7XG4gICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgICAgaWYgKGZpcnN0Q2hhciA9PT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoc2VsZWN0b3Iuc3Vic3RyKDEpKSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRzLnB1c2goZWxlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpcnN0Q2hhciA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbS5pZCA9PT0gc2VsZWN0b3Iuc3Vic3RyKDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudHMucHVzaChlbGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmlyc3RDaGFyID09PSBcIltcIikge1xuICAgICAgICAgICAgICAgIGlmIChlbGVtLmhhc0F0dHJpYnV0ZShzZWxlY3Rvci5zdWJzdHIoMSwgc2VsZWN0b3IubGVuZ3RoIC0gMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudHMucHVzaChlbGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZWxlbS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50cy5wdXNoKGVsZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGFyZW50cy5wdXNoKGVsZW0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJlbnRzO1xufVxuZXhwb3J0cy5nZXRQYXJlbnRzID0gZ2V0UGFyZW50cztcbi8qKlxuICogU2V0cyB0aGUgdmFsdWUgb2YgYSBDU1MgdmFyaWFibGUgb24gdGhlIGRvY3VtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBWYXJpYWJsZSBuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsIE5ldyB2YXJpYWJsZSB2YWx1ZVxuICovXG5mdW5jdGlvbiBzZXRDU1NWYXJpYWJsZShuYW1lLCB2YWwpIHtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoYC0tJHtuYW1lfWAsIHZhbCAhPT0gbnVsbCAmJiB2YWwgIT09IHZvaWQgMCA/IHZhbCA6IG51bGwpO1xufVxuZXhwb3J0cy5zZXRDU1NWYXJpYWJsZSA9IHNldENTU1ZhcmlhYmxlO1xuZnVuY3Rpb24gY3JlYXRlU3ZnTG9nbyguLi5jbGFzc2VzKSB7XG4gICAgbGV0IGNpcmNsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwiY2lyY2xlXCIpO1xuICAgIGNpcmNsZS5zZXRBdHRyaWJ1dGUoXCJjeFwiLCBcIjI1MFwiKTtcbiAgICBjaXJjbGUuc2V0QXR0cmlidXRlKFwiY3lcIiwgXCIyNTBcIik7XG4gICAgY2lyY2xlLnNldEF0dHJpYnV0ZShcInJcIiwgXCIyMzBcIik7XG4gICAgY2lyY2xlLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwiZmlsbDogbm9uZTsgc3Ryb2tlLXdpZHRoOiAzNXB4OyBzdHJva2U6IGN1cnJlbnRDb2xvcjtcIik7XG4gICAgbGV0IGxpbmUxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJsaW5lXCIpO1xuICAgIGxpbmUxLnNldEF0dHJpYnV0ZShcIngxXCIsIFwiMjUwXCIpO1xuICAgIGxpbmUxLnNldEF0dHJpYnV0ZShcInkxXCIsIFwiMTI1XCIpO1xuICAgIGxpbmUxLnNldEF0dHJpYnV0ZShcIngyXCIsIFwiMjUwXCIpO1xuICAgIGxpbmUxLnNldEF0dHJpYnV0ZShcInkyXCIsIFwiMzc1XCIpO1xuICAgIGxpbmUxLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwic3Ryb2tlLWxpbmVjYXA6IHJvdW5kOyBzdHJva2Utd2lkdGg6IDM1cHg7IHN0cm9rZTogY3VycmVudENvbG9yO1wiKTtcbiAgICBsZXQgbGluZTIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImxpbmVcIik7XG4gICAgbGluZTIuc2V0QXR0cmlidXRlKFwieDFcIiwgXCIxMjVcIik7XG4gICAgbGluZTIuc2V0QXR0cmlidXRlKFwieTFcIiwgXCIyNTBcIik7XG4gICAgbGluZTIuc2V0QXR0cmlidXRlKFwieDJcIiwgXCIzNzVcIik7XG4gICAgbGluZTIuc2V0QXR0cmlidXRlKFwieTJcIiwgXCIyNTBcIik7XG4gICAgbGluZTIuc2V0QXR0cmlidXRlKFwic3R5bGVcIiwgXCJzdHJva2UtbGluZWNhcDogcm91bmQ7IHN0cm9rZS13aWR0aDogMzVweDsgc3Ryb2tlOiBjdXJyZW50Q29sb3I7XCIpO1xuICAgIGxldCBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInN2Z1wiKTtcbiAgICBzdmcuc2V0QXR0cmlidXRlKFwidmlld0JveFwiLCBcIjAgMCA1MDAgNTAwXCIpO1xuICAgIHN2Zy5hcHBlbmQoY2lyY2xlLCBsaW5lMSwgbGluZTIpO1xuICAgIGlmIChjbGFzc2VzKSB7XG4gICAgICAgIHN2Zy5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzZXMpO1xuICAgIH1cbiAgICByZXR1cm4gc3ZnO1xufVxuZXhwb3J0cy5jcmVhdGVTdmdMb2dvID0gY3JlYXRlU3ZnTG9nbztcbmZ1bmN0aW9uIHdhaXRGb3JFbGVtZW50KHNlbGVjdG9yLCBjaGVja19pbnRlcnZhbCA9IDUwKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBsZXQgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICBsZXQgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgICAgICAgaWYgKGVsZW0pIHtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGVsZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBjaGVja19pbnRlcnZhbCk7XG4gICAgfSk7XG59XG5leHBvcnRzLndhaXRGb3JFbGVtZW50ID0gd2FpdEZvckVsZW1lbnQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTG9nZ2VyID0gdm9pZCAwO1xuZXhwb3J0cy5Mb2dnZXIgPSB7XG4gICAgbG9nOiAoKCkgPT4gY29uc29sZS5sb2cuYmluZChnbG9iYWxUaGlzLmNvbnNvbGUsIGAlYytgLCBjcmVhdGVMb2dQcmVmaXgoXCIjODFENEZBXCIpKSkoKSxcbiAgICBlcnJvcjogKCgpID0+IGNvbnNvbGUuZXJyb3IuYmluZChnbG9iYWxUaGlzLmNvbnNvbGUsIGAlYytgLCBjcmVhdGVMb2dQcmVmaXgoXCIjRkY2OTYxXCIpKSkoKSxcbiAgICBpbmZvOiAoKCkgPT4gY29uc29sZS5pbmZvLmJpbmQoZ2xvYmFsVGhpcy5jb25zb2xlLCBgJWMrYCwgY3JlYXRlTG9nUHJlZml4KFwid2hpdGVcIikpKSgpLFxuICAgIHdhcm46ICgoKSA9PiBjb25zb2xlLndhcm4uYmluZChnbG9iYWxUaGlzLmNvbnNvbGUsIGAlYytgLCBjcmVhdGVMb2dQcmVmaXgoXCIjRkRGRDk2XCIpKSkoKSxcbiAgICB0cmFjZTogKCgpID0+IGNvbnNvbGUudHJhY2UuYmluZChnbG9iYWxUaGlzLmNvbnNvbGUsIGAlYytgLCBjcmVhdGVMb2dQcmVmaXgoXCJvcmFuZ2VcIikpKSgpLFxuICAgIGRlYnVnOiAoKCkgPT4gY29uc29sZS5kZWJ1Zy5iaW5kKGdsb2JhbFRoaXMuY29uc29sZSwgYCVjK2AsIGNyZWF0ZUxvZ1ByZWZpeChcImxpZ2h0Z3JlZW5cIikpKSgpLFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUxvZ1ByZWZpeChjb2xvcikge1xuICAgIHJldHVybiBgY29sb3I6JHtjb2xvcn07Ym9yZGVyOjFweCBzb2xpZCAjMkEyQTJBO2JvcmRlci1yYWRpdXM6MTAwJTtmb250LXNpemU6MTRweDtmb250LXdlaWdodDpib2xkO3BhZGRpbmc6IDAgNHB4IDAgNHB4O2JhY2tncm91bmQtY29sb3I6IzJBMkEyQWA7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZW5kTm90aWZpY2F0aW9uID0gZXhwb3J0cy51cGRhdGVMYXN0VGltZSA9IGV4cG9ydHMubG9hZEFzc2lnbm1lbnROb3RpZmljYXRpb25zID0gdm9pZCAwO1xuY29uc3QgZG9tcHVyaWZ5XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRvbXB1cmlmeVwiKSk7XG5jb25zdCBhbmFseXRpY3NfMSA9IHJlcXVpcmUoXCIuL2FuYWx5dGljc1wiKTtcbmNvbnN0IGRvbV8xID0gcmVxdWlyZShcIi4vZG9tXCIpO1xuY29uc3QgbG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9sb2dnZXJcIik7XG5mdW5jdGlvbiBsb2FkQXNzaWdubWVudE5vdGlmaWNhdGlvbnMoYXNzaWdubWVudE5vdGlmaWNhdGlvblVybCwgbGFzdFRpbWUpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSB5aWVsZCBmZXRjaChhc3NpZ25tZW50Tm90aWZpY2F0aW9uVXJsLCB7XG4gICAgICAgICAgICBjcmVkZW50aWFsczogXCJzYW1lLW9yaWdpblwiLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIGxvYWRpbmcgbm90aWZpY2F0aW9uczogXCIgKyByZXNwb25zZSk7XG4gICAgICAgIGxldCByZXNwb25zZUpzb24gPSB5aWVsZCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIGxvZ2dlcl8xLkxvZ2dlci5sb2coXCJMYXN0IG5ldyBncmFkZTogXCIgKyBuZXcgRGF0ZShsYXN0VGltZSkudG9TdHJpbmcoKSk7XG4gICAgICAgIGxldCB0aW1lID0gbGFzdFRpbWU7XG4gICAgICAgIGxldCB0aW1lTW9kaWZpZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgICB0aW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIHRpbWVNb2RpZmllZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJkaXZcIikgfHwgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKTtcbiAgICAgICAgZGl2LmlubmVySFRNTCA9IGRvbXB1cmlmeV8xLmRlZmF1bHQuc2FuaXRpemUocmVzcG9uc2VKc29uLm91dHB1dCk7XG4gICAgICAgIGxldCBub3RpZmljYXRpb25zID0gZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZWRnZS1zZW50ZW5jZVwiKTtcbiAgICAgICAgbGV0IG1vbnRocyA9IFtcbiAgICAgICAgICAgIFwiSmFuXCIsXG4gICAgICAgICAgICBcIkZlYlwiLFxuICAgICAgICAgICAgXCJNYXJcIixcbiAgICAgICAgICAgIFwiQXByXCIsXG4gICAgICAgICAgICBcIk1heVwiLFxuICAgICAgICAgICAgXCJKdW5cIixcbiAgICAgICAgICAgIFwiSnVsXCIsXG4gICAgICAgICAgICBcIkF1Z1wiLFxuICAgICAgICAgICAgXCJTZXBcIixcbiAgICAgICAgICAgIFwiT2N0XCIsXG4gICAgICAgICAgICBcIk5vdlwiLFxuICAgICAgICAgICAgXCJEZWNcIixcbiAgICAgICAgXTtcbiAgICAgICAgbGV0IHRvdGFsQXNzaWdubWVudHMgPSAwO1xuICAgICAgICBmb3IgKGxldCBub3RpZmljYXRpb24gb2YgQXJyYXkuZnJvbShub3RpZmljYXRpb25zKS5yZXZlcnNlKCkpIHtcbiAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24udGV4dENvbnRlbnQuaW5jbHVkZXMoXCJuZXcgZ3JhZGVcIikpIHtcbiAgICAgICAgICAgICAgICBsZXQgYXNzaWdubWVudHMgPSBub3RpZmljYXRpb24uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJhXCIpO1xuICAgICAgICAgICAgICAgIGxldCBleHRyYVRleHRFbGVtZW50ID0gbm90aWZpY2F0aW9uLnF1ZXJ5U2VsZWN0b3IoXCIub3RoZXItaXRlbXMtbGlua1wiKTtcbiAgICAgICAgICAgICAgICBsZXQgdGltZVRleHQgPSBub3RpZmljYXRpb24ucXVlcnlTZWxlY3RvcihcIi5lZGdlLXRpbWVcIikudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgbGV0IHNwbGl0RGF0ZSA9IHRpbWVUZXh0LnNwbGl0KFwiIGF0IFwiKTtcbiAgICAgICAgICAgICAgICBsZXQgbW9udGhEYXkgPSBzcGxpdERhdGVbMF07XG4gICAgICAgICAgICAgICAgbGV0IGhvdXJNaW51dGUgPSBzcGxpdERhdGVbMV07XG4gICAgICAgICAgICAgICAgbGV0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgbGV0IG1vbnRoRGF5WWVhciA9IG1vbnRoRGF5ICsgYCAke25vdy5nZXRGdWxsWWVhcigpfWA7XG4gICAgICAgICAgICAgICAgbGV0IHRvZGF5ID0gYCR7bW9udGhzW25vdy5nZXRNb250aCgpXX0gJHtub3cuZ2V0RGF0ZSgpfSAke25vdy5nZXRGdWxsWWVhcigpfWA7XG4gICAgICAgICAgICAgICAgbGV0IG5vdGlmaWNhdGlvbkRhdGUgPSBEYXRlLnBhcnNlKG1vbnRoRGF5WWVhcik7XG4gICAgICAgICAgICAgICAgaWYgKG5vdGlmaWNhdGlvbkRhdGUgPiBEYXRlLnBhcnNlKHRvZGF5KSkge1xuICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25EYXRlID0gRGF0ZS5wYXJzZShtb250aERheSArIGAgJHtub3cuZ2V0RnVsbFllYXIoKSAtIDF9ICR7aG91ck1pbnV0ZX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbkRhdGUgPSBEYXRlLnBhcnNlKGAke21vbnRoRGF5WWVhcn0gJHtob3VyTWludXRlfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm90aWZpY2F0aW9uRGF0ZSA+IHRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGltZSA9IG5vdGlmaWNhdGlvbkRhdGU7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVNb2RpZmllZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQXNzaWdubWVudHMrKztcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyXzEuTG9nZ2VyLmxvZyhub3RpZmljYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgbiA9IG51bGw7XG4gICAgICAgIGlmICh0b3RhbEFzc2lnbm1lbnRzID4gMCkge1xuICAgICAgICAgICAgbiA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJhc2ljXCIsXG4gICAgICAgICAgICAgICAgaWNvblVybDogXCJpbWdzL2ljb25AMTI4LnBuZ1wiLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcIk5ldyBncmFkZSBwb3N0ZWRcIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBgJHt0b3RhbEFzc2lnbm1lbnRzfSBuZXcgYXNzaWdubWVudCR7dG90YWxBc3NpZ25tZW50cyA9PT0gMSA/IFwiIGhhcyBhIGdyYWRlXCIgOiBcInMgaGF2ZSBncmFkZXNcIn1gLFxuICAgICAgICAgICAgICAgIGV2ZW50VGltZTogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICBpc0NsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbjogbixcbiAgICAgICAgICAgIG5hbWU6IFwiYXNzaWdubWVudFwiLFxuICAgICAgICAgICAgY291bnQ6IHRvdGFsQXNzaWdubWVudHMsXG4gICAgICAgICAgICBsYXN0VGltZTogdGltZSxcbiAgICAgICAgICAgIHRpbWVNb2RpZmllZCxcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbmV4cG9ydHMubG9hZEFzc2lnbm1lbnROb3RpZmljYXRpb25zID0gbG9hZEFzc2lnbm1lbnROb3RpZmljYXRpb25zO1xuZnVuY3Rpb24gdXBkYXRlTGFzdFRpbWUodGltZU1vZGlmaWVkLCB0aW1lKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgaWYgKHRpbWVNb2RpZmllZCkge1xuICAgICAgICAgICAgeWllbGQgY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQoeyBsYXN0VGltZTogdGltZSB9KTtcbiAgICAgICAgICAgIGxvZ2dlcl8xLkxvZ2dlci5sb2coXCJTZXQgbmV3IHRpbWUgXCIgKyBuZXcgRGF0ZSh0aW1lKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsb2dnZXJfMS5Mb2dnZXIubG9nKFwiTm8gbmV3IG5vdGlmaWNhdGlvbnNcIik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMudXBkYXRlTGFzdFRpbWUgPSB1cGRhdGVMYXN0VGltZTtcbi8qKlxuICogU2VuZHMgYSBkZXNrdG9wIG5vdGlmaWNhdGlvbiBpZiBzZXR0aW5ncyBwZXJtaXRcbiAqIEBwYXJhbSB7Tm90aWZpY2F0aW9uT3B0aW9uc30gbm90aWZpY2F0aW9uIEEgY2hyb21lIG5vdGlmaWNhdGlvbiBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBub3RpZmljYXRpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBbY291bnQ9MV0gVGhlIG51bWJlciB0byBhZGQgdG8gdGhlIGJyb3dzZXIgYWN0aW9uIGJhZGdlXG4gKi9cbmZ1bmN0aW9uIHNlbmROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBuYW1lLCBjb3VudCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlmICghbm90aWZpY2F0aW9uKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBsZXQgc3RvcmFnZUNvbnRlbnQgPSB5aWVsZCBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldChudWxsKTtcbiAgICAgICAgY291bnQgPSBjb3VudCB8fCBjb3VudCA9PSAwID8gY291bnQgOiAxO1xuICAgICAgICBpZiAoKDAsIGRvbV8xLmdldEJyb3dzZXIpKCkgPT0gXCJGaXJlZm94XCIpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBub3RpZmljYXRpb24ucmVxdWlyZUludGVyYWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlcl8xLkxvZ2dlci5sb2coXCJOZXcgbm90aWZpY2F0aW9uIVwiLCBub3RpZmljYXRpb24pO1xuICAgICAgICBpZiAoY291bnQgPiAwICYmXG4gICAgICAgICAgICAoIXN0b3JhZ2VDb250ZW50Lm5vdGlmaWNhdGlvbnMgfHxcbiAgICAgICAgICAgICAgICBzdG9yYWdlQ29udGVudC5ub3RpZmljYXRpb25zID09IFwiZW5hYmxlZFwiIHx8XG4gICAgICAgICAgICAgICAgc3RvcmFnZUNvbnRlbnQubm90aWZpY2F0aW9ucyA9PSBcImJhZGdlXCIpKSB7XG4gICAgICAgICAgICBsZXQgeCA9IHlpZWxkIGNocm9tZS5hY3Rpb24uZ2V0QmFkZ2VUZXh0KHt9KTtcbiAgICAgICAgICAgIGxldCBudW0gPSBOdW1iZXIucGFyc2VJbnQoeCk7XG4gICAgICAgICAgICBjaHJvbWUuYWN0aW9uLnNldEJhZGdlVGV4dCh7IHRleHQ6IChudW0gPyBudW0gKyBjb3VudCA6IGNvdW50KS50b1N0cmluZygpIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyXzEuTG9nZ2VyLmxvZyhcIk51bWJlciBiYWRnZSBpcyBkaXNhYmxlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXN0b3JhZ2VDb250ZW50Lm5vdGlmaWNhdGlvbnMgfHxcbiAgICAgICAgICAgIHN0b3JhZ2VDb250ZW50Lm5vdGlmaWNhdGlvbnMgPT0gXCJlbmFibGVkXCIgfHxcbiAgICAgICAgICAgIHN0b3JhZ2VDb250ZW50Lm5vdGlmaWNhdGlvbnMgPT0gXCJwb3B1cFwiKSB7XG4gICAgICAgICAgICBjaHJvbWUubm90aWZpY2F0aW9ucy5jcmVhdGUobmFtZSwgbm90aWZpY2F0aW9uKTtcbiAgICAgICAgICAgICgwLCBhbmFseXRpY3NfMS50cmFja0V2ZW50KShcInBlcmZvcm1fYWN0aW9uXCIsIHtcbiAgICAgICAgICAgICAgICBpZDogXCJzaG93blwiLFxuICAgICAgICAgICAgICAgIGNvbnRleHQ6IFwiTm90aWZpY2F0aW9uc1wiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBuYW1lLFxuICAgICAgICAgICAgICAgIGxlZ2FjeVRhcmdldDogbmFtZSxcbiAgICAgICAgICAgICAgICBsZWdhY3lBY3Rpb246IFwic2hvd25cIixcbiAgICAgICAgICAgICAgICBsZWdhY3lMYWJlbDogXCJOb3RpZmljYXRpb25zXCIsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlcl8xLkxvZ2dlci5sb2coXCJQb3B1cCBub3RpZmljYXRpb25zIGFyZSBkaXNhYmxlZFwiKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5zZW5kTm90aWZpY2F0aW9uID0gc2VuZE5vdGlmaWNhdGlvbjtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oODIyNik7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImhhc093blByb3BlcnR5IiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJpc0Zyb3plbiIsImZyZWV6ZSIsInNlYWwiLCJjcmVhdGUiLCJfcmVmIiwiUmVmbGVjdCIsImFwcGx5IiwiY29uc3RydWN0IiwiZnVuIiwidGhpc1ZhbHVlIiwiYXJncyIsIngiLCJGdW5jIiwiRnVuY3Rpb24iLCJwcm90b3R5cGUiLCJiaW5kIiwiY29uY2F0IiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiaSIsImFycjIiLCJsZW5ndGgiLCJmcm9tIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiZnVuYyIsImFycmF5Rm9yRWFjaCIsInVuYXBwbHkiLCJmb3JFYWNoIiwiYXJyYXlQb3AiLCJwb3AiLCJhcnJheVB1c2giLCJwdXNoIiwic3RyaW5nVG9Mb3dlckNhc2UiLCJTdHJpbmciLCJ0b0xvd2VyQ2FzZSIsInN0cmluZ01hdGNoIiwibWF0Y2giLCJzdHJpbmdSZXBsYWNlIiwicmVwbGFjZSIsInN0cmluZ0luZGV4T2YiLCJpbmRleE9mIiwic3RyaW5nVHJpbSIsInRyaW0iLCJyZWdFeHBUZXN0IiwiUmVnRXhwIiwidGVzdCIsInR5cGVFcnJvckNyZWF0ZSIsIlR5cGVFcnJvciIsIl9sZW4yIiwiYXJndW1lbnRzIiwiX2tleTIiLCJ0aGlzQXJnIiwiX2xlbiIsIl9rZXkiLCJhZGRUb1NldCIsInNldCIsImFycmF5IiwibCIsImVsZW1lbnQiLCJsY0VsZW1lbnQiLCJjbG9uZSIsIm9iamVjdCIsIm5ld09iamVjdCIsInByb3BlcnR5IiwiaHRtbCIsInN2ZyIsInN2Z0ZpbHRlcnMiLCJtYXRoTWwiLCJ0ZXh0IiwiaHRtbCQxIiwic3ZnJDEiLCJtYXRoTWwkMSIsInhtbCIsIk1VU1RBQ0hFX0VYUFIiLCJFUkJfRVhQUiIsIkRBVEFfQVRUUiIsIkFSSUFfQVRUUiIsIklTX0FMTE9XRURfVVJJIiwiSVNfU0NSSVBUX09SX0RBVEEiLCJBVFRSX1dISVRFU1BBQ0UiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJvYmoiLCJjb25zdHJ1Y3RvciIsIl90b0NvbnN1bWFibGVBcnJheSQxIiwiZ2V0R2xvYmFsIiwid2luZG93IiwiY3JlYXRlRE9NUHVyaWZ5IiwidW5kZWZpbmVkIiwiRE9NUHVyaWZ5Iiwicm9vdCIsInZlcnNpb24iLCJyZW1vdmVkIiwiZG9jdW1lbnQiLCJub2RlVHlwZSIsImlzU3VwcG9ydGVkIiwib3JpZ2luYWxEb2N1bWVudCIsIkRvY3VtZW50RnJhZ21lbnQiLCJIVE1MVGVtcGxhdGVFbGVtZW50IiwiTm9kZSIsIk5vZGVGaWx0ZXIiLCJfd2luZG93JE5hbWVkTm9kZU1hcCIsIk5hbWVkTm9kZU1hcCIsIk1vek5hbWVkQXR0ck1hcCIsIlRleHQiLCJDb21tZW50IiwiRE9NUGFyc2VyIiwidHJ1c3RlZFR5cGVzIiwidGVtcGxhdGUiLCJjcmVhdGVFbGVtZW50IiwiY29udGVudCIsIm93bmVyRG9jdW1lbnQiLCJ0cnVzdGVkVHlwZXNQb2xpY3kiLCJjcmVhdGVQb2xpY3kiLCJzdWZmaXgiLCJBVFRSX05BTUUiLCJjdXJyZW50U2NyaXB0IiwiaGFzQXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwicG9saWN5TmFtZSIsImNyZWF0ZUhUTUwiLCJodG1sJCQxIiwiXyIsImNvbnNvbGUiLCJ3YXJuIiwiX2NyZWF0ZVRydXN0ZWRUeXBlc1BvbGljeSIsImVtcHR5SFRNTCIsIlJFVFVSTl9UUlVTVEVEX1RZUEUiLCJfZG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZU5vZGVJdGVyYXRvciIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImltcG9ydE5vZGUiLCJkb2N1bWVudE1vZGUiLCJob29rcyIsImNyZWF0ZUhUTUxEb2N1bWVudCIsIk1VU1RBQ0hFX0VYUFIkJDEiLCJFUkJfRVhQUiQkMSIsIkRBVEFfQVRUUiQkMSIsIkFSSUFfQVRUUiQkMSIsIklTX1NDUklQVF9PUl9EQVRBJCQxIiwiQVRUUl9XSElURVNQQUNFJCQxIiwiSVNfQUxMT1dFRF9VUkkkJDEiLCJBTExPV0VEX1RBR1MiLCJERUZBVUxUX0FMTE9XRURfVEFHUyIsIkFMTE9XRURfQVRUUiIsIkRFRkFVTFRfQUxMT1dFRF9BVFRSIiwiRk9SQklEX1RBR1MiLCJGT1JCSURfQVRUUiIsIkFMTE9XX0FSSUFfQVRUUiIsIkFMTE9XX0RBVEFfQVRUUiIsIkFMTE9XX1VOS05PV05fUFJPVE9DT0xTIiwiU0FGRV9GT1JfVEVNUExBVEVTIiwiV0hPTEVfRE9DVU1FTlQiLCJTRVRfQ09ORklHIiwiRk9SQ0VfQk9EWSIsIlJFVFVSTl9ET00iLCJSRVRVUk5fRE9NX0ZSQUdNRU5UIiwiUkVUVVJOX0RPTV9JTVBPUlQiLCJTQU5JVElaRV9ET00iLCJLRUVQX0NPTlRFTlQiLCJJTl9QTEFDRSIsIlVTRV9QUk9GSUxFUyIsIkZPUkJJRF9DT05URU5UUyIsIkRBVEFfVVJJX1RBR1MiLCJERUZBVUxUX0RBVEFfVVJJX1RBR1MiLCJVUklfU0FGRV9BVFRSSUJVVEVTIiwiREVGQVVMVF9VUklfU0FGRV9BVFRSSUJVVEVTIiwiQ09ORklHIiwiZm9ybUVsZW1lbnQiLCJfcGFyc2VDb25maWciLCJjZmciLCJBRERfVVJJX1NBRkVfQVRUUiIsIkFERF9EQVRBX1VSSV9UQUdTIiwiQUxMT1dFRF9VUklfUkVHRVhQIiwiQUREX1RBR1MiLCJBRERfQVRUUiIsInRhYmxlIiwidGJvZHkiLCJfZm9yY2VSZW1vdmUiLCJub2RlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwib3V0ZXJIVE1MIiwiX3JlbW92ZUF0dHJpYnV0ZSIsIm5hbWUiLCJhdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGVOb2RlIiwicmVtb3ZlQXR0cmlidXRlIiwiX2luaXREb2N1bWVudCIsImRpcnR5IiwiZG9jIiwibGVhZGluZ1doaXRlc3BhY2UiLCJtYXRjaGVzIiwiZGlydHlQYXlsb2FkIiwicGFyc2VGcm9tU3RyaW5nIiwiZG9jdW1lbnRFbGVtZW50IiwiYm9keSIsImZpcnN0RWxlbWVudENoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwiY2FsbCIsIl9jcmVhdGVJdGVyYXRvciIsIlNIT1dfRUxFTUVOVCIsIlNIT1dfQ09NTUVOVCIsIlNIT1dfVEVYVCIsIkZJTFRFUl9BQ0NFUFQiLCJfaXNOb2RlIiwibm9kZU5hbWUiLCJfZXhlY3V0ZUhvb2siLCJlbnRyeVBvaW50IiwiY3VycmVudE5vZGUiLCJkYXRhIiwiaG9vayIsIl9zYW5pdGl6ZUVsZW1lbnRzIiwiZWxtIiwidGV4dENvbnRlbnQiLCJhdHRyaWJ1dGVzIiwic2V0QXR0cmlidXRlIiwibmFtZXNwYWNlVVJJIiwidGFnTmFtZSIsImFsbG93ZWRUYWdzIiwicXVlcnlTZWxlY3RvckFsbCIsImlubmVySFRNTCIsImluc2VydEFkamFjZW50SFRNTCIsImh0bWxUb0luc2VydCIsImNsb25lTm9kZSIsIl9pc1ZhbGlkQXR0cmlidXRlIiwibGNUYWciLCJsY05hbWUiLCJ2YWx1ZSIsIl9zYW5pdGl6ZUF0dHJpYnV0ZXMiLCJhdHRyIiwiaG9va0V2ZW50IiwiYXR0ck5hbWUiLCJhdHRyVmFsdWUiLCJrZWVwQXR0ciIsImFsbG93ZWRBdHRyaWJ1dGVzIiwiX2F0dHIiLCJmb3JjZUtlZXBBdHRyIiwic2V0QXR0cmlidXRlTlMiLCJfc2FuaXRpemVTaGFkb3dET00iLCJmcmFnbWVudCIsInNoYWRvd05vZGUiLCJzaGFkb3dJdGVyYXRvciIsIm5leHROb2RlIiwic2FuaXRpemUiLCJpbXBvcnRlZE5vZGUiLCJvbGROb2RlIiwicmV0dXJuTm9kZSIsInRvU3RyaW5nIiwidG9TdGF0aWNIVE1MIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwibm9kZUl0ZXJhdG9yIiwic2VyaWFsaXplZEhUTUwiLCJzZXRDb25maWciLCJjbGVhckNvbmZpZyIsImlzVmFsaWRBdHRyaWJ1dGUiLCJ0YWciLCJhZGRIb29rIiwiaG9va0Z1bmN0aW9uIiwicmVtb3ZlSG9vayIsInJlbW92ZUhvb2tzIiwicmVtb3ZlQWxsSG9va3MiLCJmYWN0b3J5IiwiX19hd2FpdGVyIiwidGhpcyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiZGVmaW5lUHJvcGVydHkiLCJhbmFseXRpY3NfMSIsImRvbV8xIiwibm90aWZpY2F0aW9uc18xIiwiY2hyb21lIiwicnVudGltZSIsIm9uTWVzc2FnZSIsImFkZExpc3RlbmVyIiwibWVzc2FnZSIsInNlbmRlciIsInNlbmRSZXNwb25zZSIsIl9hIiwiX2IiLCJfYyIsInRhcmdldCIsInR5cGUiLCJub3RpZmljYXRpb24iLCJjb3VudCIsImxhc3RUaW1lIiwidGltZU1vZGlmaWVkIiwibG9hZEFzc2lnbm1lbnROb3RpZmljYXRpb25zIiwidXJsIiwic2VuZE1lc3NhZ2UiLCJhbmFseXRpY3NJc0VuYWJsZWQiLCJpbml0aWFsaXplQW5hbHl0aWNzIiwiZG9jdW1lbnRDb250ZXh0IiwiaXNBbmFseXRpY3NFbmFibGVkIiwiZ2V0QnJvd3NlciIsInNldHRpbmdzIiwiYW5hbHl0aWNzIiwic2VsZWN0ZWRUaGVtZSIsInRoZW1lIiwic2VsZWN0ZWRCZXRhIiwiYmV0YSIsImN1cnJlbnRWZXJzaW9uIiwibmV3VmVyc2lvbiIsInJhbmRvbVVzZXJJZCIsInRoZW1lSXNNb2Rlcm4iLCJ0cmFja0V2ZW50IiwicHJvcHMiLCJfX3Jlc3QiLCJzIiwidCIsInAiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImdldEFuYWx5dGljc1VzZXJJZCIsImV2ZW50TmFtZSIsImxlZ2FjeVRhcmdldCIsImxlZ2FjeUFjdGlvbiIsImxlZ2FjeUxhYmVsIiwibGVnYWN5VmFsdWUiLCJpZCIsImNvbnRleHQiLCJkZWJ1ZyIsInN0b3JhZ2UiLCJsb2NhbCIsImdldCIsInJhbmRvbVBvb2wiLCJVaW50OEFycmF5IiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwiaGV4IiwiZ2V0UmFuZG9tVG9rZW4iLCJndGFnIiwiZ2xvYmFsVGhpcyIsImRhdGFMYXllciIsInRyYWNrQ2xpY2siLCJldmVudCIsImlzVHJ1c3RlZCIsImN1cnJlbnRUYXJnZXQiLCJkYXRhc2V0Iiwic3BsdXNUcmFja2luZ0lkIiwic3BsdXNUcmFja2luZ0NvbnRleHQiLCJzcGx1c1RyYWNraW5nVmFsdWUiLCJidXR0b24iLCJEYXRlIiwicGFnZV9sb2NhdGlvbiIsImxvY2F0aW9uIiwiaHJlZiIsInBhZ2VfcGF0aCIsInBhdGhuYW1lIiwicGFnZV90aXRsZSIsInVzZXJfaWQiLCJ1c2VyX3Byb3BlcnRpZXMiLCJhY3RpdmVCZXRhIiwibGFzdEVuYWJsZWRWZXJzaW9uIiwiZXh0ZW5zaW9uVmVyc2lvbiIsImRvbWFpbiIsImhvc3QiLCJtb2Rlcm5UaGVtZSIsImV4dHJhUHJvcHMiLCJldmVudERhdGEiLCJhc3NpZ24iLCJ0cmFja2VkRWxlbWVudHMiLCJTZXQiLCJvYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJtdXRhdGlvbk9ic2VydmVyIiwiZWxlbSIsImhhcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZWFkeVN0YXRlQ2hlY2tJbnRlcnZhbCIsInNldEludGVydmFsIiwicmVhZHlTdGF0ZSIsImNsZWFySW50ZXJ2YWwiLCJpbml0Iiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJlbmFibGVBbmFseXRpY3MiLCJwcm9wZXJ0aWVzIiwiY2hpbGRyZW4iLCJjIiwic3VicHJvcGVydHkiLCJjaGlsZCIsImNyZWF0ZUJ1dHRvbiIsImNhbGxiYWNrIiwib25jbGljayIsImNyZWF0ZVN2Z0xvZ28iLCJjbGFzc2VzIiwiY2lyY2xlIiwiY3JlYXRlRWxlbWVudE5TIiwibGluZTEiLCJsaW5lMiIsImFwcGVuZCIsIndhaXRGb3JFbGVtZW50Iiwic2V0Q1NTVmFyaWFibGUiLCJnZXRQYXJlbnRzIiwiaXNWaXNpYmxlIiwiY3JlYXRlQnV0dG9uV2l0aExvZ28iLCJpbWciLCJzdHlsZSIsInZlcnRpY2FsQWxpZ24iLCJwYWRkaW5nTGVmdCIsIndpZHRoIiwicHJlcGVuZCIsInNldFByb3BlcnR5IiwiYnV0dG9uSW5wdXQiLCJxdWVyeVNlbGVjdG9yIiwiY3Vyc29yIiwiYnJvd3NlciIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiZ2V0Q2xpZW50UmVjdHMiLCJzZWxlY3RvciIsImZpcnN0Q2hhciIsInBhcmVudHMiLCJjaGFyQXQiLCJjb250YWlucyIsInN1YnN0ciIsInZhbCIsImNoZWNrX2ludGVydmFsIiwiaW50ZXJ2YWwiLCJjcmVhdGVMb2dQcmVmaXgiLCJjb2xvciIsIkxvZ2dlciIsImxvZyIsImVycm9yIiwiaW5mbyIsInRyYWNlIiwiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsInNlbmROb3RpZmljYXRpb24iLCJ1cGRhdGVMYXN0VGltZSIsImRvbXB1cmlmeV8xIiwibG9nZ2VyXzEiLCJhc3NpZ25tZW50Tm90aWZpY2F0aW9uVXJsIiwicmVzcG9uc2UiLCJmZXRjaCIsImNyZWRlbnRpYWxzIiwib2siLCJFcnJvciIsInJlc3BvbnNlSnNvbiIsImpzb24iLCJ0aW1lIiwibm93IiwiZGl2IiwiZGVmYXVsdCIsIm91dHB1dCIsIm5vdGlmaWNhdGlvbnMiLCJtb250aHMiLCJ0b3RhbEFzc2lnbm1lbnRzIiwicmV2ZXJzZSIsImluY2x1ZGVzIiwic3BsaXREYXRlIiwic3BsaXQiLCJtb250aERheSIsImhvdXJNaW51dGUiLCJtb250aERheVllYXIiLCJnZXRGdWxsWWVhciIsInRvZGF5IiwiZ2V0TW9udGgiLCJnZXREYXRlIiwibm90aWZpY2F0aW9uRGF0ZSIsInBhcnNlIiwibiIsImljb25VcmwiLCJ0aXRsZSIsImV2ZW50VGltZSIsImlzQ2xpY2thYmxlIiwic3luYyIsInN0b3JhZ2VDb250ZW50IiwicmVxdWlyZUludGVyYWN0aW9uIiwiYWN0aW9uIiwiZ2V0QmFkZ2VUZXh0IiwibnVtIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJzZXRCYWRnZVRleHQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIl0sInNvdXJjZVJvb3QiOiIifQ==