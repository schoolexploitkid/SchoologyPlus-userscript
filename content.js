/*! For license information please see content.js.LICENSE.txt */
(()=>{var e={2838:function(e){e.exports=function(){"use strict";var e=Object.hasOwnProperty,t=Object.setPrototypeOf,n=Object.isFrozen,o=Object.freeze,i=Object.seal,s=Object.create,r="undefined"!=typeof Reflect&&Reflect,a=r.apply,l=r.construct;a||(a=function(e,t,n){return e.apply(t,n)}),o||(o=function(e){return e}),i||(i=function(e){return e}),l||(l=function(e,t){return new(Function.prototype.bind.apply(e,[null].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(t))))});var c,d=E(Array.prototype.forEach),u=E(Array.prototype.pop),p=E(Array.prototype.push),h=E(String.prototype.toLowerCase),m=E(String.prototype.match),g=E(String.prototype.replace),f=E(String.prototype.indexOf),v=E(String.prototype.trim),y=E(RegExp.prototype.test),b=(c=TypeError,function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return l(c,t)});function E(e){return function(t){for(var n=arguments.length,o=Array(n>1?n-1:0),i=1;i<n;i++)o[i-1]=arguments[i];return a(e,t,o)}}function S(e,o){t&&t(e,null);for(var i=o.length;i--;){var s=o[i];if("string"==typeof s){var r=h(s);r!==s&&(n(o)||(o[i]=r),s=r)}e[s]=!0}return e}function _(t){var n=s(null),o=void 0;for(o in t)a(e,t,[o])&&(n[o]=t[o]);return n}var x=o(["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","picture","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr"]),w=o(["svg","a","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","audio","canvas","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","style","switch","symbol","text","textpath","title","tref","tspan","video","view","vkern"]),C=o(["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]),T=o(["math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmultiscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mspace","msqrt","mstyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover"]),A=o(["#text"]),k=o(["accept","action","align","alt","autocapitalize","autocomplete","autopictureinpicture","autoplay","background","bgcolor","border","capture","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","controls","controlslist","coords","crossorigin","datetime","decoding","default","dir","disabled","disablepictureinpicture","disableremoteplayback","download","draggable","enctype","enterkeyhint","face","for","headers","height","hidden","high","href","hreflang","id","inputmode","integrity","ismap","kind","label","lang","list","loading","loop","low","max","maxlength","media","method","min","minlength","multiple","muted","name","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","playsinline","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","role","rows","rowspan","spellcheck","scope","selected","shape","size","sizes","span","srclang","start","src","srcset","step","style","summary","tabindex","title","translate","type","usemap","valign","value","width","xmlns"]),N=o(["accent-height","accumulate","additive","alignment-baseline","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","class","clip","clippathunits","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","fill","fill-opacity","fill-rule","filter","filterunits","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","height","href","id","image-rendering","in","in2","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lang","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","media","method","mode","min","name","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","preserveaspectratio","primitiveunits","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","specularconstant","specularexponent","spreadmethod","startoffset","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","style","surfacescale","systemlanguage","tabindex","targetx","targety","transform","text-anchor","text-decoration","text-rendering","textlength","type","u1","u2","unicode","values","viewbox","visibility","version","vert-adv-y","vert-origin-x","vert-origin-y","width","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","xmlns","y","y1","y2","z","zoomandpan"]),I=o(["accent","accentunder","align","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","dir","display","displaystyle","encoding","fence","frame","height","href","id","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","width","xmlns"]),L=o(["xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]),O=i(/\{\{[\s\S]*|[\s\S]*\}\}/gm),M=i(/<%[\s\S]*|[\s\S]*%>/gm),D=i(/^data-[\-\w.\u00B7-\uFFFF]/),P=i(/^aria-[\-\w]+$/),R=i(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i),B=i(/^(?:\w+script|data):/i),$=i(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g),q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function F(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var U=function(){return"undefined"==typeof window?null:window};return function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:U(),n=function(t){return e(t)};if(n.version="2.1.1",n.removed=[],!t||!t.document||9!==t.document.nodeType)return n.isSupported=!1,n;var i=t.document,s=t.document,r=t.DocumentFragment,a=t.HTMLTemplateElement,l=t.Node,c=t.NodeFilter,E=t.NamedNodeMap,H=void 0===E?t.NamedNodeMap||t.MozNamedAttrMap:E,j=t.Text,G=t.Comment,V=t.DOMParser,W=t.trustedTypes;if("function"==typeof a){var z=s.createElement("template");z.content&&z.content.ownerDocument&&(s=z.content.ownerDocument)}var X=function(e,t){if("object"!==(void 0===e?"undefined":q(e))||"function"!=typeof e.createPolicy)return null;var n=null,o="data-tt-policy-suffix";t.currentScript&&t.currentScript.hasAttribute(o)&&(n=t.currentScript.getAttribute(o));var i="dompurify"+(n?"#"+n:"");try{return e.createPolicy(i,{createHTML:function(e){return e}})}catch(e){return console.warn("TrustedTypes policy "+i+" could not be created."),null}}(W,i),Y=X&&Ae?X.createHTML(""):"",K=s,J=K.implementation,Q=K.createNodeIterator,Z=K.getElementsByTagName,ee=K.createDocumentFragment,te=i.importNode,ne={};try{ne=_(s).documentMode?s.documentMode:{}}catch(e){}var oe={};n.isSupported=J&&void 0!==J.createHTMLDocument&&9!==ne;var ie=O,se=M,re=D,ae=P,le=B,ce=$,de=R,ue=null,pe=S({},[].concat(F(x),F(w),F(C),F(T),F(A))),he=null,me=S({},[].concat(F(k),F(N),F(I),F(L))),ge=null,fe=null,ve=!0,ye=!0,be=!1,Ee=!1,Se=!1,_e=!1,xe=!1,we=!1,Ce=!1,Te=!1,Ae=!1,ke=!0,Ne=!0,Ie=!1,Le={},Oe=S({},["annotation-xml","audio","colgroup","desc","foreignobject","head","iframe","math","mi","mn","mo","ms","mtext","noembed","noframes","plaintext","script","style","svg","template","thead","title","video","xmp"]),Me=null,De=S({},["audio","video","img","source","image","track"]),Pe=null,Re=S({},["alt","class","for","id","label","name","pattern","placeholder","summary","title","value","style","xmlns"]),Be=null,$e=s.createElement("form"),qe=function(e){Be&&Be===e||(e&&"object"===(void 0===e?"undefined":q(e))||(e={}),e=_(e),ue="ALLOWED_TAGS"in e?S({},e.ALLOWED_TAGS):pe,he="ALLOWED_ATTR"in e?S({},e.ALLOWED_ATTR):me,Pe="ADD_URI_SAFE_ATTR"in e?S(_(Re),e.ADD_URI_SAFE_ATTR):Re,Me="ADD_DATA_URI_TAGS"in e?S(_(De),e.ADD_DATA_URI_TAGS):De,ge="FORBID_TAGS"in e?S({},e.FORBID_TAGS):{},fe="FORBID_ATTR"in e?S({},e.FORBID_ATTR):{},Le="USE_PROFILES"in e&&e.USE_PROFILES,ve=!1!==e.ALLOW_ARIA_ATTR,ye=!1!==e.ALLOW_DATA_ATTR,be=e.ALLOW_UNKNOWN_PROTOCOLS||!1,Ee=e.SAFE_FOR_TEMPLATES||!1,Se=e.WHOLE_DOCUMENT||!1,we=e.RETURN_DOM||!1,Ce=e.RETURN_DOM_FRAGMENT||!1,Te=e.RETURN_DOM_IMPORT||!1,Ae=e.RETURN_TRUSTED_TYPE||!1,xe=e.FORCE_BODY||!1,ke=!1!==e.SANITIZE_DOM,Ne=!1!==e.KEEP_CONTENT,Ie=e.IN_PLACE||!1,de=e.ALLOWED_URI_REGEXP||de,Ee&&(ye=!1),Ce&&(we=!0),Le&&(ue=S({},[].concat(F(A))),he=[],!0===Le.html&&(S(ue,x),S(he,k)),!0===Le.svg&&(S(ue,w),S(he,N),S(he,L)),!0===Le.svgFilters&&(S(ue,C),S(he,N),S(he,L)),!0===Le.mathMl&&(S(ue,T),S(he,I),S(he,L))),e.ADD_TAGS&&(ue===pe&&(ue=_(ue)),S(ue,e.ADD_TAGS)),e.ADD_ATTR&&(he===me&&(he=_(he)),S(he,e.ADD_ATTR)),e.ADD_URI_SAFE_ATTR&&S(Pe,e.ADD_URI_SAFE_ATTR),Ne&&(ue["#text"]=!0),Se&&S(ue,["html","head","body"]),ue.table&&(S(ue,["tbody"]),delete ge.tbody),o&&o(e),Be=e)},Fe=function(e){p(n.removed,{element:e});try{e.parentNode.removeChild(e)}catch(t){e.outerHTML=Y}},Ue=function(e,t){try{p(n.removed,{attribute:t.getAttributeNode(e),from:t})}catch(e){p(n.removed,{attribute:null,from:t})}t.removeAttribute(e)},He=function(e){var t=void 0,n=void 0;if(xe)e="<remove></remove>"+e;else{var o=m(e,/^[\r\n\t ]+/);n=o&&o[0]}var i=X?X.createHTML(e):e;try{t=(new V).parseFromString(i,"text/html")}catch(e){}if(!t||!t.documentElement){var r=(t=J.createHTMLDocument("")).body;r.parentNode.removeChild(r.parentNode.firstElementChild),r.outerHTML=i}return e&&n&&t.body.insertBefore(s.createTextNode(n),t.body.childNodes[0]||null),Z.call(t,Se?"html":"body")[0]},je=function(e){return Q.call(e.ownerDocument||e,e,c.SHOW_ELEMENT|c.SHOW_COMMENT|c.SHOW_TEXT,(function(){return c.FILTER_ACCEPT}),!1)},Ge=function(e){return"object"===(void 0===l?"undefined":q(l))?e instanceof l:e&&"object"===(void 0===e?"undefined":q(e))&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName},Ve=function(e,t,o){oe[e]&&d(oe[e],(function(e){e.call(n,t,o,Be)}))},We=function(e){var t,o=void 0;if(Ve("beforeSanitizeElements",e,null),!((t=e)instanceof j||t instanceof G||"string"==typeof t.nodeName&&"string"==typeof t.textContent&&"function"==typeof t.removeChild&&t.attributes instanceof H&&"function"==typeof t.removeAttribute&&"function"==typeof t.setAttribute&&"string"==typeof t.namespaceURI))return Fe(e),!0;if(m(e.nodeName,/[\u0080-\uFFFF]/))return Fe(e),!0;var i=h(e.nodeName);if(Ve("uponSanitizeElement",e,{tagName:i,allowedTags:ue}),("svg"===i||"math"===i)&&0!==e.querySelectorAll("p, br").length)return Fe(e),!0;if(!Ge(e.firstElementChild)&&(!Ge(e.content)||!Ge(e.content.firstElementChild))&&y(/<[!/\w]/g,e.innerHTML)&&y(/<[!/\w]/g,e.textContent))return Fe(e),!0;if(!ue[i]||ge[i]){if(Ne&&!Oe[i]&&"function"==typeof e.insertAdjacentHTML)try{var s=e.innerHTML;e.insertAdjacentHTML("AfterEnd",X?X.createHTML(s):s)}catch(e){}return Fe(e),!0}return"noscript"!==i&&"noembed"!==i||!y(/<\/no(script|embed)/i,e.innerHTML)?(Ee&&3===e.nodeType&&(o=e.textContent,o=g(o,ie," "),o=g(o,se," "),e.textContent!==o&&(p(n.removed,{element:e.cloneNode()}),e.textContent=o)),Ve("afterSanitizeElements",e,null),!1):(Fe(e),!0)},ze=function(e,t,n){if(ke&&("id"===t||"name"===t)&&(n in s||n in $e))return!1;if(ye&&y(re,t));else if(ve&&y(ae,t));else{if(!he[t]||fe[t])return!1;if(Pe[t]);else if(y(de,g(n,ce,"")));else if("src"!==t&&"xlink:href"!==t&&"href"!==t||"script"===e||0!==f(n,"data:")||!Me[e])if(be&&!y(le,g(n,ce,"")));else if(n)return!1}return!0},Xe=function(e){var t=void 0,o=void 0,i=void 0,s=void 0;Ve("beforeSanitizeAttributes",e,null);var r=e.attributes;if(r){var a={attrName:"",attrValue:"",keepAttr:!0,allowedAttributes:he};for(s=r.length;s--;){var l=t=r[s],c=l.name,d=l.namespaceURI;if(o=v(t.value),i=h(c),a.attrName=i,a.attrValue=o,a.keepAttr=!0,a.forceKeepAttr=void 0,Ve("uponSanitizeAttribute",e,a),o=a.attrValue,!a.forceKeepAttr&&(Ue(c,e),a.keepAttr))if(y(/\/>/i,o))Ue(c,e);else{Ee&&(o=g(o,ie," "),o=g(o,se," "));var p=e.nodeName.toLowerCase();if(ze(p,i,o))try{d?e.setAttributeNS(d,c,o):e.setAttribute(c,o),u(n.removed)}catch(e){}}}Ve("afterSanitizeAttributes",e,null)}},Ye=function e(t){var n=void 0,o=je(t);for(Ve("beforeSanitizeShadowDOM",t,null);n=o.nextNode();)Ve("uponSanitizeShadowNode",n,null),We(n)||(n.content instanceof r&&e(n.content),Xe(n));Ve("afterSanitizeShadowDOM",t,null)};return n.sanitize=function(e,o){var s=void 0,a=void 0,c=void 0,d=void 0,u=void 0;if(e||(e="\x3c!--\x3e"),"string"!=typeof e&&!Ge(e)){if("function"!=typeof e.toString)throw b("toString is not a function");if("string"!=typeof(e=e.toString()))throw b("dirty is not a string, aborting")}if(!n.isSupported){if("object"===q(t.toStaticHTML)||"function"==typeof t.toStaticHTML){if("string"==typeof e)return t.toStaticHTML(e);if(Ge(e))return t.toStaticHTML(e.outerHTML)}return e}if(_e||qe(o),n.removed=[],"string"==typeof e&&(Ie=!1),Ie);else if(e instanceof l)1===(a=(s=He("\x3c!----\x3e")).ownerDocument.importNode(e,!0)).nodeType&&"BODY"===a.nodeName||"HTML"===a.nodeName?s=a:s.appendChild(a);else{if(!we&&!Ee&&!Se&&-1===e.indexOf("<"))return X&&Ae?X.createHTML(e):e;if(!(s=He(e)))return we?null:Y}s&&xe&&Fe(s.firstChild);for(var p=je(Ie?e:s);c=p.nextNode();)3===c.nodeType&&c===d||We(c)||(c.content instanceof r&&Ye(c.content),Xe(c),d=c);if(d=null,Ie)return e;if(we){if(Ce)for(u=ee.call(s.ownerDocument);s.firstChild;)u.appendChild(s.firstChild);else u=s;return Te&&(u=te.call(i,u,!0)),u}var h=Se?s.outerHTML:s.innerHTML;return Ee&&(h=g(h,ie," "),h=g(h,se," ")),X&&Ae?X.createHTML(h):h},n.setConfig=function(e){qe(e),_e=!0},n.clearConfig=function(){Be=null,_e=!1},n.isValidAttribute=function(e,t,n){Be||qe({});var o=h(e),i=h(t);return ze(o,i,n)},n.addHook=function(e,t){"function"==typeof t&&(oe[e]=oe[e]||[],p(oe[e],t))},n.removeHook=function(e){oe[e]&&u(oe[e])},n.removeHooks=function(e){oe[e]&&(oe[e]=[])},n.removeAllHooks=function(){oe={}},n}()}()},2234:function(e,t,n){var o,i,s;s=function(){var e="retain",t="first",n=document,o={}.hasOwnProperty;function i(){return s.apply(null,arguments)||r.apply(null,arguments)}function s(e,t,n,o,s){if(t&&!t.nodeType&&arguments.length<=2)return!1;var a,l="function"==typeof n;l&&(a=n,n=function(e,t){return a(e.text,t.startIndex)});var c=r(t,{find:e,wrap:l?null:n,replace:l?n:"$"+(o||"&"),prepMatch:function(e,t){if(!e[0])throw"findAndReplaceDOMText cannot handle zero-length matches";if(o>0){var n=e[o];e.index+=e[0].indexOf(n),e[0]=n}return e.endIndex=e.index+e[0].length,e.startIndex=e.index,e.index=t,e},filterElements:s});return i.revert=function(){return c.revert()},!0}function r(e,t){return new a(e,t)}function a(t,n){var s=n.preset&&i.PRESETS[n.preset];if(n.portionMode=n.portionMode||e,s)for(var r in s)o.call(s,r)&&!o.call(n,r)&&(n[r]=s[r]);this.node=t,this.options=n,this.prepMatch=n.prepMatch||this.prepMatch,this.reverts=[],this.matches=this.search(),this.matches.length&&this.processMatches()}return i.NON_PROSE_ELEMENTS={br:1,hr:1,script:1,style:1,img:1,video:1,audio:1,canvas:1,svg:1,map:1,object:1,input:1,textarea:1,select:1,option:1,optgroup:1,button:1},i.NON_CONTIGUOUS_PROSE_ELEMENTS={address:1,article:1,aside:1,blockquote:1,dd:1,div:1,dl:1,fieldset:1,figcaption:1,figure:1,footer:1,form:1,h1:1,h2:1,h3:1,h4:1,h5:1,h6:1,header:1,hgroup:1,hr:1,main:1,nav:1,noscript:1,ol:1,output:1,p:1,pre:1,section:1,ul:1,br:1,li:1,summary:1,dt:1,details:1,rp:1,rt:1,rtc:1,script:1,style:1,img:1,video:1,audio:1,canvas:1,svg:1,map:1,object:1,input:1,textarea:1,select:1,option:1,optgroup:1,button:1,table:1,tbody:1,thead:1,th:1,tr:1,td:1,caption:1,col:1,tfoot:1,colgroup:1},i.NON_INLINE_PROSE=function(e){return o.call(i.NON_CONTIGUOUS_PROSE_ELEMENTS,e.nodeName.toLowerCase())},i.PRESETS={prose:{forceContext:i.NON_INLINE_PROSE,filterElements:function(e){return!o.call(i.NON_PROSE_ELEMENTS,e.nodeName.toLowerCase())}}},i.Finder=a,a.prototype={search:function(){var e,t=0,n=0,o=this.options.find,i=this.getAggregateText(),s=[],r=this;return o="string"==typeof o?RegExp(String(o).replace(/([.*+?^=!:${}()|[\]\/\\])/g,"\\$1"),"g"):o,function i(a){for(var l=0,c=a.length;l<c;++l){var d=a[l];if("string"==typeof d){if(o.global)for(;e=o.exec(d);)s.push(r.prepMatch(e,t++,n));else(e=d.match(o))&&s.push(r.prepMatch(e,0,n));n+=d.length}else i(d)}}(i),s},prepMatch:function(e,t,n){if(!e[0])throw new Error("findAndReplaceDOMText cannot handle zero-length matches");return e.endIndex=n+e.index+e[0].length,e.startIndex=n+e.index,e.index=t,e},getAggregateText:function(){var e=this.options.filterElements,t=this.options.forceContext;return function n(o){if(o.nodeType===Node.TEXT_NODE)return[o.data];if(e&&!e(o))return[];var i=[""],s=0;if(o=o.firstChild)do{if(o.nodeType!==Node.TEXT_NODE){var r=n(o);t&&o.nodeType===Node.ELEMENT_NODE&&(!0===t||t(o))?(i[++s]=r,i[++s]=""):("string"==typeof r[0]&&(i[s]+=r.shift()),r.length&&(i[++s]=r,i[++s]=""))}else i[s]+=o.data}while(o=o.nextSibling);return i}(this.node)},processMatches:function(){var e,t,n,o=this.matches,i=this.node,s=this.options.filterElements,r=[],a=i,l=o.shift(),c=0,d=0,u=[i];e:for(;;){if(a.nodeType===Node.TEXT_NODE&&(!t&&a.length+c>=l.endIndex?t={node:a,index:d++,text:a.data.substring(l.startIndex-c,l.endIndex-c),indexInMatch:0===c?0:c-l.startIndex,indexInNode:l.startIndex-c,endIndexInNode:l.endIndex-c,isEnd:!0}:e&&r.push({node:a,index:d++,text:a.data,indexInMatch:c-l.startIndex,indexInNode:0}),!e&&a.length+c>l.startIndex&&(e={node:a,index:d++,indexInMatch:0,indexInNode:l.startIndex-c,endIndexInNode:l.endIndex-c,text:a.data.substring(l.startIndex-c,l.endIndex-c)}),c+=a.data.length),n=a.nodeType===Node.ELEMENT_NODE&&s&&!s(a),e&&t){if(a=this.replaceMatch(l,e,r,t),c-=t.node.data.length-t.endIndexInNode,e=null,t=null,r=[],d=0,!(l=o.shift()))break}else if(!n&&(a.firstChild||a.nextSibling)){a.firstChild?(u.push(a),a=a.firstChild):a=a.nextSibling;continue}for(;;){if(a.nextSibling){a=a.nextSibling;break}if((a=u.pop())===i)break e}}},revert:function(){for(var e=this.reverts.length;e--;)this.reverts[e]();this.reverts=[]},prepareReplacementString:function(e,n,o){var i=this.options.portionMode;return i===t&&n.indexInMatch>0?"":(e=e.replace(/\$(\d+|&|`|')/g,(function(e,t){var n;switch(t){case"&":n=o[0];break;case"`":n=o.input.substring(0,o.startIndex);break;case"'":n=o.input.substring(o.endIndex);break;default:n=o[+t]||""}return n})),i===t?e:n.isEnd?e.substring(n.indexInMatch):e.substring(n.indexInMatch,n.indexInMatch+n.text.length))},getPortionReplacementNode:function(e,t){var o=this.options.replace||"$&",i=this.options.wrap,s=this.options.wrapClass;if(i&&i.nodeType){var r=n.createElement("div");r.innerHTML=i.outerHTML||(new XMLSerializer).serializeToString(i),i=r.firstChild}if("function"==typeof o)return(o=o(e,t))&&o.nodeType?o:n.createTextNode(String(o));var a="string"==typeof i?n.createElement(i):i;return a&&s&&(a.className=s),(o=n.createTextNode(this.prepareReplacementString(o,e,t))).data&&a?(a.appendChild(o),a):o},replaceMatch:function(e,t,o,i){var s,r,a=t.node,l=i.node;if(a===l){var c=a;t.indexInNode>0&&(s=n.createTextNode(c.data.substring(0,t.indexInNode)),c.parentNode.insertBefore(s,c));var d=this.getPortionReplacementNode(i,e);return c.parentNode.insertBefore(d,c),i.endIndexInNode<c.length&&(r=n.createTextNode(c.data.substring(i.endIndexInNode)),c.parentNode.insertBefore(r,c)),c.parentNode.removeChild(c),this.reverts.push((function(){s===d.previousSibling&&s.parentNode.removeChild(s),r===d.nextSibling&&r.parentNode.removeChild(r),d.parentNode.replaceChild(c,d)})),d}s=n.createTextNode(a.data.substring(0,t.indexInNode)),r=n.createTextNode(l.data.substring(i.endIndexInNode));for(var u=this.getPortionReplacementNode(t,e),p=[],h=0,m=o.length;h<m;++h){var g=o[h],f=this.getPortionReplacementNode(g,e);g.node.parentNode.replaceChild(f,g.node),this.reverts.push(function(e,t){return function(){t.parentNode.replaceChild(e.node,t)}}(g,f)),p.push(f)}var v=this.getPortionReplacementNode(i,e);return a.parentNode.insertBefore(s,a),a.parentNode.insertBefore(u,a),a.parentNode.removeChild(a),l.parentNode.insertBefore(v,l),l.parentNode.insertBefore(r,l),l.parentNode.removeChild(l),this.reverts.push((function(){s.parentNode.removeChild(s),u.parentNode.replaceChild(a,u),r.parentNode.removeChild(r),v.parentNode.replaceChild(l,v)})),v}},i},e.exports?e.exports=s():void 0===(i="function"==typeof(o=s)?o.call(t,n,t,e):o)||(e.exports=i)},9568:function(e,t,n){var o,i,s;void 0!==n.g?n.g:window||this.window||this.global,i=[],void 0===(s="function"==typeof(o=function(e){"use strict";var t={},n="iziToast",o=(document.querySelector("body"),!!/Mobi/.test(navigator.userAgent)),i=/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor),s="undefined"!=typeof InstallTrigger,r="ontouchstart"in document.documentElement,a=["bottomRight","bottomLeft","bottomCenter","topRight","topLeft","topCenter","center"],l=568,c={};t.children={};var d={id:null,class:"",title:"",titleColor:"",titleSize:"",titleLineHeight:"",message:"",messageColor:"",messageSize:"",messageLineHeight:"",backgroundColor:"",theme:"light",color:"",icon:"",iconText:"",iconColor:"",iconUrl:null,image:"",imageWidth:50,maxWidth:null,zindex:null,layout:1,balloon:!1,close:!0,closeOnEscape:!1,closeOnClick:!1,displayMode:0,position:"bottomRight",target:"",targetFirst:!0,timeout:5e3,rtl:!1,animateInside:!0,drag:!0,pauseOnHover:!0,resetOnHover:!1,progressBar:!0,progressBarColor:"",progressBarEasing:"linear",overlay:!1,overlayClose:!1,overlayColor:"rgba(0, 0, 0, 0.6)",transitionIn:"fadeInUp",transitionOut:"fadeOut",transitionInMobile:"fadeInUp",transitionOutMobile:"fadeOutDown",buttons:{},inputs:{},onOpening:function(){},onOpened:function(){},onClosing:function(){},onClosed:function(){}};if("remove"in Element.prototype||(Element.prototype.remove=function(){this.parentNode&&this.parentNode.removeChild(this)}),"function"!=typeof window.CustomEvent){var u=function(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent("CustomEvent");return n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),n};u.prototype=window.Event.prototype,window.CustomEvent=u}var p=function(e,t,n){if("[object Object]"===Object.prototype.toString.call(e))for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(n,e[o],o,e);else if(e)for(var i=0,s=e.length;i<s;i++)t.call(n,e[i],i,e)},h=function(e,t){var n={};return p(e,(function(t,o){n[o]=e[o]})),p(t,(function(e,o){n[o]=t[o]})),n},m=function(e){var t=document.createDocumentFragment(),n=document.createElement("div");for(n.innerHTML=e;n.firstChild;)t.appendChild(n.firstChild);return t},g={move:function(e,t,o,r){var a,l=.3,c=180;0!==r&&(e.classList.add(n+"-dragged"),e.style.transform="translateX("+r+"px)",r>0?(a=(c-r)/c)<l&&t.hide(h(o,{transitionOut:"fadeOutRight",transitionOutMobile:"fadeOutRight"}),e,"drag"):(a=(c+r)/c)<l&&t.hide(h(o,{transitionOut:"fadeOutLeft",transitionOutMobile:"fadeOutLeft"}),e,"drag"),e.style.opacity=a,a<l&&((i||s)&&(e.style.left=r+"px"),e.parentNode.style.opacity=l,this.stopMoving(e,null)))},startMoving:function(e,t,n,o){o=o||window.event;var i=r?o.touches[0].clientX:o.clientX,s=e.style.transform.replace("px)",""),a=i-(s=s.replace("translateX(",""));n.transitionIn&&e.classList.remove(n.transitionIn),n.transitionInMobile&&e.classList.remove(n.transitionInMobile),e.style.transition="",r?document.ontouchmove=function(o){o.preventDefault();var i=(o=o||window.event).touches[0].clientX-a;g.move(e,t,n,i)}:document.onmousemove=function(o){o.preventDefault();var i=(o=o||window.event).clientX-a;g.move(e,t,n,i)}},stopMoving:function(e,t){r?document.ontouchmove=function(){}:document.onmousemove=function(){},e.style.opacity="",e.style.transform="",e.classList.contains(n+"-dragged")&&(e.classList.remove(n+"-dragged"),e.style.transition="transform 0.4s ease, opacity 0.4s ease",setTimeout((function(){e.style.transition=""}),400))}};return t.setSetting=function(e,n,o){t.children[e][n]=o},t.getSetting=function(e,n){return t.children[e][n]},t.destroy=function(){p(document.querySelectorAll("."+n+"-overlay"),(function(e,t){e.remove()})),p(document.querySelectorAll("."+n+"-wrapper"),(function(e,t){e.remove()})),p(document.querySelectorAll("."+n),(function(e,t){e.remove()})),this.children={},document.removeEventListener(n+"-opened",{},!1),document.removeEventListener(n+"-opening",{},!1),document.removeEventListener(n+"-closing",{},!1),document.removeEventListener(n+"-closed",{},!1),document.removeEventListener("keyup",{},!1),c={}},t.settings=function(e){t.destroy(),c=e,d=h(d,e||{})},p({info:{color:"blue",icon:"ico-info"},success:{color:"green",icon:"ico-success"},warning:{color:"orange",icon:"ico-warning"},error:{color:"red",icon:"ico-error"},question:{color:"yellow",icon:"ico-question"}},(function(e,n){t[n]=function(t){var n=h(c,t||{});n=h(e,n||{}),this.show(n)}})),t.progress=function(e,t,o){var i=this,s=t.getAttribute("data-iziToast-ref"),r=h(this.children[s],e||{}),a=t.querySelector("."+n+"-progressbar div");return{start:function(){void 0===r.time.REMAINING&&(t.classList.remove(n+"-reseted"),null!==a&&(a.style.transition="width "+r.timeout+"ms "+r.progressBarEasing,a.style.width="0%"),r.time.START=(new Date).getTime(),r.time.END=r.time.START+r.timeout,r.time.TIMER=setTimeout((function(){clearTimeout(r.time.TIMER),t.classList.contains(n+"-closing")||(i.hide(r,t,"timeout"),"function"==typeof o&&o.apply(i))}),r.timeout),i.setSetting(s,"time",r.time))},pause:function(){if(void 0!==r.time.START&&!t.classList.contains(n+"-paused")&&!t.classList.contains(n+"-reseted")){if(t.classList.add(n+"-paused"),r.time.REMAINING=r.time.END-(new Date).getTime(),clearTimeout(r.time.TIMER),i.setSetting(s,"time",r.time),null!==a){var e=window.getComputedStyle(a).getPropertyValue("width");a.style.transition="none",a.style.width=e}"function"==typeof o&&setTimeout((function(){o.apply(i)}),10)}},resume:function(){void 0!==r.time.REMAINING?(t.classList.remove(n+"-paused"),null!==a&&(a.style.transition="width "+r.time.REMAINING+"ms "+r.progressBarEasing,a.style.width="0%"),r.time.END=(new Date).getTime()+r.time.REMAINING,r.time.TIMER=setTimeout((function(){clearTimeout(r.time.TIMER),t.classList.contains(n+"-closing")||(i.hide(r,t,"timeout"),"function"==typeof o&&o.apply(i))}),r.time.REMAINING),i.setSetting(s,"time",r.time)):this.start()},reset:function(){clearTimeout(r.time.TIMER),delete r.time.REMAINING,i.setSetting(s,"time",r.time),t.classList.add(n+"-reseted"),t.classList.remove(n+"-paused"),null!==a&&(a.style.transition="none",a.style.width="100%"),"function"==typeof o&&setTimeout((function(){o.apply(i)}),10)}}},t.hide=function(e,t,i){"object"!=typeof t&&(t=document.querySelector(t));var s=this,r=h(this.children[t.getAttribute("data-iziToast-ref")],e||{});r.closedBy=i||null,delete r.time.REMAINING,t.classList.add(n+"-closing"),function(){var e=document.querySelector("."+n+"-overlay");if(null!==e){var t=e.getAttribute("data-iziToast-ref"),o=(t=t.split(",")).indexOf(String(r.ref));-1!==o&&t.splice(o,1),e.setAttribute("data-iziToast-ref",t.join()),0===t.length&&(e.classList.remove("fadeIn"),e.classList.add("fadeOut"),setTimeout((function(){e.remove()}),700))}}(),r.transitionIn&&t.classList.remove(r.transitionIn),r.transitionInMobile&&t.classList.remove(r.transitionInMobile),o||window.innerWidth<=l?r.transitionOutMobile&&t.classList.add(r.transitionOutMobile):r.transitionOut&&t.classList.add(r.transitionOut);var a=t.parentNode.offsetHeight;t.parentNode.style.height=a+"px",t.style.pointerEvents="none",(!o||window.innerWidth>l)&&(t.parentNode.style.transitionDelay="0.2s");try{var c=new CustomEvent(n+"-closing",{detail:r,bubbles:!0,cancelable:!0});document.dispatchEvent(c)}catch(e){console.warn(e)}setTimeout((function(){t.parentNode.style.height="0px",t.parentNode.style.overflow="",setTimeout((function(){delete s.children[r.ref],t.parentNode.remove();try{var e=new CustomEvent(n+"-closed",{detail:r,bubbles:!0,cancelable:!0});document.dispatchEvent(e)}catch(e){console.warn(e)}void 0!==r.onClosed&&r.onClosed.apply(null,[r,t,i])}),1e3)}),200),void 0!==r.onClosing&&r.onClosing.apply(null,[r,t,i])},t.show=function(e){var i,s=this,u=h(c,e||{});if((u=h(d,u)).time={},null===u.id&&(u.id=(i=u.title+u.message+u.color,btoa(encodeURIComponent(i)).replace(/=/g,""))),1===u.displayMode||"once"==u.displayMode)try{if(document.querySelectorAll("."+n+"#"+u.id).length>0)return!1}catch(e){console.warn("["+n+"] Could not find an element with this selector: #"+u.id+". Try to set an valid id.")}if(2===u.displayMode||"replace"==u.displayMode)try{p(document.querySelectorAll("."+n+"#"+u.id),(function(e,t){s.hide(u,e,"replaced")}))}catch(e){console.warn("["+n+"] Could not find an element with this selector: #"+u.id+". Try to set an valid id.")}u.ref=(new Date).getTime()+Math.floor(1e7*Math.random()+1),t.children[u.ref]=u;var f,v={body:document.querySelector("body"),overlay:document.createElement("div"),toast:document.createElement("div"),toastBody:document.createElement("div"),toastTexts:document.createElement("div"),toastCapsule:document.createElement("div"),cover:document.createElement("div"),buttons:document.createElement("div"),inputs:document.createElement("div"),icon:u.iconUrl?document.createElement("img"):document.createElement("i"),wrapper:null};v.toast.setAttribute("data-iziToast-ref",u.ref),v.toast.appendChild(v.toastBody),v.toastCapsule.appendChild(v.toast),function(){if(v.toast.classList.add(n),v.toast.classList.add(n+"-opening"),v.toastCapsule.classList.add(n+"-capsule"),v.toastBody.classList.add(n+"-body"),v.toastTexts.classList.add(n+"-texts"),o||window.innerWidth<=l?u.transitionInMobile&&v.toast.classList.add(u.transitionInMobile):u.transitionIn&&v.toast.classList.add(u.transitionIn),u.class){var e=u.class.split(" ");p(e,(function(e,t){v.toast.classList.add(e)}))}var t;u.id&&(v.toast.id=u.id),u.rtl&&(v.toast.classList.add(n+"-rtl"),v.toast.setAttribute("dir","rtl")),u.layout>1&&v.toast.classList.add(n+"-layout"+u.layout),u.balloon&&v.toast.classList.add(n+"-balloon"),u.maxWidth&&(isNaN(u.maxWidth)?v.toast.style.maxWidth=u.maxWidth:v.toast.style.maxWidth=u.maxWidth+"px"),""===u.theme&&"light"===u.theme||v.toast.classList.add(n+"-theme-"+u.theme),u.color&&("#"==(t=u.color).substring(0,1)||"rgb"==t.substring(0,3)||"hsl"==t.substring(0,3)?v.toast.style.background=u.color:v.toast.classList.add(n+"-color-"+u.color)),u.backgroundColor&&(v.toast.style.background=u.backgroundColor,u.balloon&&(v.toast.style.borderColor=u.backgroundColor))}(),u.image&&(v.cover.classList.add(n+"-cover"),v.cover.style.width=u.imageWidth+"px",function(e){try{return btoa(atob(e))==e}catch(e){return!1}}(u.image.replace(/ /g,""))?v.cover.style.backgroundImage="url(data:image/png;base64,"+u.image.replace(/ /g,"")+")":v.cover.style.backgroundImage="url("+u.image+")",u.rtl?v.toastBody.style.marginRight=u.imageWidth+10+"px":v.toastBody.style.marginLeft=u.imageWidth+10+"px",v.toast.appendChild(v.cover)),u.close?(v.buttonClose=document.createElement("button"),v.buttonClose.type="button",v.buttonClose.classList.add(n+"-close"),v.buttonClose.addEventListener("click",(function(e){e.target,s.hide(u,v.toast,"button")})),v.toast.appendChild(v.buttonClose)):u.rtl?v.toast.style.paddingLeft="18px":v.toast.style.paddingRight="18px",u.progressBar&&(v.progressBar=document.createElement("div"),v.progressBarDiv=document.createElement("div"),v.progressBar.classList.add(n+"-progressbar"),v.progressBarDiv.style.background=u.progressBarColor,v.progressBar.appendChild(v.progressBarDiv),v.toast.appendChild(v.progressBar)),u.timeout&&(u.pauseOnHover&&!u.resetOnHover&&(v.toast.addEventListener("mouseenter",(function(e){s.progress(u,v.toast).pause()})),v.toast.addEventListener("mouseleave",(function(e){s.progress(u,v.toast).resume()}))),u.resetOnHover&&(v.toast.addEventListener("mouseenter",(function(e){s.progress(u,v.toast).reset()})),v.toast.addEventListener("mouseleave",(function(e){s.progress(u,v.toast).start()})))),u.iconUrl?(v.icon.setAttribute("class",n+"-icon"),v.icon.setAttribute("src",u.iconUrl)):u.icon&&(v.icon.setAttribute("class",n+"-icon "+u.icon),u.iconText&&v.icon.appendChild(document.createTextNode(u.iconText)),u.iconColor&&(v.icon.style.color=u.iconColor)),(u.icon||u.iconUrl)&&(u.rtl?v.toastBody.style.paddingRight="33px":v.toastBody.style.paddingLeft="33px",v.toastBody.appendChild(v.icon)),u.title.length>0&&(v.strong=document.createElement("strong"),v.strong.classList.add(n+"-title"),v.strong.appendChild(m(u.title)),v.toastTexts.appendChild(v.strong),u.titleColor&&(v.strong.style.color=u.titleColor),u.titleSize&&(isNaN(u.titleSize)?v.strong.style.fontSize=u.titleSize:v.strong.style.fontSize=u.titleSize+"px"),u.titleLineHeight&&(isNaN(u.titleSize)?v.strong.style.lineHeight=u.titleLineHeight:v.strong.style.lineHeight=u.titleLineHeight+"px")),u.message.length>0&&(v.p=document.createElement("p"),v.p.classList.add(n+"-message"),v.p.appendChild(m(u.message)),v.toastTexts.appendChild(v.p),u.messageColor&&(v.p.style.color=u.messageColor),u.messageSize&&(isNaN(u.titleSize)?v.p.style.fontSize=u.messageSize:v.p.style.fontSize=u.messageSize+"px"),u.messageLineHeight&&(isNaN(u.titleSize)?v.p.style.lineHeight=u.messageLineHeight:v.p.style.lineHeight=u.messageLineHeight+"px")),u.title.length>0&&u.message.length>0&&(u.rtl?v.strong.style.marginLeft="10px":2===u.layout||u.rtl||(v.strong.style.marginRight="10px")),v.toastBody.appendChild(v.toastTexts),u.inputs.length>0&&(v.inputs.classList.add(n+"-inputs"),p(u.inputs,(function(e,t){v.inputs.appendChild(m(e[0])),(f=v.inputs.childNodes)[t].classList.add(n+"-inputs-child"),e[3]&&setTimeout((function(){f[t].focus()}),300),f[t].addEventListener(e[1],(function(t){return(0,e[2])(s,v.toast,this,t)}))})),v.toastBody.appendChild(v.inputs)),u.buttons.length>0&&(v.buttons.classList.add(n+"-buttons"),p(u.buttons,(function(e,t){v.buttons.appendChild(m(e[0]));var o=v.buttons.childNodes;o[t].classList.add(n+"-buttons-child"),e[2]&&setTimeout((function(){o[t].focus()}),300),o[t].addEventListener("click",(function(t){return t.preventDefault(),(0,e[1])(s,v.toast,this,t,f)}))}))),v.toastBody.appendChild(v.buttons),u.message.length>0&&(u.inputs.length>0||u.buttons.length>0)&&(v.p.style.marginBottom="0"),(u.inputs.length>0||u.buttons.length>0)&&(u.rtl?v.toastTexts.style.marginLeft="10px":v.toastTexts.style.marginRight="10px",u.inputs.length>0&&u.buttons.length>0&&(u.rtl?v.inputs.style.marginLeft="8px":v.inputs.style.marginRight="8px")),v.toastCapsule.style.visibility="hidden",setTimeout((function(){var e=v.toast.offsetHeight,t=v.toast.currentStyle||window.getComputedStyle(v.toast),n=t.marginTop;n=n.split("px"),n=parseInt(n[0]);var o=t.marginBottom;o=o.split("px"),o=parseInt(o[0]),v.toastCapsule.style.visibility="",v.toastCapsule.style.height=e+o+n+"px",setTimeout((function(){v.toastCapsule.style.height="auto",u.target&&(v.toastCapsule.style.overflow="visible")}),500),u.timeout&&s.progress(u,v.toast).start()}),100),function(){var e=u.position;if(u.target)v.wrapper=document.querySelector(u.target),v.wrapper.classList.add(n+"-target"),u.targetFirst?v.wrapper.insertBefore(v.toastCapsule,v.wrapper.firstChild):v.wrapper.appendChild(v.toastCapsule);else{if(-1==a.indexOf(u.position))return void console.warn("["+n+"] Incorrect position.\nIt can be › "+a);e=o||window.innerWidth<=l?"bottomLeft"==u.position||"bottomRight"==u.position||"bottomCenter"==u.position?n+"-wrapper-bottomCenter":"topLeft"==u.position||"topRight"==u.position||"topCenter"==u.position?n+"-wrapper-topCenter":n+"-wrapper-center":n+"-wrapper-"+e,v.wrapper=document.querySelector("."+n+"-wrapper."+e),v.wrapper||(v.wrapper=document.createElement("div"),v.wrapper.classList.add(n+"-wrapper"),v.wrapper.classList.add(e),document.body.appendChild(v.wrapper)),"topLeft"==u.position||"topCenter"==u.position||"topRight"==u.position?v.wrapper.insertBefore(v.toastCapsule,v.wrapper.firstChild):v.wrapper.appendChild(v.toastCapsule)}isNaN(u.zindex)?console.warn("["+n+"] Invalid zIndex."):v.wrapper.style.zIndex=u.zindex}(),u.overlay&&(null!==document.querySelector("."+n+"-overlay.fadeIn")?(v.overlay=document.querySelector("."+n+"-overlay"),v.overlay.setAttribute("data-iziToast-ref",v.overlay.getAttribute("data-iziToast-ref")+","+u.ref),isNaN(u.zindex)||null===u.zindex||(v.overlay.style.zIndex=u.zindex-1)):(v.overlay.classList.add(n+"-overlay"),v.overlay.classList.add("fadeIn"),v.overlay.style.background=u.overlayColor,v.overlay.setAttribute("data-iziToast-ref",u.ref),isNaN(u.zindex)||null===u.zindex||(v.overlay.style.zIndex=u.zindex-1),document.querySelector("body").appendChild(v.overlay)),u.overlayClose?(v.overlay.removeEventListener("click",{}),v.overlay.addEventListener("click",(function(e){s.hide(u,v.toast,"overlay")}))):v.overlay.removeEventListener("click",{})),function(){if(u.animateInside){v.toast.classList.add(n+"-animateInside");var e=[200,100,300];"bounceInLeft"!=u.transitionIn&&"bounceInRight"!=u.transitionIn||(e=[400,200,400]),u.title.length>0&&setTimeout((function(){v.strong.classList.add("slideIn")}),e[0]),u.message.length>0&&setTimeout((function(){v.p.classList.add("slideIn")}),e[1]),(u.icon||u.iconUrl)&&setTimeout((function(){v.icon.classList.add("revealIn")}),e[2]);var t=150;u.buttons.length>0&&v.buttons&&setTimeout((function(){p(v.buttons.childNodes,(function(e,n){setTimeout((function(){e.classList.add("revealIn")}),t),t+=150}))}),u.inputs.length>0?150:0),u.inputs.length>0&&v.inputs&&(t=150,p(v.inputs.childNodes,(function(e,n){setTimeout((function(){e.classList.add("revealIn")}),t),t+=150})))}}(),u.onOpening.apply(null,[u,v.toast]);try{var y=new CustomEvent(n+"-opening",{detail:u,bubbles:!0,cancelable:!0});document.dispatchEvent(y)}catch(e){console.warn(e)}setTimeout((function(){v.toast.classList.remove(n+"-opening"),v.toast.classList.add(n+"-opened");try{var e=new CustomEvent(n+"-opened",{detail:u,bubbles:!0,cancelable:!0});document.dispatchEvent(e)}catch(e){console.warn(e)}u.onOpened.apply(null,[u,v.toast])}),1e3),u.drag&&(r?(v.toast.addEventListener("touchstart",(function(e){g.startMoving(this,s,u,e)}),!1),v.toast.addEventListener("touchend",(function(e){g.stopMoving(this,e)}),!1)):(v.toast.addEventListener("mousedown",(function(e){e.preventDefault(),g.startMoving(this,s,u,e)}),!1),v.toast.addEventListener("mouseup",(function(e){e.preventDefault(),g.stopMoving(this,e)}),!1))),u.closeOnEscape&&document.addEventListener("keyup",(function(e){27==(e=e||window.event).keyCode&&s.hide(u,v.toast,"esc")})),u.closeOnClick&&v.toast.addEventListener("click",(function(e){s.hide(u,v.toast,"toast")})),s.toast=v.toast},t}())?o.apply(t,i):o)||(e.exports=s)},9983:(e,t,n)=>{var o,i,s;i=[n(1669),n(6883)],void 0===(s="function"==typeof(o=function(e){return e.extend(e.expr[":"],{data:e.expr.createPseudo?e.expr.createPseudo((function(t){return function(n){return!!e.data(n,t)}})):function(t,n,o){return!!e.data(t,o[3])}})})?o.apply(t,i):o)||(e.exports=s)},1052:(e,t,n)=>{var o,i,s;i=[n(1669),n(6883)],void 0===(s="function"==typeof(o=function(e){return e.ui.escapeSelector=(t=/([!"#$%&'()*+,./:;<=>?@[\]^`{|}~])/g,function(e){return e.replace(t,"\\$1")});var t})?o.apply(t,i):o)||(e.exports=s)},8045:(e,t,n)=>{var o,i,s;i=[n(1669),n(6883)],void 0===(s="function"==typeof(o=function(e){return e.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase())})?o.apply(t,i):o)||(e.exports=s)},1897:(e,t,n)=>{var o,i,s;i=[n(1669),n(6883)],void 0===(s="function"==typeof(o=function(e){return e.ui.keyCode={BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}})?o.apply(t,i):o)||(e.exports=s)},3300:(e,t,n)=>{var o,i,s;i=[n(1669),n(6883)],void 0===(s="function"==typeof(o=function(e){return e.ui.safeActiveElement=function(e){var t;try{t=e.activeElement}catch(n){t=e.body}return t||(t=e.body),t.nodeName||(t=e.body),t}})?o.apply(t,i):o)||(e.exports=s)},2299:(e,t,n)=>{var o,i,s;i=[n(1669),n(6883)],void 0===(s="function"==typeof(o=function(e){return e.fn.scrollParent=function(t){var n=this.css("position"),o="absolute"===n,i=t?/(auto|scroll|hidden)/:/(auto|scroll)/,s=this.parents().filter((function(){var t=e(this);return(!o||"static"!==t.css("position"))&&i.test(t.css("overflow")+t.css("overflow-y")+t.css("overflow-x"))})).eq(0);return"fixed"!==n&&s.length?s:e(this[0].ownerDocument||document)}})?o.apply(t,i):o)||(e.exports=s)},5304:(e,t,n)=>{var o,i,s;i=[n(1669),n(6883)],void 0===(s="function"==typeof(o=function(e){return e.fn.extend({uniqueId:(t=0,function(){return this.each((function(){this.id||(this.id="ui-id-"+ ++t)}))}),removeUniqueId:function(){return this.each((function(){/^ui-id-\d+$/.test(this.id)&&e(this).removeAttr("id")}))}});var t})?o.apply(t,i):o)||(e.exports=s)},6883:(e,t,n)=>{var o,i,s;i=[n(1669)],void 0===(s="function"==typeof(o=function(e){return e.ui=e.ui||{},e.ui.version="1.12.1"})?o.apply(t,i):o)||(e.exports=s)},9139:(e,t,n)=>{var o,i,s;i=[n(1669),n(6883)],void 0===(s="function"==typeof(o=function(e){var t,n=0,o=Array.prototype.slice;return e.cleanData=(t=e.cleanData,function(n){var o,i,s;for(s=0;null!=(i=n[s]);s++)try{(o=e._data(i,"events"))&&o.remove&&e(i).triggerHandler("remove")}catch(e){}t(n)}),e.widget=function(t,n,o){var i,s,r,a={},l=t.split(".")[0],c=l+"-"+(t=t.split(".")[1]);return o||(o=n,n=e.Widget),e.isArray(o)&&(o=e.extend.apply(null,[{}].concat(o))),e.expr[":"][c.toLowerCase()]=function(t){return!!e.data(t,c)},e[l]=e[l]||{},i=e[l][t],s=e[l][t]=function(e,t){if(!this._createWidget)return new s(e,t);arguments.length&&this._createWidget(e,t)},e.extend(s,i,{version:o.version,_proto:e.extend({},o),_childConstructors:[]}),(r=new n).options=e.widget.extend({},r.options),e.each(o,(function(t,o){e.isFunction(o)?a[t]=function(){function e(){return n.prototype[t].apply(this,arguments)}function i(e){return n.prototype[t].apply(this,e)}return function(){var t,n=this._super,s=this._superApply;return this._super=e,this._superApply=i,t=o.apply(this,arguments),this._super=n,this._superApply=s,t}}():a[t]=o})),s.prototype=e.widget.extend(r,{widgetEventPrefix:i&&r.widgetEventPrefix||t},a,{constructor:s,namespace:l,widgetName:t,widgetFullName:c}),i?(e.each(i._childConstructors,(function(t,n){var o=n.prototype;e.widget(o.namespace+"."+o.widgetName,s,n._proto)})),delete i._childConstructors):n._childConstructors.push(s),e.widget.bridge(t,s),s},e.widget.extend=function(t){for(var n,i,s=o.call(arguments,1),r=0,a=s.length;r<a;r++)for(n in s[r])i=s[r][n],s[r].hasOwnProperty(n)&&void 0!==i&&(e.isPlainObject(i)?t[n]=e.isPlainObject(t[n])?e.widget.extend({},t[n],i):e.widget.extend({},i):t[n]=i);return t},e.widget.bridge=function(t,n){var i=n.prototype.widgetFullName||t;e.fn[t]=function(s){var r="string"==typeof s,a=o.call(arguments,1),l=this;return r?this.length||"instance"!==s?this.each((function(){var n,o=e.data(this,i);return"instance"===s?(l=o,!1):o?e.isFunction(o[s])&&"_"!==s.charAt(0)?(n=o[s].apply(o,a))!==o&&void 0!==n?(l=n&&n.jquery?l.pushStack(n.get()):n,!1):void 0:e.error("no such method '"+s+"' for "+t+" widget instance"):e.error("cannot call methods on "+t+" prior to initialization; attempted to call method '"+s+"'")})):l=void 0:(a.length&&(s=e.widget.extend.apply(null,[s].concat(a))),this.each((function(){var t=e.data(this,i);t?(t.option(s||{}),t._init&&t._init()):e.data(this,i,new n(s,this))}))),l}},e.Widget=function(){},e.Widget._childConstructors=[],e.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{classes:{},disabled:!1,create:null},_createWidget:function(t,o){o=e(o||this.defaultElement||this)[0],this.element=e(o),this.uuid=n++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=e(),this.hoverable=e(),this.focusable=e(),this.classesElementLookup={},o!==this&&(e.data(o,this.widgetFullName,this),this._on(!0,this.element,{remove:function(e){e.target===o&&this.destroy()}}),this.document=e(o.style?o.ownerDocument:o.document||o),this.window=e(this.document[0].defaultView||this.document[0].parentWindow)),this.options=e.widget.extend({},this.options,this._getCreateOptions(),t),this._create(),this.options.disabled&&this._setOptionDisabled(this.options.disabled),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:function(){return{}},_getCreateEventData:e.noop,_create:e.noop,_init:e.noop,destroy:function(){var t=this;this._destroy(),e.each(this.classesElementLookup,(function(e,n){t._removeClass(n,e)})),this.element.off(this.eventNamespace).removeData(this.widgetFullName),this.widget().off(this.eventNamespace).removeAttr("aria-disabled"),this.bindings.off(this.eventNamespace)},_destroy:e.noop,widget:function(){return this.element},option:function(t,n){var o,i,s,r=t;if(0===arguments.length)return e.widget.extend({},this.options);if("string"==typeof t)if(r={},o=t.split("."),t=o.shift(),o.length){for(i=r[t]=e.widget.extend({},this.options[t]),s=0;s<o.length-1;s++)i[o[s]]=i[o[s]]||{},i=i[o[s]];if(t=o.pop(),1===arguments.length)return void 0===i[t]?null:i[t];i[t]=n}else{if(1===arguments.length)return void 0===this.options[t]?null:this.options[t];r[t]=n}return this._setOptions(r),this},_setOptions:function(e){var t;for(t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return"classes"===e&&this._setOptionClasses(t),this.options[e]=t,"disabled"===e&&this._setOptionDisabled(t),this},_setOptionClasses:function(t){var n,o,i;for(n in t)i=this.classesElementLookup[n],t[n]!==this.options.classes[n]&&i&&i.length&&(o=e(i.get()),this._removeClass(i,n),o.addClass(this._classes({element:o,keys:n,classes:t,add:!0})))},_setOptionDisabled:function(e){this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,!!e),e&&(this._removeClass(this.hoverable,null,"ui-state-hover"),this._removeClass(this.focusable,null,"ui-state-focus"))},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_classes:function(t){var n=[],o=this;function i(i,s){var r,a;for(a=0;a<i.length;a++)r=o.classesElementLookup[i[a]]||e(),r=t.add?e(e.unique(r.get().concat(t.element.get()))):e(r.not(t.element).get()),o.classesElementLookup[i[a]]=r,n.push(i[a]),s&&t.classes[i[a]]&&n.push(t.classes[i[a]])}return t=e.extend({element:this.element,classes:this.options.classes||{}},t),this._on(t.element,{remove:"_untrackClassesElement"}),t.keys&&i(t.keys.match(/\S+/g)||[],!0),t.extra&&i(t.extra.match(/\S+/g)||[]),n.join(" ")},_untrackClassesElement:function(t){var n=this;e.each(n.classesElementLookup,(function(o,i){-1!==e.inArray(t.target,i)&&(n.classesElementLookup[o]=e(i.not(t.target).get()))}))},_removeClass:function(e,t,n){return this._toggleClass(e,t,n,!1)},_addClass:function(e,t,n){return this._toggleClass(e,t,n,!0)},_toggleClass:function(e,t,n,o){o="boolean"==typeof o?o:n;var i="string"==typeof e||null===e,s={extra:i?t:n,keys:i?e:t,element:i?this.element:e,add:o};return s.element.toggleClass(this._classes(s),o),this},_on:function(t,n,o){var i,s=this;"boolean"!=typeof t&&(o=n,n=t,t=!1),o?(n=i=e(n),this.bindings=this.bindings.add(n)):(o=n,n=this.element,i=this.widget()),e.each(o,(function(o,r){function a(){if(t||!0!==s.options.disabled&&!e(this).hasClass("ui-state-disabled"))return("string"==typeof r?s[r]:r).apply(s,arguments)}"string"!=typeof r&&(a.guid=r.guid=r.guid||a.guid||e.guid++);var l=o.match(/^([\w:-]*)\s*(.*)$/),c=l[1]+s.eventNamespace,d=l[2];d?i.on(c,d,a):n.on(c,a)}))},_off:function(t,n){n=(n||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,t.off(n).off(n),this.bindings=e(this.bindings.not(t).get()),this.focusable=e(this.focusable.not(t).get()),this.hoverable=e(this.hoverable.not(t).get())},_delay:function(e,t){var n=this;return setTimeout((function(){return("string"==typeof e?n[e]:e).apply(n,arguments)}),t||0)},_hoverable:function(t){this.hoverable=this.hoverable.add(t),this._on(t,{mouseenter:function(t){this._addClass(e(t.currentTarget),null,"ui-state-hover")},mouseleave:function(t){this._removeClass(e(t.currentTarget),null,"ui-state-hover")}})},_focusable:function(t){this.focusable=this.focusable.add(t),this._on(t,{focusin:function(t){this._addClass(e(t.currentTarget),null,"ui-state-focus")},focusout:function(t){this._removeClass(e(t.currentTarget),null,"ui-state-focus")}})},_trigger:function(t,n,o){var i,s,r=this.options[t];if(o=o||{},(n=e.Event(n)).type=(t===this.widgetEventPrefix?t:this.widgetEventPrefix+t).toLowerCase(),n.target=this.element[0],s=n.originalEvent)for(i in s)i in n||(n[i]=s[i]);return this.element.trigger(n,o),!(e.isFunction(r)&&!1===r.apply(this.element[0],[n].concat(o))||n.isDefaultPrevented())}},e.each({show:"fadeIn",hide:"fadeOut"},(function(t,n){e.Widget.prototype["_"+t]=function(o,i,s){var r;"string"==typeof i&&(i={effect:i});var a=i?!0===i||"number"==typeof i?n:i.effect||n:t;"number"==typeof(i=i||{})&&(i={duration:i}),r=!e.isEmptyObject(i),i.complete=s,i.delay&&o.delay(i.delay),r&&e.effects&&e.effects.effect[a]?o[t](i):a!==t&&o[a]?o[a](i.duration,i.easing,s):o.queue((function(n){e(this)[t](),s&&s.call(o[0]),n()}))}})),e.widget})?o.apply(t,i):o)||(e.exports=s)},3662:(e,t,n)=>{var o,i,s;i=[n(1669),n(8045),n(6883),n(9139)],void 0===(s="function"==typeof(o=function(e){var t=!1;return e(document).on("mouseup",(function(){t=!1})),e.widget("ui.mouse",{version:"1.12.1",options:{cancel:"input, textarea, button, select, option",distance:1,delay:0},_mouseInit:function(){var t=this;this.element.on("mousedown."+this.widgetName,(function(e){return t._mouseDown(e)})).on("click."+this.widgetName,(function(n){if(!0===e.data(n.target,t.widgetName+".preventClickEvent"))return e.removeData(n.target,t.widgetName+".preventClickEvent"),n.stopImmediatePropagation(),!1})),this.started=!1},_mouseDestroy:function(){this.element.off("."+this.widgetName),this._mouseMoveDelegate&&this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(n){if(!t){this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(n),this._mouseDownEvent=n;var o=this,i=1===n.which,s=!("string"!=typeof this.options.cancel||!n.target.nodeName)&&e(n.target).closest(this.options.cancel).length;return!(i&&!s&&this._mouseCapture(n)&&(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout((function(){o.mouseDelayMet=!0}),this.options.delay)),this._mouseDistanceMet(n)&&this._mouseDelayMet(n)&&(this._mouseStarted=!1!==this._mouseStart(n),!this._mouseStarted)?(n.preventDefault(),0):(!0===e.data(n.target,this.widgetName+".preventClickEvent")&&e.removeData(n.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(e){return o._mouseMove(e)},this._mouseUpDelegate=function(e){return o._mouseUp(e)},this.document.on("mousemove."+this.widgetName,this._mouseMoveDelegate).on("mouseup."+this.widgetName,this._mouseUpDelegate),n.preventDefault(),t=!0,0)))}},_mouseMove:function(t){if(this._mouseMoved){if(e.ui.ie&&(!document.documentMode||document.documentMode<9)&&!t.button)return this._mouseUp(t);if(!t.which)if(t.originalEvent.altKey||t.originalEvent.ctrlKey||t.originalEvent.metaKey||t.originalEvent.shiftKey)this.ignoreMissingWhich=!0;else if(!this.ignoreMissingWhich)return this._mouseUp(t)}return(t.which||t.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(t),t.preventDefault()):(this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=!1!==this._mouseStart(this._mouseDownEvent,t),this._mouseStarted?this._mouseDrag(t):this._mouseUp(t)),!this._mouseStarted)},_mouseUp:function(n){this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,n.target===this._mouseDownEvent.target&&e.data(n.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(n)),this._mouseDelayTimer&&(clearTimeout(this._mouseDelayTimer),delete this._mouseDelayTimer),this.ignoreMissingWhich=!1,t=!1,n.preventDefault()},_mouseDistanceMet:function(e){return Math.max(Math.abs(this._mouseDownEvent.pageX-e.pageX),Math.abs(this._mouseDownEvent.pageY-e.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}})})?o.apply(t,i):o)||(e.exports=s)},5285:(e,t,n)=>{var o,i,s;i=[n(1669),n(3662),n(9983),n(8045),n(2299),n(6883),n(9139)],void 0===(s="function"==typeof(o=function(e){return e.widget("ui.sortable",e.ui.mouse,{version:"1.12.1",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function(e,t,n){return e>=t&&e<t+n},_isFloating:function(e){return/left|right/.test(e.css("float"))||/inline|table-cell/.test(e.css("display"))},_create:function(){this.containerCache={},this._addClass("ui-sortable"),this.refresh(),this.offset=this.element.offset(),this._mouseInit(),this._setHandleClassName(),this.ready=!0},_setOption:function(e,t){this._super(e,t),"handle"===e&&this._setHandleClassName()},_setHandleClassName:function(){var t=this;this._removeClass(this.element.find(".ui-sortable-handle"),"ui-sortable-handle"),e.each(this.items,(function(){t._addClass(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item,"ui-sortable-handle")}))},_destroy:function(){this._mouseDestroy();for(var e=this.items.length-1;e>=0;e--)this.items[e].item.removeData(this.widgetName+"-item");return this},_mouseCapture:function(t,n){var o=null,i=!1,s=this;return!(this.reverting||this.options.disabled||"static"===this.options.type||(this._refreshItems(t),e(t.target).parents().each((function(){if(e.data(this,s.widgetName+"-item")===s)return o=e(this),!1})),e.data(t.target,s.widgetName+"-item")===s&&(o=e(t.target)),!o||this.options.handle&&!n&&(e(this.options.handle,o).find("*").addBack().each((function(){this===t.target&&(i=!0)})),!i)||(this.currentItem=o,this._removeCurrentsFromItems(),0)))},_mouseStart:function(t,n,o){var i,s,r=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(t),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},e.extend(this.offset,{click:{left:t.pageX-this.offset.left,top:t.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(t),this.originalPageX=t.pageX,this.originalPageY=t.pageY,r.cursorAt&&this._adjustOffsetFromHelper(r.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),r.containment&&this._setContainment(),r.cursor&&"auto"!==r.cursor&&(s=this.document.find("body"),this.storedCursor=s.css("cursor"),s.css("cursor",r.cursor),this.storedStylesheet=e("<style>*{ cursor: "+r.cursor+" !important; }</style>").appendTo(s)),r.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",r.opacity)),r.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",r.zIndex)),this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",t,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!o)for(i=this.containers.length-1;i>=0;i--)this.containers[i]._trigger("activate",t,this._uiHash(this));return e.ui.ddmanager&&(e.ui.ddmanager.current=this),e.ui.ddmanager&&!r.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t),this.dragging=!0,this._addClass(this.helper,"ui-sortable-helper"),this._mouseDrag(t),!0},_mouseDrag:function(t){var n,o,i,s,r=this.options,a=!1;for(this.position=this._generatePosition(t),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-t.pageY<r.scrollSensitivity?this.scrollParent[0].scrollTop=a=this.scrollParent[0].scrollTop+r.scrollSpeed:t.pageY-this.overflowOffset.top<r.scrollSensitivity&&(this.scrollParent[0].scrollTop=a=this.scrollParent[0].scrollTop-r.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-t.pageX<r.scrollSensitivity?this.scrollParent[0].scrollLeft=a=this.scrollParent[0].scrollLeft+r.scrollSpeed:t.pageX-this.overflowOffset.left<r.scrollSensitivity&&(this.scrollParent[0].scrollLeft=a=this.scrollParent[0].scrollLeft-r.scrollSpeed)):(t.pageY-this.document.scrollTop()<r.scrollSensitivity?a=this.document.scrollTop(this.document.scrollTop()-r.scrollSpeed):this.window.height()-(t.pageY-this.document.scrollTop())<r.scrollSensitivity&&(a=this.document.scrollTop(this.document.scrollTop()+r.scrollSpeed)),t.pageX-this.document.scrollLeft()<r.scrollSensitivity?a=this.document.scrollLeft(this.document.scrollLeft()-r.scrollSpeed):this.window.width()-(t.pageX-this.document.scrollLeft())<r.scrollSensitivity&&(a=this.document.scrollLeft(this.document.scrollLeft()+r.scrollSpeed))),!1!==a&&e.ui.ddmanager&&!r.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),n=this.items.length-1;n>=0;n--)if(i=(o=this.items[n]).item[0],(s=this._intersectsWithPointer(o))&&o.instance===this.currentContainer&&!(i===this.currentItem[0]||this.placeholder[1===s?"next":"prev"]()[0]===i||e.contains(this.placeholder[0],i)||"semi-dynamic"===this.options.type&&e.contains(this.element[0],i))){if(this.direction=1===s?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(o))break;this._rearrange(t,o),this._trigger("change",t,this._uiHash());break}return this._contactContainers(t),e.ui.ddmanager&&e.ui.ddmanager.drag(this,t),this._trigger("sort",t,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(t,n){if(t){if(e.ui.ddmanager&&!this.options.dropBehaviour&&e.ui.ddmanager.drop(this,t),this.options.revert){var o=this,i=this.placeholder.offset(),s=this.options.axis,r={};s&&"x"!==s||(r.left=i.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollLeft)),s&&"y"!==s||(r.top=i.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,e(this.helper).animate(r,parseInt(this.options.revert,10)||500,(function(){o._clear(t)}))}else this._clear(t,n);return!1}},cancel:function(){if(this.dragging){this._mouseUp(new e.Event("mouseup",{target:null})),"original"===this.options.helper?(this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")):this.currentItem.show();for(var t=this.containers.length-1;t>=0;t--)this.containers[t]._trigger("deactivate",null,this._uiHash(this)),this.containers[t].containerCache.over&&(this.containers[t]._trigger("out",null,this._uiHash(this)),this.containers[t].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),e.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?e(this.domPosition.prev).after(this.currentItem):e(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(t){var n=this._getItemsAsjQuery(t&&t.connected),o=[];return t=t||{},e(n).each((function(){var n=(e(t.item||this).attr(t.attribute||"id")||"").match(t.expression||/(.+)[\-=_](.+)/);n&&o.push((t.key||n[1]+"[]")+"="+(t.key&&t.expression?n[1]:n[2]))})),!o.length&&t.key&&o.push(t.key+"="),o.join("&")},toArray:function(t){var n=this._getItemsAsjQuery(t&&t.connected),o=[];return t=t||{},n.each((function(){o.push(e(t.item||this).attr(t.attribute||"id")||"")})),o},_intersectsWith:function(e){var t=this.positionAbs.left,n=t+this.helperProportions.width,o=this.positionAbs.top,i=o+this.helperProportions.height,s=e.left,r=s+e.width,a=e.top,l=a+e.height,c=this.offset.click.top,d=this.offset.click.left,u="x"===this.options.axis||o+c>a&&o+c<l,p="y"===this.options.axis||t+d>s&&t+d<r,h=u&&p;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>e[this.floating?"width":"height"]?h:s<t+this.helperProportions.width/2&&n-this.helperProportions.width/2<r&&a<o+this.helperProportions.height/2&&i-this.helperProportions.height/2<l},_intersectsWithPointer:function(e){var t,n,o="x"===this.options.axis||this._isOverAxis(this.positionAbs.top+this.offset.click.top,e.top,e.height),i="y"===this.options.axis||this._isOverAxis(this.positionAbs.left+this.offset.click.left,e.left,e.width);return!(!o||!i)&&(t=this._getDragVerticalDirection(),n=this._getDragHorizontalDirection(),this.floating?"right"===n||"down"===t?2:1:t&&("down"===t?2:1))},_intersectsWithSides:function(e){var t=this._isOverAxis(this.positionAbs.top+this.offset.click.top,e.top+e.height/2,e.height),n=this._isOverAxis(this.positionAbs.left+this.offset.click.left,e.left+e.width/2,e.width),o=this._getDragVerticalDirection(),i=this._getDragHorizontalDirection();return this.floating&&i?"right"===i&&n||"left"===i&&!n:o&&("down"===o&&t||"up"===o&&!t)},_getDragVerticalDirection:function(){var e=this.positionAbs.top-this.lastPositionAbs.top;return 0!==e&&(e>0?"down":"up")},_getDragHorizontalDirection:function(){var e=this.positionAbs.left-this.lastPositionAbs.left;return 0!==e&&(e>0?"right":"left")},refresh:function(e){return this._refreshItems(e),this._setHandleClassName(),this.refreshPositions(),this},_connectWith:function(){var e=this.options;return e.connectWith.constructor===String?[e.connectWith]:e.connectWith},_getItemsAsjQuery:function(t){var n,o,i,s,r=[],a=[],l=this._connectWith();if(l&&t)for(n=l.length-1;n>=0;n--)for(o=(i=e(l[n],this.document[0])).length-1;o>=0;o--)(s=e.data(i[o],this.widgetFullName))&&s!==this&&!s.options.disabled&&a.push([e.isFunction(s.options.items)?s.options.items.call(s.element):e(s.options.items,s.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),s]);function c(){r.push(this)}for(a.push([e.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):e(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),n=a.length-1;n>=0;n--)a[n][0].each(c);return e(r)},_removeCurrentsFromItems:function(){var t=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=e.grep(this.items,(function(e){for(var n=0;n<t.length;n++)if(t[n]===e.item[0])return!1;return!0}))},_refreshItems:function(t){this.items=[],this.containers=[this];var n,o,i,s,r,a,l,c,d=this.items,u=[[e.isFunction(this.options.items)?this.options.items.call(this.element[0],t,{item:this.currentItem}):e(this.options.items,this.element),this]],p=this._connectWith();if(p&&this.ready)for(n=p.length-1;n>=0;n--)for(o=(i=e(p[n],this.document[0])).length-1;o>=0;o--)(s=e.data(i[o],this.widgetFullName))&&s!==this&&!s.options.disabled&&(u.push([e.isFunction(s.options.items)?s.options.items.call(s.element[0],t,{item:this.currentItem}):e(s.options.items,s.element),s]),this.containers.push(s));for(n=u.length-1;n>=0;n--)for(r=u[n][1],o=0,c=(a=u[n][0]).length;o<c;o++)(l=e(a[o])).data(this.widgetName+"-item",r),d.push({item:l,instance:r,width:0,height:0,left:0,top:0})},refreshPositions:function(t){var n,o,i,s;for(this.floating=!!this.items.length&&("x"===this.options.axis||this._isFloating(this.items[0].item)),this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset()),n=this.items.length-1;n>=0;n--)(o=this.items[n]).instance!==this.currentContainer&&this.currentContainer&&o.item[0]!==this.currentItem[0]||(i=this.options.toleranceElement?e(this.options.toleranceElement,o.item):o.item,t||(o.width=i.outerWidth(),o.height=i.outerHeight()),s=i.offset(),o.left=s.left,o.top=s.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(n=this.containers.length-1;n>=0;n--)s=this.containers[n].element.offset(),this.containers[n].containerCache.left=s.left,this.containers[n].containerCache.top=s.top,this.containers[n].containerCache.width=this.containers[n].element.outerWidth(),this.containers[n].containerCache.height=this.containers[n].element.outerHeight();return this},_createPlaceholder:function(t){var n,o=(t=t||this).options;o.placeholder&&o.placeholder.constructor!==String||(n=o.placeholder,o.placeholder={element:function(){var o=t.currentItem[0].nodeName.toLowerCase(),i=e("<"+o+">",t.document[0]);return t._addClass(i,"ui-sortable-placeholder",n||t.currentItem[0].className)._removeClass(i,"ui-sortable-helper"),"tbody"===o?t._createTrPlaceholder(t.currentItem.find("tr").eq(0),e("<tr>",t.document[0]).appendTo(i)):"tr"===o?t._createTrPlaceholder(t.currentItem,i):"img"===o&&i.attr("src",t.currentItem.attr("src")),n||i.css("visibility","hidden"),i},update:function(e,i){n&&!o.forcePlaceholderSize||(i.height()||i.height(t.currentItem.innerHeight()-parseInt(t.currentItem.css("paddingTop")||0,10)-parseInt(t.currentItem.css("paddingBottom")||0,10)),i.width()||i.width(t.currentItem.innerWidth()-parseInt(t.currentItem.css("paddingLeft")||0,10)-parseInt(t.currentItem.css("paddingRight")||0,10)))}}),t.placeholder=e(o.placeholder.element.call(t.element,t.currentItem)),t.currentItem.after(t.placeholder),o.placeholder.update(t,t.placeholder)},_createTrPlaceholder:function(t,n){var o=this;t.children().each((function(){e("<td>&#160;</td>",o.document[0]).attr("colspan",e(this).attr("colspan")||1).appendTo(n)}))},_contactContainers:function(t){var n,o,i,s,r,a,l,c,d,u,p=null,h=null;for(n=this.containers.length-1;n>=0;n--)if(!e.contains(this.currentItem[0],this.containers[n].element[0]))if(this._intersectsWith(this.containers[n].containerCache)){if(p&&e.contains(this.containers[n].element[0],p.element[0]))continue;p=this.containers[n],h=n}else this.containers[n].containerCache.over&&(this.containers[n]._trigger("out",t,this._uiHash(this)),this.containers[n].containerCache.over=0);if(p)if(1===this.containers.length)this.containers[h].containerCache.over||(this.containers[h]._trigger("over",t,this._uiHash(this)),this.containers[h].containerCache.over=1);else{for(i=1e4,s=null,r=(d=p.floating||this._isFloating(this.currentItem))?"left":"top",a=d?"width":"height",u=d?"pageX":"pageY",o=this.items.length-1;o>=0;o--)e.contains(this.containers[h].element[0],this.items[o].item[0])&&this.items[o].item[0]!==this.currentItem[0]&&(l=this.items[o].item.offset()[r],c=!1,t[u]-l>this.items[o][a]/2&&(c=!0),Math.abs(t[u]-l)<i&&(i=Math.abs(t[u]-l),s=this.items[o],this.direction=c?"up":"down"));if(!s&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[h])return void(this.currentContainer.containerCache.over||(this.containers[h]._trigger("over",t,this._uiHash()),this.currentContainer.containerCache.over=1));s?this._rearrange(t,s,null,!0):this._rearrange(t,null,this.containers[h].element,!0),this._trigger("change",t,this._uiHash()),this.containers[h]._trigger("change",t,this._uiHash(this)),this.currentContainer=this.containers[h],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[h]._trigger("over",t,this._uiHash(this)),this.containers[h].containerCache.over=1}},_createHelper:function(t){var n=this.options,o=e.isFunction(n.helper)?e(n.helper.apply(this.element[0],[t,this.currentItem])):"clone"===n.helper?this.currentItem.clone():this.currentItem;return o.parents("body").length||e("parent"!==n.appendTo?n.appendTo:this.currentItem[0].parentNode)[0].appendChild(o[0]),o[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),o[0].style.width&&!n.forceHelperSize||o.width(this.currentItem.width()),o[0].style.height&&!n.forceHelperSize||o.height(this.currentItem.height()),o},_adjustOffsetFromHelper:function(t){"string"==typeof t&&(t=t.split(" ")),e.isArray(t)&&(t={left:+t[0],top:+t[1]||0}),"left"in t&&(this.offset.click.left=t.left+this.margins.left),"right"in t&&(this.offset.click.left=this.helperProportions.width-t.right+this.margins.left),"top"in t&&(this.offset.click.top=t.top+this.margins.top),"bottom"in t&&(this.offset.click.top=this.helperProportions.height-t.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var t=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])&&(t.left+=this.scrollParent.scrollLeft(),t.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===this.document[0].body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&e.ui.ie)&&(t={top:0,left:0}),{top:t.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:t.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var e=this.currentItem.position();return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:e.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var t,n,o,i=this.options;"parent"===i.containment&&(i.containment=this.helper[0].parentNode),"document"!==i.containment&&"window"!==i.containment||(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,"document"===i.containment?this.document.width():this.window.width()-this.helperProportions.width-this.margins.left,("document"===i.containment?this.document.height()||document.body.parentNode.scrollHeight:this.window.height()||this.document[0].body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(i.containment)||(t=e(i.containment)[0],n=e(i.containment).offset(),o="hidden"!==e(t).css("overflow"),this.containment=[n.left+(parseInt(e(t).css("borderLeftWidth"),10)||0)+(parseInt(e(t).css("paddingLeft"),10)||0)-this.margins.left,n.top+(parseInt(e(t).css("borderTopWidth"),10)||0)+(parseInt(e(t).css("paddingTop"),10)||0)-this.margins.top,n.left+(o?Math.max(t.scrollWidth,t.offsetWidth):t.offsetWidth)-(parseInt(e(t).css("borderLeftWidth"),10)||0)-(parseInt(e(t).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,n.top+(o?Math.max(t.scrollHeight,t.offsetHeight):t.offsetHeight)-(parseInt(e(t).css("borderTopWidth"),10)||0)-(parseInt(e(t).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])},_convertPositionTo:function(t,n){n||(n=this.position);var o="absolute"===t?1:-1,i="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,s=/(html|body)/i.test(i[0].tagName);return{top:n.top+this.offset.relative.top*o+this.offset.parent.top*o-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():s?0:i.scrollTop())*o,left:n.left+this.offset.relative.left*o+this.offset.parent.left*o-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():s?0:i.scrollLeft())*o}},_generatePosition:function(t){var n,o,i=this.options,s=t.pageX,r=t.pageY,a="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,l=/(html|body)/i.test(a[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(t.pageX-this.offset.click.left<this.containment[0]&&(s=this.containment[0]+this.offset.click.left),t.pageY-this.offset.click.top<this.containment[1]&&(r=this.containment[1]+this.offset.click.top),t.pageX-this.offset.click.left>this.containment[2]&&(s=this.containment[2]+this.offset.click.left),t.pageY-this.offset.click.top>this.containment[3]&&(r=this.containment[3]+this.offset.click.top)),i.grid&&(n=this.originalPageY+Math.round((r-this.originalPageY)/i.grid[1])*i.grid[1],r=this.containment?n-this.offset.click.top>=this.containment[1]&&n-this.offset.click.top<=this.containment[3]?n:n-this.offset.click.top>=this.containment[1]?n-i.grid[1]:n+i.grid[1]:n,o=this.originalPageX+Math.round((s-this.originalPageX)/i.grid[0])*i.grid[0],s=this.containment?o-this.offset.click.left>=this.containment[0]&&o-this.offset.click.left<=this.containment[2]?o:o-this.offset.click.left>=this.containment[0]?o-i.grid[0]:o+i.grid[0]:o)),{top:r-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():l?0:a.scrollTop()),left:s-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():l?0:a.scrollLeft())}},_rearrange:function(e,t,n,o){n?n[0].appendChild(this.placeholder[0]):t.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?t.item[0]:t.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var i=this.counter;this._delay((function(){i===this.counter&&this.refreshPositions(!o)}))},_clear:function(e,t){this.reverting=!1;var n,o=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(n in this._storedCSS)"auto"!==this._storedCSS[n]&&"static"!==this._storedCSS[n]||(this._storedCSS[n]="");this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")}else this.currentItem.show();function i(e,t,n){return function(o){n._trigger(e,o,t._uiHash(t))}}for(this.fromOutside&&!t&&o.push((function(e){this._trigger("receive",e,this._uiHash(this.fromOutside))})),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||t||o.push((function(e){this._trigger("update",e,this._uiHash())})),this!==this.currentContainer&&(t||(o.push((function(e){this._trigger("remove",e,this._uiHash())})),o.push(function(e){return function(t){e._trigger("receive",t,this._uiHash(this))}}.call(this,this.currentContainer)),o.push(function(e){return function(t){e._trigger("update",t,this._uiHash(this))}}.call(this,this.currentContainer)))),n=this.containers.length-1;n>=0;n--)t||o.push(i("deactivate",this,this.containers[n])),this.containers[n].containerCache.over&&(o.push(i("out",this,this.containers[n])),this.containers[n].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,t||this._trigger("beforeStop",e,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.cancelHelperRemoval||(this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null),!t){for(n=0;n<o.length;n++)o[n].call(this,e);this._trigger("stop",e,this._uiHash())}return this.fromOutside=!1,!this.cancelHelperRemoval},_trigger:function(){!1===e.Widget.prototype._trigger.apply(this,arguments)&&this.cancel()},_uiHash:function(t){var n=t||this;return{helper:n.helper,placeholder:n.placeholder||e([]),position:n.position,originalPosition:n.originalPosition,offset:n.positionAbs,item:n.currentItem,sender:t?t.element:null}}})})?o.apply(t,i):o)||(e.exports=s)},6325:(e,t,n)=>{var o,i,s;i=[n(1669),n(1052),n(1897),n(3300),n(5304),n(6883),n(9139)],void 0===(s="function"==typeof(o=function(e){var t;return e.widget("ui.tabs",{version:"1.12.1",delay:300,options:{active:null,classes:{"ui-tabs":"ui-corner-all","ui-tabs-nav":"ui-corner-all","ui-tabs-panel":"ui-corner-bottom","ui-tabs-tab":"ui-corner-top"},collapsible:!1,event:"click",heightStyle:"content",hide:null,show:null,activate:null,beforeActivate:null,beforeLoad:null,load:null},_isLocal:(t=/#.*$/,function(e){var n,o;n=e.href.replace(t,""),o=location.href.replace(t,"");try{n=decodeURIComponent(n)}catch(e){}try{o=decodeURIComponent(o)}catch(e){}return e.hash.length>1&&n===o}),_create:function(){var t=this,n=this.options;this.running=!1,this._addClass("ui-tabs","ui-widget ui-widget-content"),this._toggleClass("ui-tabs-collapsible",null,n.collapsible),this._processTabs(),n.active=this._initialActive(),e.isArray(n.disabled)&&(n.disabled=e.unique(n.disabled.concat(e.map(this.tabs.filter(".ui-state-disabled"),(function(e){return t.tabs.index(e)})))).sort()),!1!==this.options.active&&this.anchors.length?this.active=this._findActive(n.active):this.active=e(),this._refresh(),this.active.length&&this.load(n.active)},_initialActive:function(){var t=this.options.active,n=this.options.collapsible,o=location.hash.substring(1);return null===t&&(o&&this.tabs.each((function(n,i){if(e(i).attr("aria-controls")===o)return t=n,!1})),null===t&&(t=this.tabs.index(this.tabs.filter(".ui-tabs-active"))),null!==t&&-1!==t||(t=!!this.tabs.length&&0)),!1!==t&&-1===(t=this.tabs.index(this.tabs.eq(t)))&&(t=!n&&0),!n&&!1===t&&this.anchors.length&&(t=0),t},_getCreateEventData:function(){return{tab:this.active,panel:this.active.length?this._getPanelForTab(this.active):e()}},_tabKeydown:function(t){var n=e(e.ui.safeActiveElement(this.document[0])).closest("li"),o=this.tabs.index(n),i=!0;if(!this._handlePageNav(t)){switch(t.keyCode){case e.ui.keyCode.RIGHT:case e.ui.keyCode.DOWN:o++;break;case e.ui.keyCode.UP:case e.ui.keyCode.LEFT:i=!1,o--;break;case e.ui.keyCode.END:o=this.anchors.length-1;break;case e.ui.keyCode.HOME:o=0;break;case e.ui.keyCode.SPACE:return t.preventDefault(),clearTimeout(this.activating),void this._activate(o);case e.ui.keyCode.ENTER:return t.preventDefault(),clearTimeout(this.activating),void this._activate(o!==this.options.active&&o);default:return}t.preventDefault(),clearTimeout(this.activating),o=this._focusNextTab(o,i),t.ctrlKey||t.metaKey||(n.attr("aria-selected","false"),this.tabs.eq(o).attr("aria-selected","true"),this.activating=this._delay((function(){this.option("active",o)}),this.delay))}},_panelKeydown:function(t){this._handlePageNav(t)||t.ctrlKey&&t.keyCode===e.ui.keyCode.UP&&(t.preventDefault(),this.active.trigger("focus"))},_handlePageNav:function(t){return t.altKey&&t.keyCode===e.ui.keyCode.PAGE_UP?(this._activate(this._focusNextTab(this.options.active-1,!1)),!0):t.altKey&&t.keyCode===e.ui.keyCode.PAGE_DOWN?(this._activate(this._focusNextTab(this.options.active+1,!0)),!0):void 0},_findNextTab:function(t,n){var o=this.tabs.length-1;for(;-1!==e.inArray((t>o&&(t=0),t<0&&(t=o),t),this.options.disabled);)t=n?t+1:t-1;return t},_focusNextTab:function(e,t){return e=this._findNextTab(e,t),this.tabs.eq(e).trigger("focus"),e},_setOption:function(e,t){"active"!==e?(this._super(e,t),"collapsible"===e&&(this._toggleClass("ui-tabs-collapsible",null,t),t||!1!==this.options.active||this._activate(0)),"event"===e&&this._setupEvents(t),"heightStyle"===e&&this._setupHeightStyle(t)):this._activate(t)},_sanitizeSelector:function(e){return e?e.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g,"\\$&"):""},refresh:function(){var t=this.options,n=this.tablist.children(":has(a[href])");t.disabled=e.map(n.filter(".ui-state-disabled"),(function(e){return n.index(e)})),this._processTabs(),!1!==t.active&&this.anchors.length?this.active.length&&!e.contains(this.tablist[0],this.active[0])?this.tabs.length===t.disabled.length?(t.active=!1,this.active=e()):this._activate(this._findNextTab(Math.max(0,t.active-1),!1)):t.active=this.tabs.index(this.active):(t.active=!1,this.active=e()),this._refresh()},_refresh:function(){this._setOptionDisabled(this.options.disabled),this._setupEvents(this.options.event),this._setupHeightStyle(this.options.heightStyle),this.tabs.not(this.active).attr({"aria-selected":"false","aria-expanded":"false",tabIndex:-1}),this.panels.not(this._getPanelForTab(this.active)).hide().attr({"aria-hidden":"true"}),this.active.length?(this.active.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0}),this._addClass(this.active,"ui-tabs-active","ui-state-active"),this._getPanelForTab(this.active).show().attr({"aria-hidden":"false"})):this.tabs.eq(0).attr("tabIndex",0)},_processTabs:function(){var t=this,n=this.tabs,o=this.anchors,i=this.panels;this.tablist=this._getList().attr("role","tablist"),this._addClass(this.tablist,"ui-tabs-nav","ui-helper-reset ui-helper-clearfix ui-widget-header"),this.tablist.on("mousedown"+this.eventNamespace,"> li",(function(t){e(this).is(".ui-state-disabled")&&t.preventDefault()})).on("focus"+this.eventNamespace,".ui-tabs-anchor",(function(){e(this).closest("li").is(".ui-state-disabled")&&this.blur()})),this.tabs=this.tablist.find("> li:has(a[href])").attr({role:"tab",tabIndex:-1}),this._addClass(this.tabs,"ui-tabs-tab","ui-state-default"),this.anchors=this.tabs.map((function(){return e("a",this)[0]})).attr({role:"presentation",tabIndex:-1}),this._addClass(this.anchors,"ui-tabs-anchor"),this.panels=e(),this.anchors.each((function(n,o){var i,s,r,a=e(o).uniqueId().attr("id"),l=e(o).closest("li"),c=l.attr("aria-controls");t._isLocal(o)?(r=(i=o.hash).substring(1),s=t.element.find(t._sanitizeSelector(i))):(i="#"+(r=l.attr("aria-controls")||e({}).uniqueId()[0].id),(s=t.element.find(i)).length||(s=t._createPanel(r)).insertAfter(t.panels[n-1]||t.tablist),s.attr("aria-live","polite")),s.length&&(t.panels=t.panels.add(s)),c&&l.data("ui-tabs-aria-controls",c),l.attr({"aria-controls":r,"aria-labelledby":a}),s.attr("aria-labelledby",a)})),this.panels.attr("role","tabpanel"),this._addClass(this.panels,"ui-tabs-panel","ui-widget-content"),n&&(this._off(n.not(this.tabs)),this._off(o.not(this.anchors)),this._off(i.not(this.panels)))},_getList:function(){return this.tablist||this.element.find("ol, ul").eq(0)},_createPanel:function(t){return e("<div>").attr("id",t).data("ui-tabs-destroy",!0)},_setOptionDisabled:function(t){var n,o,i;for(e.isArray(t)&&(t.length?t.length===this.anchors.length&&(t=!0):t=!1),i=0;o=this.tabs[i];i++)n=e(o),!0===t||-1!==e.inArray(i,t)?(n.attr("aria-disabled","true"),this._addClass(n,null,"ui-state-disabled")):(n.removeAttr("aria-disabled"),this._removeClass(n,null,"ui-state-disabled"));this.options.disabled=t,this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,!0===t)},_setupEvents:function(t){var n={};t&&e.each(t.split(" "),(function(e,t){n[t]="_eventHandler"})),this._off(this.anchors.add(this.tabs).add(this.panels)),this._on(!0,this.anchors,{click:function(e){e.preventDefault()}}),this._on(this.anchors,n),this._on(this.tabs,{keydown:"_tabKeydown"}),this._on(this.panels,{keydown:"_panelKeydown"}),this._focusable(this.tabs),this._hoverable(this.tabs)},_setupHeightStyle:function(t){var n,o=this.element.parent();"fill"===t?(n=o.height(),n-=this.element.outerHeight()-this.element.height(),this.element.siblings(":visible").each((function(){var t=e(this),o=t.css("position");"absolute"!==o&&"fixed"!==o&&(n-=t.outerHeight(!0))})),this.element.children().not(this.panels).each((function(){n-=e(this).outerHeight(!0)})),this.panels.each((function(){e(this).height(Math.max(0,n-e(this).innerHeight()+e(this).height()))})).css("overflow","auto")):"auto"===t&&(n=0,this.panels.each((function(){n=Math.max(n,e(this).height("").height())})).height(n))},_eventHandler:function(t){var n=this.options,o=this.active,i=e(t.currentTarget).closest("li"),s=i[0]===o[0],r=s&&n.collapsible,a=r?e():this._getPanelForTab(i),l=o.length?this._getPanelForTab(o):e(),c={oldTab:o,oldPanel:l,newTab:r?e():i,newPanel:a};t.preventDefault(),i.hasClass("ui-state-disabled")||i.hasClass("ui-tabs-loading")||this.running||s&&!n.collapsible||!1===this._trigger("beforeActivate",t,c)||(n.active=!r&&this.tabs.index(i),this.active=s?e():i,this.xhr&&this.xhr.abort(),l.length||a.length||e.error("jQuery UI Tabs: Mismatching fragment identifier."),a.length&&this.load(this.tabs.index(i),t),this._toggle(t,c))},_toggle:function(t,n){var o=this,i=n.newPanel,s=n.oldPanel;function r(){o.running=!1,o._trigger("activate",t,n)}function a(){o._addClass(n.newTab.closest("li"),"ui-tabs-active","ui-state-active"),i.length&&o.options.show?o._show(i,o.options.show,r):(i.show(),r())}this.running=!0,s.length&&this.options.hide?this._hide(s,this.options.hide,(function(){o._removeClass(n.oldTab.closest("li"),"ui-tabs-active","ui-state-active"),a()})):(this._removeClass(n.oldTab.closest("li"),"ui-tabs-active","ui-state-active"),s.hide(),a()),s.attr("aria-hidden","true"),n.oldTab.attr({"aria-selected":"false","aria-expanded":"false"}),i.length&&s.length?n.oldTab.attr("tabIndex",-1):i.length&&this.tabs.filter((function(){return 0===e(this).attr("tabIndex")})).attr("tabIndex",-1),i.attr("aria-hidden","false"),n.newTab.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0})},_activate:function(t){var n,o=this._findActive(t);o[0]!==this.active[0]&&(o.length||(o=this.active),n=o.find(".ui-tabs-anchor")[0],this._eventHandler({target:n,currentTarget:n,preventDefault:e.noop}))},_findActive:function(t){return!1===t?e():this.tabs.eq(t)},_getIndex:function(t){return"string"==typeof t&&(t=this.anchors.index(this.anchors.filter("[href$='"+e.ui.escapeSelector(t)+"']"))),t},_destroy:function(){this.xhr&&this.xhr.abort(),this.tablist.removeAttr("role").off(this.eventNamespace),this.anchors.removeAttr("role tabIndex").removeUniqueId(),this.tabs.add(this.panels).each((function(){e.data(this,"ui-tabs-destroy")?e(this).remove():e(this).removeAttr("role tabIndex aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded")})),this.tabs.each((function(){var t=e(this),n=t.data("ui-tabs-aria-controls");n?t.attr("aria-controls",n).removeData("ui-tabs-aria-controls"):t.removeAttr("aria-controls")})),this.panels.show(),"content"!==this.options.heightStyle&&this.panels.css("height","")},enable:function(t){var n=this.options.disabled;!1!==n&&(void 0===t?n=!1:(t=this._getIndex(t),n=e.isArray(n)?e.map(n,(function(e){return e!==t?e:null})):e.map(this.tabs,(function(e,n){return n!==t?n:null}))),this._setOptionDisabled(n))},disable:function(t){var n=this.options.disabled;if(!0!==n){if(void 0===t)n=!0;else{if(t=this._getIndex(t),-1!==e.inArray(t,n))return;n=e.isArray(n)?e.merge([t],n).sort():[t]}this._setOptionDisabled(n)}},load:function(t,n){t=this._getIndex(t);var o=this,i=this.tabs.eq(t),s=i.find(".ui-tabs-anchor"),r=this._getPanelForTab(i),a={tab:i,panel:r},l=function(e,t){"abort"===t&&o.panels.stop(!1,!0),o._removeClass(i,"ui-tabs-loading"),r.removeAttr("aria-busy"),e===o.xhr&&delete o.xhr};this._isLocal(s[0])||(this.xhr=e.ajax(this._ajaxSettings(s,n,a)),this.xhr&&"canceled"!==this.xhr.statusText&&(this._addClass(i,"ui-tabs-loading"),r.attr("aria-busy","true"),this.xhr.done((function(e,t,i){setTimeout((function(){r.html(e),o._trigger("load",n,a),l(i,t)}),1)})).fail((function(e,t){setTimeout((function(){l(e,t)}),1)}))))},_ajaxSettings:function(t,n,o){var i=this;return{url:t.attr("href").replace(/#.*$/,""),beforeSend:function(t,s){return i._trigger("beforeLoad",n,e.extend({jqXHR:t,ajaxSettings:s},o))}}},_getPanelForTab:function(t){var n=e(t).attr("aria-controls");return this.element.find(this._sanitizeSelector("#"+n))}}),!1!==e.uiBackCompat&&e.widget("ui.tabs",e.ui.tabs,{_processTabs:function(){this._superApply(arguments),this._addClass(this.tabs,"ui-tab")}}),e.ui.tabs})?o.apply(t,i):o)||(e.exports=s)},6156:()=>{!function(e,t,n){function o(e,t){return"function"==typeof e?e.call(t):e}function i(e){for(;e=e.parentNode;)if(e==document)return!0;return!1}var s=0;function r(t,n){this.$element=e(t),this.options=n,this.enabled=!0,this.fixTitle()}r.prototype={show:function(){var t,n;if(i(this.$element[0])&&(t=this.$element,(!("object"==typeof HTMLElement?t instanceof HTMLElement:t&&"object"==typeof t&&1===t.nodeType&&"string"==typeof t.nodeName)||this.$element.is(":visible"))&&this.enabled&&(n=this.getTitle()))){var r=this.tip();r.find(".tipsy-inner"+this.options.theme)[this.options.html?"html":"text"](n),r[0].className="tipsy"+this.options.theme,this.options.className&&r.addClass(o(this.options.className,this.$element[0])),r.remove().css({top:0,left:0,visibility:"hidden",display:"block"}).prependTo(document.body);var a=e.extend({},this.$element.offset());a=this.$element.parents("svg").size()>0?e.extend(a,this.$element[0].getBBox()):e.extend(a,{width:this.$element[0].offsetWidth||0,height:this.$element[0].offsetHeight||0});var l,c=r[0].offsetWidth,d=r[0].offsetHeight,u=o(this.options.gravity,this.$element[0]);switch(u.charAt(0)){case"n":l={top:a.top+a.height+this.options.offset,left:a.left+a.width/2-c/2};break;case"s":l={top:a.top-d-this.options.offset,left:a.left+a.width/2-c/2};break;case"e":l={top:a.top+a.height/2-d/2,left:a.left-c-this.options.offset};break;case"w":l={top:a.top+a.height/2-d/2,left:a.left+a.width+this.options.offset}}if(2==u.length&&("w"==u.charAt(1)?l.left=a.left+a.width/2-15:l.left=a.left+a.width/2-c+15),r.css(l).addClass("tipsy-"+u+this.options.theme),r.find(".tipsy-arrow"+this.options.theme)[0].className="tipsy-arrow"+this.options.theme+" tipsy-arrow-"+u.charAt(0)+this.options.theme,this.options.fade?(this.options.shadow&&e(".tipsy-inner").css({"box-shadow":"0px 0px "+this.options.shadowBlur+"px "+this.options.shadowSpread+"px rgba(0, 0, 0, "+this.options.shadowOpacity+")","-webkit-box-shadow":"0px 0px "+this.options.shadowBlur+"px "+this.options.shadowSpread+"px rgba(0, 0, 0, "+this.options.shadowOpacity+")"}),r.stop().css({opacity:0,display:"block",visibility:"visible"}).animate({opacity:this.options.opacity},this.options.fadeInTime)):r.css({visibility:"visible",opacity:this.options.opacity}),this.options.aria){var p="tipsyuid"+s++;r.attr("id",p),this.$element.attr("aria-describedby",p)}}},hide:function(){this.options.fade?this.tip().stop().fadeOut(this.options.fadeOutTime,(function(){e(this).remove()})):this.tip().remove(),this.options.aria&&this.$element.removeAttr("aria-describedby")},fixTitle:function(){var e=this.$element,t=o(this.options.id,this.$element[0]);(e.prop("title")||"string"!=typeof e.prop("original-title"))&&(e.prop("original-title",e.prop("title")||"").removeAttr("title"),e.attr("aria-describedby",t),void 0===e.attr("tabindex")&&e.attr("tabindex",0))},getTitle:function(){var e,t=this.$element,n=this.options;return this.fixTitle(),"string"==typeof n.title?e=t.prop("title"==n.title?"original-title":n.title):"function"==typeof n.title&&(e=n.title.call(t[0])),(e=(""+e).replace(/(^\s*|\s*$)/,""))||n.fallback},tip:function(){var t=o(this.options.id,this.$element[0]);return this.$tip||(this.$tip=e('<div class="tipsy'+this.options.theme+'" id="'+t+'" role="tooltip"></div>').html('<div class="tipsy-arrow'+this.options.theme+'"></div><div class="tipsy-inner'+this.options.theme+'"></div>').attr("role","tooltip"),this.$tip.data("tipsy-pointee",this.$element[0])),this.$tip},validate:function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},enable:function(){this.enabled=!0},disable:function(){this.enabled=!1},toggleEnabled:function(){this.enabled=!this.enabled}},e.fn.tipsy=function(t){if(e.fn.tipsy.enable(),!0===t)return this.data("tipsy");if("string"==typeof t){var n=this.data("tipsy");return n&&n[t](),this}function o(n){var o=e.data(n,"tipsy");return o||(o=new r(n,e.fn.tipsy.elementOptions(n,t)),e.data(n,"tipsy",o)),o}function s(){if(!0===e.fn.tipsy.enabled){var n=o(this);n.hoverState="in",0===t.delayIn?n.show():(n.fixTitle(),setTimeout((function(){"in"==n.hoverState&&i(n.$element)&&n.show()}),t.delayIn))}}function a(){var e=o(this);e.hoverState="out",0===t.delayOut?e.hide():setTimeout((function(){"out"!=e.hoverState&&e.$element&&e.$element.is(":visible")||e.hide()}),t.delayOut)}if((t=e.extend({},e.fn.tipsy.defaults,t)).theme=t.theme&&""!==t.theme?"-"+t.theme:"",t.live||this.each((function(){o(this)})),"manual"!=t.trigger)if(t.live&&!0!==t.live)"focus"!=t.trigger&&(e(this).on("mouseenter",t.live,s),e(this).on("mouseleave",t.live,a)),"blur"!=t.trigger&&(e(this).on("focus",t.live,s),e(this).on("blur",t.live,a));else{if(t.live&&!e.live)throw"Since jQuery 1.9, pass selector as live argument. eg. $(document).tipsy({live: 'a.live'});";var l=t.live?"live":"bind";"focus"!=t.trigger&&this[l]("mouseenter",s)[l]("mouseleave",a),"blur"!=t.trigger&&this[l]("focus",s)[l]("blur",a)}return this},e.fn.tipsy.defaults={aria:!1,className:null,id:"tipsy",delayIn:0,delayOut:0,fade:!1,fadeInTime:400,fadeOutTime:400,shadow:!1,shadowBlur:8,shadowOpacity:1,shadowSpread:0,fallback:"",gravity:"n",html:!1,live:!1,offset:0,opacity:.8,title:"title",trigger:"interactive",theme:""},e.fn.tipsy.revalidate=function(){e(".tipsy").each((function(){var t=e.data(this,"tipsy-pointee");t&&i(t)||e(this).remove()}))},e.fn.tipsy.enable=function(){e.fn.tipsy.enabled=!0},e.fn.tipsy.disable=function(){e.fn.tipsy.enabled=!1},e.fn.tipsy.elementOptions=function(t,n){return e.metadata?e.extend({},n,e(t).metadata()):n},e.fn.tipsy.autoNS=function(){return e(this).offset().top>e(document).scrollTop()+e(t).height()/2?"s":"n"},e.fn.tipsy.autoWE=function(){return e(this).offset().left>e(document).scrollLeft()+e(t).width()/2?"e":"w"},e.fn.tipsy.autoNWNE=function(){return e(this).offset().left>e(document).scrollLeft()+e(t).width()/2?"ne":"nw"},e.fn.tipsy.autoSWSE=function(){return e(this).offset().left>e(document).scrollLeft()+e(t).width()/2?"se":"sw"},e.fn.tipsy.autoBounds=function(n,o,i){return function(){var s={ns:i[0],ew:i.length>1&&i[1]},r=e(document).scrollTop()+n,a=e(document).scrollLeft()+o,l=e(this);return l.offset().top<r&&(s.ns="n"),l.offset().left<a&&(s.ew="w"),e(t).width()+e(document).scrollLeft()-l.offset().left<o&&(s.ew="e"),e(t).height()+e(document).scrollTop()-l.offset().top<n&&(s.ns="s"),s.ns+(s.ew?s.ew:"")}},e.fn.tipsy.autoBounds2=function(n,o){return function(){var i={},s=e(document).scrollTop()+n,r=e(document).scrollLeft()+n,a=e(this);return o.length>1?(i.ns=o[0],i.ew=o[1]):"e"==o[0]||"w"==o[0]?i.ew=o[0]:i.ns=o[0],a.offset().top<s&&(i.ns="n"),a.offset().left<r&&(i.ew="w"),e(t).width()+e(document).scrollLeft()-(a.offset().left+a.width())<n&&(i.ew="e"),e(t).height()+e(document).scrollTop()-(a.offset().top+a.height())<n&&(i.ns="s"),i.ns?i.ns+(i.ew?i.ew:""):i.ew}}}(jQuery,window)},7450:function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,o,i)}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},r=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const a=s(n(1832)),l=s(n(7621)),c=n(3137),d=n(933),u=n(2589),p=n(412),h=n(9792);function m(...e){return e.some((e=>e.test(globalThis.location.pathname)))}!function(){r(this,void 0,void 0,(function*(){var e;if(u.Logger.debug("Current value of SchoologyPlus variable:",globalThis.SchoologyPlus),globalThis.SchoologyPlus)return void u.Logger.warn("SchoologyPlus is already loaded. Aborting content script load to prevent conflicts.");globalThis.SchoologyPlus={},yield a.all.preload(),yield(0,c.initializeAnalytics)({documentContext:!0,isAnalyticsEnabled:"Firefox"!==(0,d.getBrowser)()&&"enabled"===h.Settings.Analytics.value,selectedTheme:h.Settings.Theme.valueOrDefault("<unset>"),selectedBeta:h.Settings.BetaCode.valueOrDefault("<unset>"),currentVersion:chrome.runtime.getManifest().version,newVersion:h.Settings.LastLoadedVersion.value,randomUserId:yield(0,c.getAnalyticsUserId)(),themeIsModern:null!==(e=document.documentElement.getAttribute("modern"))&&void 0!==e?e:"false"}),yield new Promise((e=>{"loading"!=document.readyState?e():document.addEventListener("DOMContentLoaded",(()=>e()))})),yield a.all.load();const t=m(/^\/grades\/grades$/,/^\/course\/\d+\/student_grades$/);t&&(yield a.grades.load(),yield a.course.load()),m(/^\/course\/\d+\/materials$/)&&(yield a.materials.load()),m(/^\/course\/\d+\/materials\//)&&(yield a.material.load()),m(/^\/$/,/^\/home$/,/^\/home\/(recent-activity|course-dashboard)$/)&&(yield a.home.load(),yield a.course.load()),!t&&m(/^\/course\/\d+/)&&(yield a.course.load()),m(/^\/api/)&&(yield a.apikey.load()),m(/^\/user\/\d+$/)&&(yield a.user.load()),m(/^\/assignment\/\d+\/assessment$/)&&(yield a.assessment.load()),m(/^\/page\//)&&(yield a.page.load()),m(/^\/courses/)&&(yield a.course.load(),yield a.courses.load()),globalThis.SchoologyPlus={Settings:h.Settings,fetchApi:l.api.fetchApi,fetchApiJson:l.api.fetchApiJson,utils:l,pages:a,debug:JSON.parse((0,p.generateDebugInfo)())}}))}()},1143:function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,o,i)}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},r=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.loadBetaFeatures=t.preload=t.load=void 0;const l=a(n(2234)),c=a(n(9568)),d=a(n(1669));n(6325);const u=n(3137),p=n(5913),h=n(9891),m=n(5252),g=n(933),f=n(2589),v=a(n(5144)),y=n(9792),b=s(n(564)),E=n(302),S=n(536),_=n(1973),x={createSpacerTile:function(){return(0,g.createElement)("div",["_3hM4e","_3_a9F","zJU7e","util-width-zero-1OcAd","_2oHes","util-last-child-margin-right-zero-1DVn4","splus-addedtodynamicdropdown"])},isSpacerTile:function(e){return 0==e.childElementCount},createTilesRow:function(e,t){for(t||(t=6);e.length<t;)e.push(x.createSpacerTile());return(0,g.createElement)("div",["_1tpub","Kluyr","splus-addedtodynamicdropdown"],{},e)},rowSelector:'div[role="menu"] ._3mp5E._24W2g._26UWf ._1tpub.Kluyr'};function w(){var e,t;let n=h.FORCED_BETA_TEST||y.Settings.BetaCode.value,o=null;if(n&&n in h.BETA_TESTS){let i=(0,g.createElement)("span",["splus-beta-tag","splus-track-clicks"],{textContent:"β",id:"beta-tag"});i.addEventListener("click",(e=>v.default.openModal("beta-modal")));let s=(0,g.createElement)("div",["splus-beta-container"],{},[i]);document.body.append(s),o=(0,h.createBetaSection)(n),s.append(o),null===(t=null===(e=h.BETA_TESTS[n])||void 0===e?void 0:e.activate)||void 0===t||t.call(e)}}function C(e){let t=!1;for(let n of e){for(let e of n.addedNodes)if(e instanceof HTMLElement&&e.classList&&!e.classList.contains("splus-addedtodynamicdropdown")){t=!0;break}if(t)break}return t}function T(){let e=location.hash.split("#");e.length>1&&"splus-settings"===e[1]&&(v.default.openModal("settings-modal"),e.length>2?setTimeout((()=>{var t,n,o,i;location.hash=e[2];let s=null===(n=null===(t=document.getElementById(e[2]))||void 0===t?void 0:t.parentElement)||void 0===n?void 0:n.parentElement,r=null==s?void 0:s.parentElement,a=Array.from(null!==(i=null===(o=null==r?void 0:r.parentElement)||void 0===o?void 0:o.children)&&void 0!==i?i:[]).indexOf(r)-1;(0,d.default)(".splus-settings-tabs").tabs("option","active",a),null==s||s.classList.add("setting-highlight"),location.hash=""}),500):location.hash="")}t.load=function(){return r(this,void 0,void 0,(function*(){var e;localStorage["splus-temp-generatedtheme"]&&(localStorage.removeItem("splus-temp-generatedtheme"),(0,E.showToast)("Theme Generated",`${m.EXTENSION_NAME} created a theme that matches your school's theme`,"rgb(0,255,0)",{buttons:[(0,E.createToastButton)("View Themes","view-themes-button",(()=>location.href=chrome.runtime.getURL("/theme-editor.html")))]})),w(),setTimeout((function(){return r(this,void 0,void 0,(function*(){let e=y.Settings.DefaultDomain.value;if(e!==window.location.hostname&&!["asset-cdn.schoology.com","developer.schoology.com","support.schoology.com","info.schoology.com","files-cdn.schoology.com","status.schoology.com","ui.schoology.com","www.schoology.com","api.schoology.com","developers.schoology.com","schoology.com","error-page.schoology.com","app-msft-teams.schoology.com","lti-submission-google.app.schoology.com","lti-submission-microsoft.app.schoology.com","googledrive.app.schoology.com","onedrive.app.schoology.com"].includes(window.location.hostname)&&!window.location.hostname.match(/.*[-\.]app\.schoology\.com/)){yield y.Settings.DefaultDomain.setValue(window.location.hostname);let t=document.querySelector("#header header").style.backgroundColor;if(t&&!["app.schoology.com","lms.lausd.net"].includes(window.location.hostname)){let n={name:`Auto Generated Theme for ${window.location.hostname}`,version:2,color:{custom:{primary:t,hover:"rgb(2, 79, 125)",background:"rgb(2, 79, 125)",border:"rgb(2, 79, 125)"}},logo:{preset:"default"}};localStorage["splus-temp-generatedtheme"]=!0;let o=(yield chrome.storage.sync.get({themes:[]})).themes.filter((e=>e.name!==`Auto Generated Theme for ${window.location.hostname}`));o.push(n),yield chrome.storage.sync.set({themes:o}),f.Logger.log(`${m.EXTENSION_NAME} has updated the domain on which it runs.\nPrevious: ${e}\nNew: ${window.location.hostname}`),location.reload()}else f.Logger.log(`${m.EXTENSION_NAME} has updated the domain on which it runs.\nPrevious: ${e}\nNew: ${window.location.hostname}`),location.reload()}}))}),2e3),function(){document.head.appendChild((0,g.createElement)("meta",[],{name:"viewport",content:"width=device-width, initial-scale=1"}));let e=document.querySelector("span.Footer-copyright-2Vt6I");null==e||e.appendChild((0,g.createElement)("span",["footer-divider"],{textContent:"|"},[(0,g.createElement)("span",["footer-text-enhanced-by"],{style:{cursor:"pointer"},onclick:()=>window.open(`${m.EXTENSION_WEBSITE}/?utm_source=ext-enhanced-by-footer`,"_blank"),textContent:`Enhanced by ${m.EXTENSION_NAME}`})])),document.documentElement.style.setProperty("--default-visibility","visible")}(),yield function(){return r(this,void 0,void 0,(function*(){let e=y.Settings.LastLoadedVersion.value;if(!e||e!=chrome.runtime.getManifest().version){let t=chrome.runtime.getManifest().version;if(y.Settings.DefaultDomain.value!=window.location.hostname)return void f.Logger.log("[Updater] Domain isn't set as default, skipping migrations until domain is updated.");c.default.show({theme:"dark",iconUrl:chrome.runtime.getURL("/imgs/plus-icon.png"),title:`Welcome to ${m.EXTENSION_NAME} version ${t}!`,position:"topRight",timeout:0,progressBarColor:"hsl(190, 100%, 50%)",buttons:[["<button>View Changelog</button>",function(e,t){e.hide({transitionOut:"fadeOutRight",onClosing:function(){(0,u.trackEvent)("button_click",{id:"viewChangelogButton",context:"Toast",legacyTarget:"viewChangelogButton",legacyAction:"click",legacyLabel:"Toast Button"}),v.default.openModal("changelog-modal")}},t,"viewChangelogButton")},!0]]}),(0,_.versionSpecificFirstLaunch)(t,e),yield y.Settings.LastLoadedVersion.setValue(chrome.runtime.getManifest().version)}}))}(),function(){r(this,void 0,void 0,(function*(){b.default.profilePictureOverrides=[];let e=y.Settings.ForceDefaultCourseIcons.value,t=[];for(let n in e)"enabled"==e[n]&&t.push((0,p.fetchApiJson)("/sections/"+n));function n(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}f.Logger.log("Forcing Schoology-default icons for "+t.length+" courses");let o=yield Promise.all(t);for(let e of o)b.default.profilePictureOverrides.push({regex:n(e.course_title)+" ?: "+n(e.section_title),url:e.profile_url});t.length>0&&b.default.setProfilePictures()}))}(),function(){let e=document.body.appendChild((0,g.createElement)("video",["easter-egg"],{onended:()=>{e.style.visibility="hidden"}})),t=(0,g.createElement)("source",[],{src:"https://gist.github.com/aopell/0fe2408cffbab2b6fadb18ebaa28808f/raw/77853f137329c042c34bdb5be38c1930357c0531/cut.webm",type:"video/webm"}),n=!1;document.body.addEventListener("keydown",(o=>{o.altKey&&"KeyC"===o.code?(n||(e.appendChild(t),n=!0),e.style.visibility="visible",e.currentTime=0,e.play(),(0,u.trackEvent)("perform_action",{id:"activate",context:"Easter Egg",value:"confetti",legacyTarget:"Easter Egg",legacyAction:"play",legacyLabel:"Easter Egg"})):o.altKey&&"KeyB"===o.code?v.default.openModal("beta-modal"):"Escape"===o.key&&(e.style.visibility="hidden",e.pause())}))}(),null===(e=document.querySelector("#header > header > nav > ul:nth-child(2)"))||void 0===e||e.prepend((0,g.createElement)("li",["_24avl","_3Rh90","_349XD"],{},[(0,g.createElement)("button",["_1SIMq","_2kpZl","_3OAXJ","_13cCs","_3_bfp","_2M5aC","_24avl","_3v0y7","_2s0LQ","_3ghFm","_3LeCL","_31GLY","_9GDcm","_1D8fw","util-height-six-3PHnk","util-line-height-six-3lFgd","util-text-decoration-none-1n0lI","Header-header-button-active-state-3AvBm","Header-header-button-1EE8Y","sExtlink-processed","splus-track-clicks"],{id:"darktheme-toggle-navbar-button",title:`Toggle Theme\n\nUse this button to temporarily disable your ${m.EXTENSION_NAME} theme if something isn't displaying correctly.`,onclick:e=>{let t="false"==document.documentElement.getAttribute("modern")?"true":"false";b.default.tempTheme="false"==t?m.DEFAULT_THEME_NAME:void 0,b.default.apply(b.default.active),document.documentElement.setAttribute("modern",t),(0,u.trackEvent)("button_click",{id:"modern-theme-toggle",context:"Navbar",value:t,legacyTarget:"modern-theme-toggle",legacyAction:t,legacyLabel:"Navbar Button"})},dataset:{popup:(y.Settings.Popups.nestedValue("modernThemeToggle",!0)&&"false"!==localStorage.getItem("popup.modernThemeToggle")).toString()}},[(0,g.createElement)("div",["explanation-popup"],{},[(0,g.createElement)("span",[],{title:"",textContent:`Use this button to temporarily disable your ${m.EXTENSION_NAME} theme if something isn't displaying correctly.`}),(0,g.createElement)("h3",[],{textContent:"OK",onclick:e=>{e.stopPropagation(),(0,u.trackEvent)("button_click",{id:"modern-theme-toggle-explanation-ok",context:"Explanation Popup",legacyTarget:"modern-theme-toggle",legacyAction:"ok",legacyLabel:"Explanation Popup"}),y.Settings.Popups.setNestedValue("modernThemeToggle",!1),localStorage.setItem("popup.modernThemeToggle","false"),document.getElementById("darktheme-toggle-navbar-button").dataset.popup="false"}})]),function(){let e=document.createElementNS("http://www.w3.org/2000/svg","svg");return e.setAttribute("viewBox","-12 -20 500 500"),e.setAttribute("class","_3ESp2 dlCBz _1I3mg fjQuT uQOmx"),e.innerHTML='<path d="m242 197v90c0 8.284 6.716 15 15 15h180c8.284 0 15-6.716 15-15v-90c0-8.284-6.716-15-15-15h-180c-8.284 0-15 6.716-15 15z"/><path d="m377 422h-60c-8.284 0-15 6.716-15 15v60c0 8.284 6.716 15 15 15h60c8.284 0 15-6.716 15-15v-60c0-8.284-6.716-15-15-15z"/><path d="m307.667 15c0-8.284-6.716-15-15-15h-45v60h60z"/><path d="m217.667 0h-202.667c-8.284 0-15 6.716-15 15v45h217.667z"/><path d="m307.667 347v-15h-50.667c-24.813 0-45-20.186-45-45v-90c0-24.814 20.187-45 45-45h50.667v-62h-307.667v257c0 8.284 6.716 15 15 15h277.667c8.284 0 15-6.716 15-15zm-155.698-46h-91.969c-8.284 0-15-6.716-15-15s6.716-15 15-15h91.969c8.284 0 15 6.716 15 15s-6.716 15-15 15zm0-60h-91.969c-8.284 0-15-6.716-15-15s6.716-15 15-15h91.969c8.284 0 15 6.716 15 15s-6.716 15-15 15zm0-60h-91.969c-8.284 0-15-6.716-15-15s6.716-15 15-15h91.969c8.284 0 15 6.716 15 15s-6.716 15-15 15z"/><path d="m482 229.58v87.42c0 8.272-6.728 15-15 15h-90c-24.814 0-45 20.186-45 45v15h30v-15c0-8.272 6.728-15 15-15h90c24.814 0 45-20.186 45-45v-45c0-19.555-12.541-36.227-30-42.42z"/>',e}()])])),function(){var e;null===(e=document.querySelector("#header > header > nav > ul:nth-child(2)"))||void 0===e||e.prepend((0,g.createElement)("li",["_24avl","_3Rh90","_349XD"],{},[(0,g.createElement)("button",["_1SIMq","_2kpZl","_3OAXJ","_13cCs","_3_bfp","_2M5aC","_24avl","_3v0y7","_2s0LQ","_3ghFm","_3LeCL","_31GLY","_9GDcm","_1D8fw","util-height-six-3PHnk","util-line-height-six-3lFgd","util-text-decoration-none-1n0lI","Header-header-button-active-state-3AvBm","Header-header-button-1EE8Y","sExtlink-processed"],{id:"splus-settings-navbar-button",title:`${m.EXTENSION_NAME} Settings\n\nChange settings relating to ${m.EXTENSION_NAME}.`,onclick:()=>{v.default.openModal("settings-modal"),(0,u.trackEvent)("button_click",{id:"splus-settings",context:"Navbar",legacyTarget:"splus-settings",legacyAction:"open",legacyLabel:"Navbar Button"})}},[(0,g.createSvgLogo)("_3ESp2","dlCBz","_1I3mg","fjQuT","uQOmx")])]))}(),function(){var e,t;let n=document.querySelectorAll("#header header nav ul svg use");for(let o of n){let n=o.getAttribute("xlink:href");if(n){let i=document.querySelector(n);if(i){let n=i.querySelectorAll("path");for(let i of n)"#333"===(null===(e=i.getAttribute("fill"))||void 0===e?void 0:e.trim())&&(null===(t=o.parentElement)||void 0===t||t.classList.add("splus-svg-icon-processed"),i.setAttribute("fill","currentColor"))}}}}(),window.addEventListener("click",(e=>{v.default.modals.find((t=>t.element==e.target))&&v.default.closeAllModals()})),yield new Promise((e=>setTimeout(e,500))),function(){var e,t;let n=null,o=new MutationObserver((function(e){var t,o,i;if(!C(e))return;if(f.Logger.log("Processing courses dropdown mutation"),"show"===y.Settings.ArchivedCoursesButton.value){let e=null==n?void 0:n.querySelector('.CjR09._8a6xl._1tpub > a[href="/courses"]._3ghFm');if(e){let t=(0,g.createElement)("div",["courses-mycourses-droppeddown-link-container","splus-addedtodynamicdropdown","_3ghFm"],{},[(0,g.createElement)("a",["floating-contained-link","splus-addedtodynamicdropdown"],{href:"/courses",textContent:"My Courses"}),(0,g.createElement)("a",["floating-contained-link","splus-addedtodynamicdropdown"],{href:"/courses/mycourses/past",textContent:"Past Courses"})]);e.replaceWith(t)}}let s=null,r=[],a=!1;for(let e of(null==n?void 0:n.querySelectorAll(x.rowSelector))||[]){s||(s=e.parentElement),6!=e.childElementCount&&(a=!0);for(let t of e.children)x.isSpacerTile(t)||r.push(t)}let l,c=r.slice(0);if(a){let e;for(;e=null==n?void 0:n.querySelector(x.rowSelector);)e.remove();for(;r.length>0;)null==s||s.appendChild(x.createTilesRow(r.splice(0,6),6))}c.length>0&&(l=window.getComputedStyle(c[0]).width);for(let e of c){let n,s=e.querySelector(".Card-card-data-17m6S");if(!s||s.querySelector(".splus-coursesdropdown-nicknamed-dataset")||s.childElementCount>1)continue;let r=s.parentElement;if(r.href){let e=r.href.split("/").at(-2);e&&(n=y.Settings.CourseNicknames.nestedValue(e))}if(!n)continue;s.firstElementChild.style.display="none";let a=null===(t=s.firstElementChild)||void 0===t?void 0:t.querySelector("div._3U8Br._2s0LQ._2qcpH._3ghFm._17Z60._1Aph-.gs0RB"),c=null===(o=s.firstElementChild)||void 0===o?void 0:o.querySelector("div._1wP6w._23_WZ._2qcpH._3ghFm._17Z60._1Aph-.gs0RB"),d=null===(i=s.firstElementChild)||void 0===i?void 0:i.querySelector("div._2wOCj.xjR5v._2qcpH._17Z60._1Aph-.gs0RB"),u=(0,g.createElement)("div",["_36sHx","_3M0N7","fjQuT","_1EyV_","splus-coursesdropdown-nicknamed-dataset","splus-addedtodynamicdropdown"],{},[(0,g.createElement)("div",["_3U8Br","_1wP6w","_23_WZ","_2qcpH","_3ghFm","_17Z60","_1Aph-","gs0RB"],{textContent:n}),(0,g.createElement)("div",["_2wOCj","xjR5v","_2qcpH","_17Z60","_1Aph-","gs0RB","splus-coursealiasing-exempt"],{textContent:(null==a?void 0:a.textContent)+": "+(null==c?void 0:c.textContent)}),(0,g.createElement)("div",["_2wOCj","xjR5v","_2qcpH","_17Z60","_1Aph-","gs0RB"],{textContent:null==d?void 0:d.textContent})]);l&&(u.style.maxWidth=l),s.appendChild(u)}let d=null==n?void 0:n.querySelector(".CjR09._8a6xl._1tpub > h2");if(d&&!d.querySelector(".splus-coursesdropdown-reorder-btn")){let e=(0,g.createElement)("img",["splus-coursesdropdown-reorder-btn","splus-addedtodynamicdropdown"],{src:"https://cdn-icons-png.flaticon.com/512/690/690319.png",title:"Reorder Courses",alt:"Reorder Icon"});e.onclick=()=>location.href="/courses?reorder",d.appendChild(e)}}));for(let o of document.querySelectorAll("#header nav ul > li button > span"))if("Courses"==o.textContent){n=null===(e=null==o?void 0:o.parentElement)||void 0===e?void 0:e.parentElement,null===(t=null==n?void 0:n.parentElement)||void 0===t||t.classList.add("splus-courses-navbar-button");break}n&&o.observe(n,{childList:!0,subtree:!0})}(),function(){var e,t,n;let o=null,i=new MutationObserver((function(e){if(!C(e))return;f.Logger.log("Processing groups dropdown mutation");let t,n=[],i=!1;for(let e of(null==o?void 0:o.querySelectorAll(x.rowSelector))||[]){t||(t=e.parentElement),6!=e.childElementCount&&(i=!0);for(let t of e.children)x.isSpacerTile(t)||n.push(t)}if(i){let e;for(;e=null==o?void 0:o.querySelector(x.rowSelector);)e.remove();for(;n.length>0;)null==t||t.appendChild(x.createTilesRow(n.splice(0,6),6))}}));for(let i of document.querySelectorAll("#header nav ul > li button > span"))if("Groups"==i.textContent){o=null===(e=null==i?void 0:i.parentElement)||void 0===e?void 0:e.parentElement,null===(n=null===(t=null==o?void 0:o.parentElement)||void 0===t?void 0:t.classList)||void 0===n||n.add("splus-groups-navbar-button");break}o&&i.observe(o,{childList:!0,subtree:!0})}(),function(){let e=document.querySelector("#header nav > ul:nth-child(1)"),t=function(){let t=null==e?void 0:e.querySelector('li > button[aria-label="More"]'),n=null==e?void 0:e.querySelector("li.splus-nav-resources-lowwidth"),o=null==e?void 0:e.querySelector("li.splus-nav-grades-directlink-lowwidth");if(t?t=t.parentElement:(n&&(n.style.display="initial"),o&&(o.style.display="none")),!t||t.classList.contains("splus-moremenu-gradesreadded"))return;t.classList.add("splus-moremenu-gradesreadded");let i=t.previousElementSibling;if(i.querySelector("a").href.endsWith("/resources")){i.classList.add("splus-nav-resources-lowwidth"),i.style.display="none";let e=document.createElement("li");e.classList.add("_24avl"),e.classList.add("_3Rh90"),e.classList.add("splus-nav-grades-directlink-lowwidth"),e.innerHTML='<a class="_1SIMq _2kpZl _3OAXJ _13cCs _3_bfp _2M5aC _24avl _3v0y7 _2s0LQ _3ghFm _3LeCL _31GLY _9GDcm _1D8fw util-height-six-3PHnk util-line-height-six-3lFgd util-text-decoration-none-1n0lI Header-header-button-active-state-3AvBm Header-header-button-1EE8Y sExtlink-processed" href="/grades/grades">Grades</a>',t.insertAdjacentElement("beforebegin",e)}else o&&(n&&(n.style.display="none"),o.style.display="initial")},n=new MutationObserver((function(n){C(n)&&(t(),function(){var t,n;let o=null==e?void 0:e.querySelector('li > div[role="menu"] > ul.util-flex-shrink-zero-3HoBE:nth-child(1)');if(!o||o.classList.contains("splus-moremenuentries-gradesprocessed"))return;o.classList.add("splus-moremenuentries-gradesprocessed"),null===(n=null===(t=null==o?void 0:o.querySelector('button[data-submenu="grades"]'))||void 0===t?void 0:t.parentElement)||void 0===n||n.remove();let i=o.firstElementChild,s=document.createElement("li");s.innerHTML='<a aria-label="Mastery Grades" href="/mastery" class="Header-header-button-active-state-3AvBm Header-header-drop-menu-3SaYV Header-header-drop-menu-item-3d3IZ _2JX1Q _1k0yk _1tpub _3_bfp _3ghFm xjR5v _3lLLU _2gJbx util-text-decoration-none-1n0lI">Mastery Grades</a>',i.insertAdjacentElement("afterend",s);let r=document.createElement("li");r.innerHTML='<a aria-label="Resources" href="/resources" class="Header-header-button-active-state-3AvBm Header-header-drop-menu-3SaYV Header-header-drop-menu-item-3d3IZ _2JX1Q _1k0yk _1tpub _3_bfp _3ghFm xjR5v _3lLLU _2gJbx util-text-decoration-none-1n0lI">Resources</a>',i.insertAdjacentElement("afterend",r)}())}));n.observe(e,{childList:!0,subtree:!0}),"complete"===document.readyState||"loading"!==document.readyState?t():document.addEventListener("DOMContentLoaded",(function(){t()}),!1)}(),new MutationObserver((function(e){if(!C(e))return;let t=document.querySelector("header.LGaPf h1._3eD4l._3UytQ._3v0y7._16XsF._8a6xl");if(!t||"Reorder Courses"!=t.textContent)return;let n=document.querySelectorAll('div._1Z0RM._1tpub._2V6ED._3xHd3.L1I_b._9GENG._3LeCL._34eht._349XD.fjQuT.uQOmx._17X0S._36TKt._3qXK_._3WTX2.Mcjpm._4iu5i.jDhMt._3WDJD.CrxjQ[role="dialog"][aria-labelledby*="reorder-ui"] div._1Z0RM._3skcp._5jizS._1tpub._1SnLN._3LeCL._3lLLU._2gJbx.Card-card-2rORL'),o=[];for(let e of n){let t=e.querySelector("img._2oHes");if(!t)continue;let n=e.querySelector("div._1wP6w._2s0LQ._2qcpH._1XYMV._17Z60._2oHes"),i=[];for(let e of(null==n?void 0:n.querySelectorAll("div:not([class])"))||[])i.push(e.textContent);t.alt="Profile picture for "+i.join(": "),o.push(t)}b.default.setProfilePictures(o)})).observe(document.body,{childList:!0,subtree:!0}),function(){r(this,void 0,void 0,(function*(){let e=null,t=null,n=document.getElementById("main-inner"),o=n&&"/home/course-dashboard"==window.location.pathname,i=!1,s="defaultOnly"===y.Settings.OverrideCourseIcons.value;if("disabled"!=y.Settings.OverrideCourseIcons.value&&(t=function(){var e,t,r;let a=[];if(o&&!i){let o=null==n?void 0:n.querySelectorAll(".course-dashboard .sgy-card-lens");if(o&&o.length>0){a=[];for(let n of o){if(s&&!(n.firstChild.data||n.firstChild.src||"").match(b.defaultCourseIconUrlRegex))continue;let o=n.firstChild.data||n.firstChild.src||"";for(;n.firstChild;)n.removeChild(n.firstChild);let i=document.createElement("img");i.src=o;let l=null===(r=null===(t=null===(e=n.parentElement)||void 0===e?void 0:e.querySelector(".course-dashboard__card-context-title"))||void 0===t?void 0:t.textContent)||void 0===r?void 0:r.replace("\n"," ");i.alt="Profile picture for "+l,i.classList.add("course-dashboard__card-lens-svg"),i.tabIndex=-1,n.appendChild(i),a.push(i)}i=!0}}b.default.setProfilePictures(a)},t()),y.Settings.CourseNicknames.value){let t=(yield(0,p.fetchApiJson)(`/users/${(0,p.getUserId)()}/sections`)).section;t.push(...yield Promise.all(Object.keys(y.Settings.CourseNicknames.value).filter((e=>!t.some((t=>t.id==e)))).filter((e=>y.Settings.CourseNicknames.nestedValue(e))).map((e=>(0,p.fetchApi)(`/sections/${e}`).then((e=>e.json().catch((e=>null))),(e=>null)))))),f.Logger.log("Classes loaded, building alias stylesheet");let n=window.document.styleSheets[0];for(let e in y.Settings.CourseNicknames.value)n.insertRule(`.course-name-wrapper-${e} {\n                visibility: hidden;\n                word-spacing:-999px;\n                letter-spacing: -999px;\n            }`,n.cssRules.length),n.insertRule(`.course-name-wrapper-${e}:after {\n                content: "${y.Settings.CourseNicknames.nestedValue(e)}";\n                visibility: visible;\n                word-spacing:normal;\n                letter-spacing:normal; \n            }`,n.cssRules.length);f.Logger.log("Applying aliases"),e=function(e){let n=document.body;if(!e||0!=e.length){e&&1==e.length&&(n=e[0].target);for(let e of t){if(!e||!y.Settings.CourseNicknames.nestedValue(e.id))continue;let t,o=[e.course_title+": "+e.section_title,e.course_title+" : "+e.section_title],i="course-name-wrapper-"+e.id;for(let t of o){(0,l.default)(n,{find:t,wrap:"span",wrapClass:i,portionMode:"first",filterElements:e=>!e.classList||!e.classList.contains("splus-coursealiasing-exempt")});let o=y.Settings.CourseNicknames.nestedValue(e.id);o&&(document.title=document.title.replace(t,o))}for(;t=document.querySelector(`span.${i}>span.${i}`);){let e=t.textContent,n=t.parentElement;for(;n.firstChild;)n.firstChild.remove();n.textContent=e}}}},e()}let r=!1,a=new MutationObserver((function(e){if(r)return;r=!0;let n=e.filter((function(e){for(let t of e.target.classList){if(t.startsWith("course-name-wrapper-"))return!1;if(t.includes("pendo"))return!1}return!0}));t&&n.length>0&&t(),r=!1}));t&&t(),a.observe(document.body,{childList:!0,subtree:!0})}))}(),function(){var e;function t(e,t,n,o){var i;if(!(null===(i=e.parentElement)||void 0===i?void 0:i.querySelector(`.grade-data${o?".splus-addedtodynamicdropdown":""}[data-assignment-id="${t}"]`))){let i,s=n[t].grade;null==s&&(1==n[t].exception?(s="—",i="Excused"):2==n[t].exception?(s="*",i="Incomplete"):3==n[t].exception&&(s="0*",i="Missing")),e.insertAdjacentElement("afterend",(0,g.createElement)("span",o?["grade-data","splus-addedtodynamicdropdown"]:["grade-data"],{textContent:` (${s} / ${n[t].max_points||0})`,dataset:{assignmentId:t},title:i}))}}let n=null===(e=document.querySelector('#header nav button[aria-label$="notifications"], #header nav button[aria-label$="notification"]'))||void 0===e?void 0:e.parentElement,o=function(){return r(this,void 0,void 0,(function*(){let e=yield(0,p.fetchApiJson)(`/users/${(0,p.getUserId)()}/grades`),t={};for(let n of e.section.reduce(((e,t)=>e.concat(t.period.reduce(((e,t)=>e.concat(t.assignment)),[]))),[]))t[n.assignment_id]=n,Object.freeze(n);return Object.freeze(t),t}))}(),i=new MutationObserver((function(e){var i,s,r,a,l,c,d;if(!C(e))return;chrome.runtime.sendMessage({type:"setBadgeText",text:""});let u=null!==(i=null==n?void 0:n.querySelectorAll('a[href^="/assignment/"]'))&&void 0!==i?i:[];u.length>0&&f.Logger.log("NotifsDropdown observation has links to process - processing now");for(let e of u){if(null==e.offsetParent)continue;if(!(null===(s=e.parentElement)||void 0===s?void 0:s.classList.contains("splus-people-are-assignments-corrected"))){let t=e.parentElement;if((null===(a=null===(r=null==t?void 0:t.firstElementChild)||void 0===r?void 0:r.textContent)||void 0===a?void 0:a.includes("grade"))&&(null===(c=null===(l=null==t?void 0:t.firstElementChild)||void 0===l?void 0:l.textContent)||void 0===c?void 0:c.includes("posted"))){for(let e of t.getElementsByTagName("span"))(null===(d=null==e?void 0:e.textContent)||void 0===d?void 0:d.includes("other people"))&&(e.textContent=e.textContent.replace("other people","other assignments"));t.classList.add("splus-people-are-assignments-corrected")}}let n=(e.href.match(/\d+/)||[])[0];n&&o.then((o=>{t(e,n,o,!0)}))}}));if(i.observe(n,{childList:!0,subtree:!0}),"/home/notifications"==window.location.pathname){let e=function(e){for(let n of e.querySelectorAll('.s-edge-type-grade-add a[href^="/assignment/"]')){if(null==n.offsetParent)continue;let e=(n.href.match(/\d+/)||[])[0];e&&o.then((o=>{t(n,e,o,!1)}))}},n=document.querySelector("#main-inner .item-list ul.s-notifications-mini"),i=new MutationObserver((function(){e(n)}));e(n),i.observe(n,{childList:!0})}let s=new MutationObserver((e=>{var t,n,i,s,r,a,l;for(let c of e)for(let e of c.addedNodes)if(e.classList.contains("popups-box")&&"grades"==(null===(i=null===(n=null===(t=e.querySelector(".popups-title .title"))||void 0===t?void 0:t.textContent)||void 0===n?void 0:n.trim())||void 0===i?void 0:i.toLowerCase())){for(let t of e.querySelectorAll(".popups-body .item-list li .user-item")){if(null==t.offsetParent)continue;let e=null===(l=null===(a=null===(r=null===(s=null==t?void 0:t.getElementsByTagName("a"))||void 0===s?void 0:s[1])||void 0===r?void 0:r.href)||void 0===a?void 0:a.match(/\d+/))||void 0===l?void 0:l[0];o.then((n=>{var o;null===(o=null==t?void 0:t.querySelector(".grade-added"))||void 0===o||o.insertAdjacentElement("beforebegin",(0,g.createElement)("span",["grade-data"],{textContent:` (${n[e].grade} / ${n[e].max_points||0})`}))}))}return}}));s.observe(document.body,{childList:!0})}(),new MutationObserver(((e,t)=>{var n;"true"==(null===(n=document.getElementById("body"))||void 0===n?void 0:n.getAttribute("aria-hidden"))?document.documentElement.style.overflow="hidden":document.documentElement.style.overflow=""})).observe(document.getElementById("body"),{attributes:!0,attributeFilter:["aria-hidden"]}),setTimeout((()=>{let e=document.querySelector(".assessment-delivery-landing-app div._3dHTa");e&&e.appendChild((0,g.createElement)("div",[],{id:"assessment-darktheme-warning-message",textContent:"WARNING: A dark theme is enabled and might prevent you from reading certain questions. If you can't read a question, you can temporarily disable dark theme using the Toggle Theme button on the navigation bar.",dataset:{popup:y.Settings.Popups.nestedValue("assessmentDarkThemeWarning",!0).toString()},style:{display:"none"}},[(0,g.createElement)("p",["click-to-hide"],{},[(0,g.createElement)("span",[],{textContent:"Hide this once",onclick:()=>{var e;return null===(e=document.getElementById("assessment-darktheme-warning-message"))||void 0===e?void 0:e.remove()}}),(0,g.createElement)("b",[],{textContent:" • "}),(0,g.createElement)("span",[],{textContent:"Never show again",onclick:()=>{y.Settings.Popups.nestedValue("assessmentDarkThemeWarning",!1),document.getElementById("assessment-darktheme-warning-message").dataset.popup="false"}})])]))}),1e3),T(),window.addEventListener("hashchange",(e=>{T()}))}))},t.preload=function(){return r(this,void 0,void 0,(function*(){f.Logger.log(`Loaded ${m.EXTENSION_NAME} version ${chrome.runtime.getManifest().version}${"Chrome"!=(0,g.getBrowser)()||chrome.runtime.getManifest().update_url?"":" (development version)"}`),document.documentElement.setAttribute("page",location.pathname),yield(0,S.updateSettings)(),function(){if(location.pathname.startsWith("/link")&&"enabled"===y.Settings.BypassLinkRedirects.value){let e=new URLSearchParams(location.search).get("path");e&&(location.href=e)}}(),f.Logger.debug("Finished loading preload.js")}))},t.loadBetaFeatures=w},3234:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.load=void 0;const i=n(3137),s=n(5913),r=n(5252),a=n(933),l=n(9792);function c(){return o(this,void 0,void 0,(function*(){alert(`API key access was denied. Please keep in mind many ${r.EXTENSION_NAME} features will not work correctly with this disabled. You can change this at any time from the ${r.EXTENSION_NAME} settings menu.`),(0,i.trackEvent)("update_setting",{id:"apistatus",context:"API Key Page",value:"denied",legacyTarget:"Change Access",legacyAction:"denied",legacyLabel:"API Key"}),yield l.Settings.ApiUser.setValue((0,s.getUserId)()),yield l.Settings.ApiStatus.setValue("denied"),location.pathname="/"}))}t.load=function(){return o(this,void 0,void 0,(function*(){let e=document.getElementById("edit-current-key"),t=document.getElementById("edit-current-secret");e&&t&&(yield function(e,t){return o(this,void 0,void 0,(function*(){if(e.parentElement.style.display="none",t.parentElement.style.display="none",-1===t.value.indexOf("*")){let n=e.value,o=t.value;(0,i.trackEvent)("update_setting",{id:"apistatus",context:"API Key Page",value:"allowed",legacyTarget:"Change Access",legacyAction:"allowed",legacyLabel:"API Key"}),yield l.Settings.ApiKey.setValue(n),yield l.Settings.ApiSecret.setValue(o),yield l.Settings.ApiUser.setValue((0,s.getUserId)()),yield l.Settings.ApiStatus.setValue("allowed"),location.pathname="/"}}))}(e,t)),function(e,t){let n=document.getElementById("center-inner");n.classList.add("splus-api-key-page"),n.parentElement.classList.add("splus-api-key-page"),n.prepend((0,a.createElement)("div",["splus-permissions-wrapper"],{},[(0,a.createElement)("div",["splus-permissions-box"],{},[(0,a.createElement)("div",["splus-permissions-icon-wrapper"],{},[(0,a.createElement)("img",["splus-permissions-icon"],{src:chrome.runtime.getURL("/imgs/logo-full.png")})]),(0,a.createElement)("div",["splus-permissions-header"],{},[(0,a.createElement)("h2",["splus-permissions-title"],{textContent:`${r.EXTENSION_NAME} Needs Access to Your Account`}),(0,a.createElement)("p",["splus-permissions-description"],{},[(0,a.createElement)("span",[],{textContent:`Due to a new security feature, ${r.EXTENSION_NAME} needs access to your Schoology API Key for the following features to work correctly:`}),(0,a.createElement)("div",["splus-permissions-section"],{},[(0,a.createElement)("ul",["splus-permissions-features-list"],{},[(0,a.createElement)("li",[],{textContent:"What-If Grades"}),(0,a.createElement)("li",[],{textContent:"Assignment Checkmarks"}),(0,a.createElement)("li",[],{textContent:"Quick Access"}),(0,a.createElement)("li",[],{textContent:"Courses in Common"})])]),(0,a.createElement)("span",[],{textContent:`By providing access to your API key, ${r.EXTENSION_NAME} can view extra details about the courses you're enrolled in.`}),(0,a.createElement)("div",["splus-permissions-section"],{},[(0,a.createElement)("strong",[],{textContent:`${r.EXTENSION_NAME} will never:`}),(0,a.createElement)("ul",["splus-permissions-never-list"],{},[(0,a.createElement)("li",[],{textContent:"Collect or store any personal information"}),(0,a.createElement)("li",[],{textContent:"Have access to your account's password"})])]),(0,a.createElement)("div",["splus-permissions-section"],{},[(0,a.createElement)("span",[],{textContent:"If you have any questions, you can"}),(0,a.createElement)("a",["splus-track-clicks"],{id:"api-key-page-github-link",textContent:" view our code on Github",href:"https://github.com/aopell/SchoologyPlus"}),(0,a.createElement)("span",["splus-track-clicks"],{id:"api-key-page-discord-link",textContent:" or"}),(0,a.createElement)("a",[],{textContent:" contact us on Discord",href:r.DISCORD_URL}),(0,a.createElement)("span",[],{textContent:`. You can change this setting at any time in the ${r.EXTENSION_NAME} settings menu.`})])])]),(0,a.createElement)("div",["splus-permissions-close"],{},[(0,a.createElement)("span",[],{textContent:"×",title:"Hide this message and show the original API key page (for developers)",onclick:function(){document.getElementsByClassName(".splus-permissions-wrapper")[0].style.display="none",e.parentElement.style.display="block",t.parentElement.style.display="block",document.getElementsByClassName("splus-api-key-page")[0].classList.remove("splus-api-key-page"),document.getElementsByClassName("splus-api-key-page")[0].classList.remove("splus-api-key-page"),document.getElementsByClassName("splus-api-key-footer")[0].style.display="none";let n=document.getElementById("edit-reveal")||document.getElementById("edit-request");n.value="Reveal Existing Secret",n.parentElement.classList.remove("splus-allow-access"),document.location.search="showkey"}})])])]));let o=document.getElementById("edit-reveal")||document.getElementById("edit-request");null===o?function(){let e=document.getElementsByClassName("splus-permissions-description")[0];e.append((0,a.createElement)("br",[],{})),e.append((0,a.createElement)("br",[],{})),e.append((0,a.createElement)("div",["splus-permissions-section"],{style:"background-color: var(--error, #F44336); color: var(--contrast-text, white); padding: var(--padding, 5px); border-radius: var(--border-radius, 0px);"},[(0,a.createElement)("span",[],{textContent:`It looks like your school or district has disabled API Key generation. Unfortunately, this means the above features will not work. The rest of ${r.EXTENSION_NAME}' features will still work, though!`}),(0,a.createElement)("div",["splus-permissions-section"],{},[(0,a.createElement)("a",["splus-permissions-link","splus-track-clicks"],{href:`${r.EXTENSION_WEBSITE}/docs/faq/api`,textContent:"Click Here to Read More",id:"api-key-disabled-read-more"})])])),"blocked"!==l.Settings.ApiStatus.value&&"allowed"!==l.Settings.ApiStatus.value&&((0,i.trackEvent)("update_setting",{id:"apistatus",context:"API Key Page",value:"blocked",legacyTarget:"Change Access",legacyAction:"blocked",legacyLabel:"API Key"}),l.Settings.ApiStatus.setValue("blocked")),e.appendChild((0,a.createButton)("api-key-disabled-back-to-home","Go Back to Homepage",(()=>location.pathname="/")))}():(o.parentElement.classList.add("splus-allow-access"),o.value="Allow Access",o.parentElement.insertAdjacentElement("afterend",(0,a.createElement)("div",["splus-api-key-footer"],{style:{textAlign:"center"}},[(0,a.createElement)("a",[],{href:"#",textContent:"Deny Access",onclick:c})])))}(e,t)}))}},5072:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.load=void 0;const i=n(933);t.load=function(){return o(this,void 0,void 0,(function*(){let e=[];"Firefox"==(0,i.getBrowser)()&&e.push((function(e){let t=e.querySelector("#popup_confirm");null==t||t.addEventListener("click",(function(){var t;window.wrappedJSObject.Drupal.settings.s_assessment_question_fill_form.confirm_submit=!1;for(let t of e.querySelectorAll(".popups-buttons input"))t.disabled=!0;null===(t=document.querySelector("input#edit-submit.form-submit.assessment-nav"))||void 0===t||t.click()}))})),e.push((function(e){let t=document.querySelectorAll(".review-page .no-answer-provided, .user-submissions .no-answer-provided").length;if(t>0){let n=e.style.height,o=/^(\d+)\s*px$/.exec(n);o&&o[1]&&(e.style.height=+o[1]+17+"px");let s=e.querySelector("div.popups-body-inner-has-buttons");if(!s)return;let r=document.createElement("span");r.append(...s.childNodes),s.appendChild(r),s.appendChild(document.createElement("br")),s.appendChild((0,i.createElement)("span",["no-answer-provided"],{textContent:"You have "+t+" unanswered question"+(1==t?".":"s.")}))}})),new MutationObserver((function(t){var n;for(let o of t)for(let t of o.addedNodes)if(t instanceof HTMLElement&&"DIV"==t.tagName&&t.id.startsWith("popups-")&&t.classList.contains("popups-box")&&"Confirm Submission"==(null===(n=t.querySelector(".popups-title .title"))||void 0===n?void 0:n.textContent))for(let n of e)n(t)})).observe(document.body,{childList:!0,subtree:!1})}))}},5703:function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,o,i)}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},r=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.load=void 0;const a=n(3137),l=n(5252),c=n(933),d=n(2589),u=s(n(5144)),p=n(412),h=n(9792),m=s(n(564));var g,f,v;function y(e,t){let n=document.getElementById("grading-scale-wrapper"),o=(0,c.createElement)("tr",["grade-symbol-row"],{},[(0,c.createElement)("td",[],{},[(0,c.createElement)("input",[],{type:"text",value:e||""})]),(0,c.createElement)("td",[],{},[(0,c.createElement)("input",[],{type:"text",value:t||""})]),(0,c.createElement)("td",[],{},[(0,c.createElement)("a",["close-button"],{textContent:"×",href:"#",title:"Delete Grade Symbol",onclick:e=>e.target.parentElement.parentElement.outerHTML=""})])]);null==n||n.appendChild(o)}function b(){let e={};for(let t of document.querySelectorAll(".grade-symbol-row")){let n=t.querySelectorAll("input");if(!n[0].value||!n[1].value)return alert("Values cannot be empty!"),null;e[n[0].value]=n[1].value}return e}function E(){return r(this,arguments,void 0,(function*(e=!1){let t=h.Settings.CourseGradingScales.value;if(!e){let e=b();if(null===e)return void alert("Values cannot be empty!");const n=(e,t)=>Object.keys(e).length===Object.keys(t).length&&Object.keys(e).every((n=>t.hasOwnProperty(n)&&e[n]===t[n]));t[g]&&n(e,t[g])||(0,a.trackEvent)("update_setting",{id:"gradingScales",context:"Course Settings",legacyTarget:"gradingScales",legacyAction:"set value",legacyLabel:"Course Settings"}),t[g]=e}let n=h.Settings.CourseNicknames.value,o=document.getElementById("setting-input-course-alias").value;o!==n[g]&&(0,a.trackEvent)("update_setting",{id:"courseAliases",context:"Course Settings",legacyTarget:"courseAliases",legacyAction:"set value",legacyLabel:"Course Settings"}),n[g]=o;let i=h.Settings.CourseQuickLinks.nestedValue(g),s=document.getElementById("setting-input-course-quicklink").value;s!==i&&(0,a.trackEvent)("update_setting",{id:"courseQuickLinks",context:"Course Settings",legacyTarget:"courseQuickLinks",legacyAction:"set value",legacyLabel:"Course Settings"}),h.Settings.CourseQuickLinks.setNestedValue(g,s);let r=h.Settings.ForceDefaultCourseIcons.value,l=document.getElementById("force-default-icon-splus-courseopt-select"),c=l.options[l.selectedIndex].value;c!==r[g]&&(0,a.trackEvent)("update_setting",{id:"forceDefaultCourseIcons",context:"Course Settings",value:c,legacyTarget:"forceDefaultCourseIcons",legacyAction:`set value: ${c}`,legacyLabel:"Course Settings"}),r[g]=c,yield h.Settings.CourseGradingScales.setValue(t),yield h.Settings.CourseNicknames.setValue(n),yield h.Settings.ForceDefaultCourseIcons.setValue(r),document.getElementById("save-course-settings").value="Saved!",setTimeout((()=>{location.reload()}),1e3)}))}function S(){return r(this,void 0,void 0,(function*(){let e=b();null!==e?confirm("Are you sure you want to set this as your default grading scale?\n\nThis will replace the grading scale for all courses except for those where you have already defined custom grading scales.\n\nThis will also save your course settings and reload the page.")&&(yield h.Settings.DefaultGradingScale.setValue(e),yield E(!0)):alert("Values cannot be empty!")}))}function _(){return r(this,void 0,void 0,(function*(){(0,a.trackEvent)("reset_settings",{context:"Course Settings",legacyTarget:"restore-course-defaults",legacyAction:"restore default values",legacyLabel:"Course Settings"});let e=h.Settings.CourseGradingScales.value;delete e[g];let t=h.Settings.CourseNicknames.value;delete t[g];let n=h.Settings.ForceDefaultCourseIcons.value;delete n[g];let o=h.Settings.CourseQuickLinks.value;delete o[g],confirm(`Are you sure you want to reset all options for the course "${f}" to their default values? This action is irreversible.`)&&(yield h.Settings.CourseGradingScales.setValue(e),yield h.Settings.CourseNicknames.setValue(t),yield h.Settings.ForceDefaultCourseIcons.setValue(n),yield h.Settings.CourseQuickLinks.setValue(o),alert("Settings restored. Reloading."),location.reload())}))}function x(e,t){var n,o;document.getElementById("course-options-course-name").textContent=t.courseName||"<UNKNOWN COURSE>",f=t.courseName,g=t.courseId?t.courseId:g;for(let e of document.querySelectorAll(".grade-symbol-row"))null===(n=e.parentElement)||void 0===n||n.removeChild(e);v=h.Settings.CourseGradingScales.nestedValue(g,v);for(let e of Object.keys(v).sort(((e,t)=>Number.parseFloat(e)-Number.parseFloat(t))).reverse())y(e,v[e]);let i=document.getElementById("setting-input-course-alias"),s=h.Settings.CourseNicknames.nestedValue(g);i.value=s||"",document.getElementById("setting-input-course-quicklink").value=h.Settings.CourseQuickLinks.nestedValue(g,"");let r=h.Settings.ForceDefaultCourseIcons.nestedValue(g);if(r){const e=document.getElementById("force-default-icon-splus-courseopt-select");for(let t of e.children)t.value==r&&(t.selected=!0)}const a=document.getElementById("request-course-icon-wrapper");if(a&&(a.outerHTML=""),(0,p.isLAUSD)()){let n=m.default.hasBuiltInIcon(t.courseName);null===(o=e.element.querySelector(".splus-modal-contents"))||void 0===o||o.appendChild((0,c.createElement)("div",["setting-entry"],{id:"request-course-icon-wrapper"},[(0,c.createElement)("h2",["setting-title"],{textContent:n?"Report Incorrect Icon: ":"Request Icon: "},[(0,c.createElement)("a",["splus-track-clicks"],{id:"request-course-icon-link",textContent:n?"Click here to report that the icon for this course is not correct":"Click here to request a built-in icon for this course",href:`${m.ICON_REQUEST_URL}${t.courseName}(WRONG ICON!!!)`,target:"_blank"})]),(0,c.createElement)("p",["setting-description"],{textContent:n?`Request that ${l.EXTENSION_NAME} change the built-in course icon for this course`:`Request that ${l.EXTENSION_NAME} adds a built-in course icon for this course`})]))}}t.load=function(){return r(this,void 0,void 0,(function*(){var e;!function(){let e=document.getElementById("sidebar-left");if(!e)return;let t=(0,c.createButton)("splus-course-options","Course Options"),n=(0,c.createSvgLogo)();Object.assign(n.style,{verticalAlign:"middle",paddingLeft:"4px",width:"18px"}),t.prepend(n),t.style.setProperty("height","36px","important");let o=t.querySelector("input");o.style.paddingLeft="4px",o.style.setProperty("height","36px","important"),t.style.cursor="pointer",t.addEventListener("click",(()=>{var e,t;return u.default.openModal("course-settings-modal",{courseId:null===(e=document.location.href.match(/\/(\d+)\//))||void 0===e?void 0:e[1],courseName:null===(t=document.querySelector(".page-title"))||void 0===t?void 0:t.textContent})})),e.appendChild(t)}(),u.default.modals.push(new u.default("course-settings-modal","Course Options",(0,c.createElement)("div",[],{},[(0,c.createElement)("div",["splus-modal-contents"],{},[(0,c.createElement)("div",["setting-entry"],{},[(0,c.createElement)("h1",["setting-title","splus-coursealiasing-exempt"],{id:"course-options-course-name"})]),(0,c.createElement)("div",["setting-entry"],{},[(0,c.createElement)("h2",["setting-title"],{},[(0,c.createElement)("label",["centered-label"],{textContent:"Nickname: ",htmlFor:"setting-input-course-alias"}),(0,c.createElement)("input",[],{type:"text",id:"setting-input-course-alias"},[])]),(0,c.createElement)("p",["setting-description"],{textContent:"A friendlier name for a course that shows anywhere the full name for the course would normally"})]),(0,c.createElement)("div",["setting-entry"],{},[(0,c.createElement)("h2",["setting-title"],{},[(0,c.createElement)("label",["centered-label"],{textContent:"Quick Link: ",htmlFor:"setting-input-course-quicklink"}),(0,c.createElement)("input",[],{type:"text",id:"setting-input-course-quicklink"},[])]),(0,c.createElement)("p",["setting-description"],{textContent:"A link associated with this class that will show up as a ⭐ button in Quick Access. Good uses of this setting might include Zoom links or class websites."})]),(0,c.createElement)("div",["setting-entry"],{},[(0,c.createElement)("h2",[],{textContent:"Grading Scale"}),(0,c.createElement)("p",["setting-description"],{textContent:"This grading scale is used to show letter grades when teachers don't set them, and for calculating the minimum score needed on an assignment for a grade"}),(0,c.createElement)("table",[],{id:"grading-scale-wrapper"},[(0,c.createElement)("tr",[],{},[(0,c.createElement)("th",[],{textContent:"Minimum Percentage"}),(0,c.createElement)("th",[],{textContent:"Grade Symbol"})])]),(0,c.createElement)("p",["add-grade-symbol"],{},[(0,c.createElement)("a",[],{textContent:"+ Add Grading Symbol",href:"#",onclick:e=>y()})]),(0,c.createElement)("p",["add-grade-symbol"],{},[(0,c.createElement)("a",[],{textContent:"> Set as default grading scale for all courses",href:"#",onclick:S})])]),(0,c.createElement)("div",["setting-entry"],{},[(0,c.createElement)("h2",["setting-title"],{textContent:"Force Default Icon: "},[(0,c.createElement)("select",[],{id:"force-default-icon-splus-courseopt-select"},[(0,c.createElement)("option",[],{textContent:"Enabled",value:"enabled"}),(0,c.createElement)("option",[],{textContent:"Disabled",value:"disabled",selected:!0})])]),(0,c.createElement)("p",["setting-description"],{textContent:`Use Schoology's icon for this course instead of the ${l.EXTENSION_NAME} themed icon regardless of the global ${l.EXTENSION_NAME} setting`})])]),(0,c.createElement)("div",["settings-buttons-wrapper"],void 0,[(0,c.createButton)("save-course-settings","Save Settings",(()=>E())),(0,c.createElement)("div",["settings-actions-wrapper"],{},[(0,c.createElement)("a",["restore-defaults"],{textContent:"Restore Defaults",onclick:_,href:"#"})])])]),u.modalFooterText,x)),null===(e=document.querySelector("#course-settings-modal .close"))||void 0===e||e.addEventListener("click",u.default.closeAllModals),v=(0,p.getGradingScale)(null),d.Logger.debug("Finished loading course.js")}))}},622:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.load=void 0;const s=i(n(1669)),r=n(3137),a=n(933),l=n(2589),c=i(n(5144)),d=n(9792),u=i(n(564));t.load=function(){return o(this,void 0,void 0,(function*(){var e,t;for(let n of document.querySelectorAll("li.course-item.list-item")){let o=n.parentNode,i=document.createElement("div");null==o||o.replaceChild(i,n),i.appendChild(n),n.prepend((0,a.createElement)("img",["course-list-icon"],{src:u.default.getIcon(null===(e=n.querySelector(".course-title"))||void 0===e?void 0:e.textContent)||chrome.runtime.getURL("imgs/fallback-course-icon.svg")}));let r=(0,a.createElement)("span",["courses-kabob-menu"],{textContent:"⠇",onclick:function(e){(0,s.default)(n).contextMenu({x:e.pageX,y:e.pageY})}});null===(t=n.querySelector("p.course-info"))||void 0===t||t.appendChild(r)}s.default.contextMenu({selector:"li.course-item.list-item",items:{options:{name:"Course Options",callback:function(e,t){(0,r.trackEvent)("context_menu_click",{id:"Course Options",context:"Courses Page",legacyTarget:"Course Options",legacyAction:"click",legacyLabel:"Courses Context Menu"}),c.default.openModal("course-settings-modal",{courseId:this[0].querySelector(".section-item").id.match(/\d+/)[0],courseName:`${this[0].querySelector(".course-title").textContent}: ${this[0].querySelector(".section-item").textContent}`})}},separator:"-----",materials:{name:"Materials",callback:function(e,t){(0,r.trackEvent)("context_menu_click",{id:"Materials",context:"Courses Page",legacyTarget:"Materials",legacyAction:"click",legacyLabel:"Courses Context Menu"}),window.open(`https://${d.Settings.DefaultDomain.value}/course/${this[0].querySelector(".section-item").id.match(/\d+/)[0]}/materials`,"_blank")}},updates:{name:"Updates",callback:function(e,t){(0,r.trackEvent)("context_menu_click",{id:"Updates",context:"Courses Page",legacyTarget:"Updates",legacyAction:"click",legacyLabel:"Courses Context Menu"}),window.open(`https://${d.Settings.DefaultDomain.value}/course/${this[0].querySelector(".section-item").id.match(/\d+/)[0]}/updates`,"_blank")}},student_grades:{name:"Grades",callback:function(e,t){(0,r.trackEvent)("context_menu_click",{id:"Grades",context:"Courses Page",legacyTarget:"Grades",legacyAction:"click",legacyLabel:"Courses Context Menu"}),window.open(`https://${d.Settings.DefaultDomain.value}/course/${this[0].querySelector(".section-item").id.match(/\d+/)[0]}/student_grades`,"_blank")}},mastery:{name:"Mastery",callback:function(e,t){(0,r.trackEvent)("context_menu_click",{id:"Mastery",context:"Courses Page",legacyTarget:"Mastery",legacyAction:"click",legacyLabel:"Courses Context Menu"}),window.open(`https://${d.Settings.DefaultDomain.value}/course/${this[0].querySelector(".section-item").id.match(/\d+/)[0]}/mastery`,"_blank")}},members:{name:"Members",callback:function(e,t){(0,r.trackEvent)("context_menu_click",{id:"Members",context:"Courses Page",legacyTarget:"Members",legacyAction:"click",legacyLabel:"Courses Context Menu"}),window.open(`https://${d.Settings.DefaultDomain.value}/course/${this[0].querySelector(".section-item").id.match(/\d+/)[0]}/members`,"_blank")}}}}),location.search.includes("reorder")&&setTimeout((()=>{var e;null===(e=document.querySelector("#reorder-ui .link-btn"))||void 0===e||e.click()}),750),l.Logger.debug("Finished loading courses.js")}))}},4422:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.load=void 0;const s=i(n(1669)),r=n(3137),a=n(5913),l=n(5252),c=n(933),d=n(2589),u=i(n(5144)),p=n(412),h=n(9792),m=window.location.href.includes("/course/");var g=null,f=[],v=[];function y(e="Unknown Error",t=!1,n=!1){g||(g={version:chrome.runtime.getManifest().version,errors:[],allCausedBy403:t,causedByNoApiKey:n}),g.errors.push(e),g.allCausedBy403=g.allCausedBy403&&t,g.causedByNoApiKey=g.causedByNoApiKey||n,d.Logger.debug(g,e,t,n)}function b(e){var t;let n=(0,c.createElement)("tr",["report-row","item-row","last-row-of-tier","grade-add-indicator"]);return n.dataset.parentId=e.dataset.id,n.innerHTML='<th scope="row" class="title-column clickable"><div class="reportSpacer-3"><div class="td-content-wrapper"><span class="title"><a class="sExtlink-processed">Add Assignment</a></span></div></div></th><td class="grade-column"><div class="td-content-wrapper"><span class="no-grade">—</span><div class="grade-wrapper"></div></div></td><td class="comment-column"><div class="td-content-wrapper"><span class="visually-hidden">No comment</span></div></td>',null===(t=n.getElementsByClassName("title")[0].firstElementChild)||void 0===t||t.addEventListener("click",(function(e){var t,o;"true"!==(null===(t=e.target)||void 0===t?void 0:t.contentEditable)?null===(o=n.querySelector("img.grade-edit-indicator"))||void 0===o||o.click():document.execCommand("selectall",!1,null)})),n}function E(){if(v.length>0){let[e,t]=v.shift();setTimeout((()=>{e().then((()=>{E()})).catch((n=>{d.Logger.warn("Caught error: ",n),d.Logger.log("Waiting 3 seconds to avoid rate limit"),n&&n.firstTryError&&403===n.firstTryError.status&&(t=100),t>3?d.Logger.warn("Maximum attempts reached; aborting"):v.push([e,t+1]),E()}))}),t>0?3e3:0)}}function S(e,t){let n=Math.floor(e),o=e-n;return n+Math.round(o*Math.pow(10,t))/Math.pow(10,t)}t.load=function(){return o(this,void 0,void 0,(function*(){document.documentElement.classList.add("splus-is-grades-page"),s.default.contextMenu({selector:".gradebook-course-title",items:{options:{name:"Course Options",callback:function(e,t){(0,r.trackEvent)("context_menu_click",{id:"Course Options",context:"Grades Page",legacyTarget:"Course Options",legacyAction:"click",legacyLabel:"Grades Context Menu"}),u.default.openModal("course-settings-modal",{courseId:this[0].parentElement.id.match(/\d+/)[0],courseName:this[0].querySelector("a span:nth-child(3)")?this[0].querySelector("a span:nth-child(2)").textContent:this[0].innerText.split("\n")[0]})}},grades:{name:"Change Grading Scale",callback:function(e,t){(0,r.trackEvent)("context_menu_click",{id:"Change Grading Scale",context:"Grades Page",legacyTarget:"Change Grading Scale",legacyAction:"click",legacyLabel:"Grades Context Menu"}),u.default.openModal("course-settings-modal",{courseId:this[0].parentElement.id.match(/\d+/)[0],courseName:this[0].querySelector("a span:nth-child(3)")?this[0].querySelector("a span:nth-child(2)").textContent:this[0].innerText.split("\n")[0]})}},separator:"-----",materials:{name:"Materials",callback:function(e,t){(0,r.trackEvent)("context_menu_click",{id:"Materials",context:"Grades Page",legacyTarget:"Materials",legacyAction:"click",legacyLabel:"Grades Context Menu"}),window.open(`https://${h.Settings.DefaultDomain.value}/course/${this[0].parentElement.id.match(/\d+/)[0]}/materials`,"_blank")}},updates:{name:"Updates",callback:function(e,t){(0,r.trackEvent)("context_menu_click",{id:"Updates",context:"Grades Page",legacyTarget:"Updates",legacyAction:"click",legacyLabel:"Grades Context Menu"}),window.open(`https://${h.Settings.DefaultDomain.value}/course/${this[0].parentElement.id.match(/\d+/)[0]}/updates`,"_blank")}},student_grades:{name:"Grades",callback:function(e,t){(0,r.trackEvent)("context_menu_click",{id:"Grades",context:"Grades Page",legacyTarget:"Grades",legacyAction:"click",legacyLabel:"Grades Context Menu"}),window.open(`https://${h.Settings.DefaultDomain.value}/course/${this[0].parentElement.id.match(/\d+/)[0]}/student_grades`,"_blank")}},mastery:{name:"Mastery",callback:function(e,t){(0,r.trackEvent)("context_menu_click",{id:"Mastery",context:"Grades Page",legacyTarget:"Mastery",legacyAction:"click",legacyLabel:"Grades Context Menu"}),window.open(`https://${h.Settings.DefaultDomain.value}/course/${this[0].parentElement.id.match(/\d+/)[0]}/mastery`,"_blank")}},members:{name:"Members",callback:function(e,t){(0,r.trackEvent)("context_menu_click",{id:"Members",context:"Grades Page",legacyTarget:"Members",legacyAction:"click",legacyLabel:"Grades Context Menu"}),window.open(`https://${h.Settings.DefaultDomain.value}/course/${this[0].parentElement.id.match(/\d+/)[0]}/members`,"_blank")}}}}),yield function(){return o(this,void 0,void 0,(function*(){var e;d.Logger.log(`Running ${l.EXTENSION_NAME} grades page improvement script`);let t=document.getElementById("main-inner")||document.getElementById("content-wrapper"),n=Array.from(null!==(e=null==t?void 0:t.getElementsByClassName("gradebook-course"))&&void 0!==e?e:[]),i=[],E=!1,_=20,x=[];for(let e of n)x.push(function(){return o(this,void 0,void 0,(function*(){var t,n,l,u,h;let m=e.querySelector(".gradebook-course-title"),g=e.querySelector(".summary-course"),v=m.parentElement.id.match(/\d+/)[0],E=null;if(g)E=g.querySelector(".awarded-grade");else try{let U=(yield(0,a.fetchApiJson)(`users/${(0,a.getUserId)()}/grades?section_id=${v}`)).section[0].final_grade;E=(0,c.createElement)("span",[],{textContent:`${U[U.length-1].grade.toString()}%`})}catch(H){E=null}let x=e.querySelector(".gradebook-course-grades").firstElementChild,w=x.firstElementChild,N=Array.from(w.getElementsByClassName("category-row")),O=Array.from(w.children),M=Array.from(e.getElementsByClassName("period-row")).filter((e=>!e.textContent.includes("(no grading period)"))),P=0,R=0,B=!0;i[Number.parseInt(((null===(t=m.textContent)||void 0===t?void 0:t.match(/\b[Pp][Ee]?[Rr]?[Ii]?[Oo]?[Dd]?\s*(\d+)/))||[null,(_++).toString()])[1])]=e,x.appendChild((0,c.createElement)("colgroup",[],{},[(0,c.createElement)("col",["assignment-column"]),(0,c.createElement)("col",["points-column"]),(0,c.createElement)("col",["comments-column"])]));let $=(0,c.createElement)("span",["grades-kabob-menu"],{textContent:"⠇",onclick:function(e){(0,s.default)(m).contextMenu({x:e.pageX,y:e.pageY}),m.click()}}),q=(0,c.createElement)("span",["awarded-grade","injected-title-grade",E?"grade-active-color":"grade-none-color"],{textContent:"LOADING"});m.appendChild($),m.appendChild(q);for(let j of M){let G=0,V=0,W=!1;for(let X of N.filter((e=>j.dataset.id==e.dataset.parentId)))try{let Y=O.filter((e=>X.dataset.id==e.dataset.parentId)),K=0,J=0,Q=function(e){return o(this,void 0,void 0,(function*(){var t,n,i;let l=e.querySelector(".max-grade"),u=e.querySelector(".rounded-grade")||e.querySelector(".rubric-grade-value");if(l||u||e.querySelector(".no-grade")||null===(t=e.querySelector(".grade-column > .td-content-wrapper"))||void 0===t||t.prepend((0,c.createElement)("span",["no-grade"],{textContent:"—"})),u&&l){let t=Number.parseFloat(u.textContent),n=Number.parseFloat(l.textContent.substring(3));e.classList.contains("dropped")||(K+=t,J+=n);let o=document.createElement("span");T(o,t,n),l.parentElement.appendChild(document.createElement("br")),l.parentElement.appendChild(o)}else C(e,v,j,X);if(e.querySelector(".missing")){let t=e.querySelector(".injected-assignment-percent");t.textContent="0%",t.title="Assignment missing",d.Logger.log(`Fetching max points for assignment ${null===(n=e.dataset.id)||void 0===n?void 0:n.substr(2)}`);let o=yield(0,a.fetchApiJson)(`users/${(0,a.getUserId)()}/grades?section_id=${v}`);if(0===o.section.length)throw new Error("Assignment details could not be read");const s=o.section[0].period.reduce(((e,t)=>e.concat(t.assignment)),[]);let r=Number.parseFloat(s.filter((t=>{var n;return t.assignment_id==(null===(n=e.dataset.id)||void 0===n?void 0:n.substr(2))}))[0].max_points);e.classList.contains("dropped")||(J+=r,d.Logger.log(`Max points for assignment ${null===(i=e.dataset.id)||void 0===i?void 0:i.substr(2)} is ${r}`))}let p=e.querySelector(".comment-column").firstElementChild,h=(0,c.createElement)("span",["kabob-menu"],{textContent:"⠇",onclick:function(t){(0,s.default)(e).contextMenu({x:t.pageX,y:t.pageY})}});h.dataset.parentId=e.dataset.parentId;let m=document.getElementById("enable-modify");m&&m.checked||h.classList.add("hidden"),p.insertAdjacentElement("beforeend",h),p.querySelector(".comment")&&(p.style.display="flex",p.style.justifyContent="space-between");let g=function(){return o(this,void 0,void 0,(function*(){let t=b(X);return e.classList.contains("hidden")&&t.classList.add("hidden"),e.insertAdjacentElement("afterend",t),yield Q(t),t}))},f=e.querySelector(".grade-wrapper"),y=document.getElementById("enable-modify"),E=null,S=(0,c.createElement)("img",["grade-edit-indicator"],{src:chrome.runtime.getURL("imgs/edit-pencil.svg"),width:12,style:`display: ${y&&y.checked?"unset":"none"};`});if(S.dataset.parentId=e.dataset.parentId,e.classList.contains("grade-add-indicator")){let t=!1;E=function(){return o(this,void 0,void 0,(function*(){if(t)return;e.classList.remove("grade-add-indicator"),e.classList.remove("last-row-of-tier"),e.classList.add("added-fake-assignment"),(0,r.trackEvent)("button_click",{id:"create-fake-assignment",context:"What-If Grades",legacyTarget:"assignment",legacyAction:"create-fake",legacyLabel:"What-If Grades"});let n=e.getElementsByClassName("title")[0].firstElementChild;n.textContent="Added Assignment (Click to Rename)",n.classList.add("editable-assignment-name"),n.contentEditable="true",n.addEventListener("keydown",(e=>{var t;13===e.which&&(e.target.blur(),null===(t=window.getSelection())||void 0===t||t.removeAllRanges())})),(yield g()).style.display="table-row",t=!0}))}}S.addEventListener("click",D(e,f.parentElement,X,j,E)),f.appendChild(S);const _=e.querySelector(".awarded-grade")||e.querySelector(".no-grade");null==_||_.addEventListener("click",D(e,f.parentElement,X,j,E)),e.classList.contains("last-row-of-tier")&&!e.classList.contains("grade-add-indicator")&&(yield g())}))},Z=!1;for(let ne of Y)try{yield Q(ne)}catch(oe){if("noapikey"===oe)y({error:{message:oe,name:oe,stack:void 0,full:JSON.stringify(oe)},courseId:v,course:m.textContent,assignment:ne.textContent},!1,!0);else{if(!ne.classList.contains("dropped")&&ne.querySelector(".missing")&&(Z=!0,f.push(X.dataset.id),"status"in oe&&403===oe.status)){y({error:{message:oe.error,status:oe.status},courseId:v,course:m.textContent,assignment:ne.textContent},!0,"noapikey"===oe);continue}y({error:{message:oe.message,name:oe.name,stack:oe.stack,full:JSON.stringify(oe)},courseId:v,course:m.textContent,assignment:ne.textContent},!1,"noapikey"===oe)}d.Logger.error("Error loading assignment for "+v+": ",ne,oe)}if(0===Y.length){null===(n=X.querySelector(".grade-column"))||void 0===n||n.classList.add("grade-column-center");let ie=function(){return o(this,void 0,void 0,(function*(){let e=b(X);return X.insertAdjacentElement("afterend",e),yield Q(e),e}))},se=(0,c.createElement)("img",["expandable-icon-grading-report","injected-empty-category-expand-icon"],{src:"/sites/all/themes/schoology_theme/images/expandable-sprite.png"});null===(l=X.querySelector("th .td-content-wrapper"))||void 0===l||l.prepend(se),X.classList.contains("hidden")||(yield ie())}let ee=X.querySelector(".awarded-grade")||X.querySelector(".no-grade");if(ee?A(ee,K,J,X):(ee=(0,c.createElement)("span",["awarded-grade"],{textContent:"—"}),null===(u=X.querySelector(".grade-column .td-content-wrapper"))||void 0===u||u.appendChild(ee),A(ee,K,J,X),I(X,0,0,!1,v)),ee.classList.remove("no-grade"),ee.classList.add("awarded-grade"),Z){let re=ee.parentElement.querySelector(".grade-column-center .max-grade");null==re||re.classList.add("max-grade-show-error"),W=!0}let te=X.querySelector(".percentage-contrib");B&&(te?"(100%)"==te.textContent?(P=K,R=J,G=K,V=J,B=!1):(P=0,R=0,G=0,V=0,B=!1):(P+=K,R+=J,G+=K,V+=J))}catch(ae){y({error:JSON.stringify(ae,Object.getOwnPropertyNames(ae)),category:X.textContent},!1,"noapikey"===ae)}let z=j.querySelector(".awarded-grade")||j.querySelector(".no-grade");if(z?A(z,G,V,j,0===V):(z=(0,c.createElement)("span",["awarded-grade"],{textContent:"—"}),null===(h=j.querySelector(".grade-column .td-content-wrapper"))||void 0===h||h.appendChild(z),A(z,G,V,j,0===V),L(j,0,0,!1,v)),0===R&&!B){let le=(0,c.createElement)("span",["splus-weighted-gradebook-indicator"],{textContent:"[Weighted]"}),ce=j.querySelector("span.percentage-contrib");ce&&ce.insertAdjacentElement("beforebegin",le)}if(W&&0!==R){let de=z.parentElement.querySelector(".grade-column-center .max-grade");null==de||de.classList.add("max-grade-show-error")}}q.textContent=E?E.textContent:"—",k(q,v);let F=M[0];if(function(){for(let e=0;e<4;e++)null!=F&&(F=F.parentElement)}(),null!=F&&0!=R&&1===M.length){let ue=F.querySelector(".gradebook-course-grades .summary-course"),pe=(0,p.getGradingScale)(v),he=P/R*100;if(ue){let me=Object.keys(pe).sort(((e,t)=>Number.parseFloat(t)-Number.parseFloat(e))).map((function(e){return{symbol:pe[e],minGrade:+e}})),ge=-1;for(let ve=0;ve<me.length;ve++)if(he>=me[ve].minGrade){ge=ve;break}function fe(){return(0,c.createSvgLogo)("splus-coursegradebox-taint")}if(ge>0){let ye=me[ge-1],be=S(ye.minGrade/100*R-P,2);ue.appendChild((0,c.createElement)("div",["total-points-wrapper"],{},[fe(),(0,c.createElement)("span",["total-points-title"],{textContent:"Points Needed:"}),(0,c.createElement)("span",["total-points-awarded"],{textContent:be.toString()}),(0,c.createElement)("span",["total-points-possible"],{textContent:" for "+ye.symbol})]))}if(ge<me.length-1){let Ee=me[ge+1],Se=S(P-me[ge].minGrade/100*R,2);ue.appendChild((0,c.createElement)("div",["total-points-wrapper"],{},[fe(),(0,c.createElement)("span",["total-points-title"],{textContent:"Point Buffer:"}),(0,c.createElement)("span",["total-points-awarded"],{textContent:Se.toString()}),(0,c.createElement)("span",["total-points-possible"],{textContent:" from "+Ee.symbol})]))}}}if((0,p.isLAUSD)())for(let _e=1;_e<M.length;_e++)M[_e].remove()}))}());if(!document.location.search.includes("past")||"1"!=document.location.search.split("past=")[1]){let e=document.getElementById("past-selector"),t=!0;if(null==e){let t=document.querySelector(".content-top-upper");t&&(e=t.insertAdjacentElement("afterend",document.createElement("div")))}if(null==e){let n=document.querySelector("#main-inner .download-grade-wrapper");if(n){let o=document.createElement("span");o.id="splus-gradeedit-checkbox-holder",n.prepend(o),n.classList.add("splus-gradeedit-checkbox-holder-wrapper"),e=o,t=!1}}let n=(0,c.createElement)("label",["modify-label"],{htmlFor:"enable-modify"},[(0,c.createElement)("span",[],{textContent:"Enable what-if grades"}),(0,c.createElement)("a",["splus-grade-help-btn"],{href:`${l.EXTENSION_WEBSITE}/docs/grades`,target:"_blank"},[(0,c.createElement)("span",["icon-help"])])]);t&&(null==e||e.appendChild(n)),null==e||e.appendChild((0,c.createElement)("input",["splus-track-clicks"],{type:"checkbox",id:"enable-modify",dataset:{splusTrackingContext:"What-If Grades"},onclick:function(){var e,t;let n=".item-row:not(.dropped):not(.grade-add-indicator):not(.added-fake-assignment)",o=".item-row.added-fake-assignment:not(.dropped):not(.grade-add-indicator)",i=".item-row.dropped:not(.grade-add-indicator)";if("denied"===h.Settings.ApiStatus.value)confirm("This feature requires access to your Schoology API Key, which you have denied. Would you like to enable access?")?((0,r.trackEvent)("button_click",{id:"api-denied-popup",context:"What-If Grades",value:"go-to-enabled",legacyTarget:"api-denied-popup",legacyAction:"go-to-enable",legacyLabel:"What-If Grades"}),location.pathname="/api"):(0,r.trackEvent)("button_click",{id:"api-denied-popup",context:"What-If Grades",value:"keep-disabled",legacyTarget:"api-denied-popup",legacyAction:"keep-disabled",legacyLabel:"What-If Grades"});else if("blocked"===h.Settings.ApiStatus.value)confirm("This feature requires access to your Schoology API Key, which has unfortunately been blocked by your school. If you think this might not be right, you can click OK to try and enable access again.")?((0,r.trackEvent)("button_click",{id:"api-blocked-popup",context:"What-If Grades",value:"go-to-enable",legacyTarget:"api-blocked-popup",legacyAction:"go-to-enable",legacyLabel:"What-If Grades"}),location.pathname="/api"):(0,r.trackEvent)("button_click",{id:"api-blocked-popup",context:"What-If Grades",value:"keep-blocked",legacyTarget:"api-blocked-popup",legacyAction:"keep-blocked",legacyLabel:"What-If Grades"});else if(g&&g.causedByNoApiKey)location.pathname="/api";else if(g&&!g.allCausedBy403){d.Logger.error("Editing disabled due to error",g),confirm(`Grade editing has been disabled due to an error. If you are trying to use What If Grades on the grade report page, try going to an individual class gradebook instead. If you are consistently getting this error, please reach out to the ${l.EXTENSION_NAME} Discord server.`);let e=document.getElementById("enable-modify");e&&(e.checked=!1)}else if(null===(e=document.getElementById("enable-modify"))||void 0===e?void 0:e.checked){g&&g.allCausedBy403&&confirm("WARNING!!!\n\nYou have one or more missing assignments for which the total points are unknown due to restrictions put in place by your teacher. Grade editing may work in some categories if this is a weighted gradebook, however it will be disabled in others.");for(let e of document.getElementsByClassName("grade-edit-indicator"))f.includes(e.dataset.parentId)||(e.style.display="unset");for(let e of document.getElementsByClassName("grade-add-indicator"))f.includes(e.dataset.parentId)||(e.style.display="table-row",(null===(t=e.previousElementSibling)||void 0===t?void 0:t.classList.contains("item-row"))&&e.previousElementSibling.classList.contains("last-row-of-tier")&&e.previousElementSibling.classList.remove("last-row-of-tier"));for(let e of document.getElementsByClassName("injected-empty-category-expand-icon"))e.style.visibility="visible";let e=function(e,t,n){var o,i,s,r,a;let l=null===(o=e.querySelector(".grade-wrapper"))||void 0===o?void 0:o.parentElement;if(!l)return void d.Logger.error("Could not calculate minimum grade: grade wrapper element missing",e);M(e,l);let c=l.querySelector(".no-grade"),u=l.querySelector(".rounded-grade")||l.querySelector(".rubric-grade-value")||l.querySelector(".no-grade"),p=l.querySelector(".max-grade"),h=0,m=0,g=c==u;if(u&&p)h=Number.parseFloat(u.textContent),m=Number.parseFloat(p.textContent.substring(3));else if(e.querySelector(".exception-icon.missing")&&p){let e=p.textContent.split("/");h=Number.parseFloat(e[0]),m=Number.parseFloat(e[1])}Number.isNaN(h)&&(h=0,null===(i=null==u?void 0:u.classList)||void 0===i||i.add("rounded-grade"),null===(s=null==u?void 0:u.classList)||void 0===s||s.remove("no-grade")),l.querySelector(".modified-score-percent-warning")||(l.appendChild(N()),E=!0);let f=e.dataset.parentId,v=Array.from(e.parentElement.getElementsByTagName("tr")).find((e=>e.dataset.id==f)),y=v.dataset.parentId,b=Array.from(e.parentElement.getElementsByTagName("tr")).find((e=>e.dataset.id==y)),S=0,_=null==b?void 0:b.querySelector(".grade-column-center");if(_&&0!==_.textContent.trim().length){let e=_.querySelector(".rounded-grade"),n=_.querySelector(".max-grade"),o=Number.parseFloat(null==e?void 0:e.textContent),i=Number.parseFloat(null==n?void 0:n.textContent.substring(3));g&&(i+=m),S=t*i-o}else{g&&(I(v,0,m,!0,n),L(b,0,m,!0,n),g=!1);let e=v.querySelector(".rounded-grade").parentNode,o=e.querySelector(".rounded-grade"),i=e.querySelector(".max-grade"),s=(Number.parseFloat(o.textContent),Number.parseFloat(i.textContent.substring(3)));g&&(s+=m);let l=0,c=0,d=0;for(let e of null!==(a=null===(r=b.parentElement)||void 0===r?void 0:r.querySelectorAll(`.category-row[data-parent-id="${b.dataset.id}"]`))&&void 0!==a?a:[]){let t=e.getElementsByClassName("percentage-contrib")[0];if(!t)continue;let n=t.textContent,o=e.getElementsByClassName("grade-column-right")[0],i=o?o.textContent.match(/(\d+\.?\d*)%/):null;if(i){let t=Number.parseFloat(i[1]);if((t||0===t)&&!Number.isNaN(t)){l+=Number.parseFloat(n.slice(1,-2))/100*t;let o=Number.parseFloat(n.slice(1,-2));c+=o,e.dataset.id==f&&(d=o/100)}}}c/=100,c>0&&c<1?(l/=c,d/=c):c<1e-5&&(l=100),l/=100,S=(t-l)/(d/s)}S<-h&&(S=-h),S=Math.ceil(100*S)/100;const x=Math.round(100*(h+S))/100;u&&(u.title=x.toString(),u.textContent=x.toString()),T(e.querySelector(".injected-assignment-percent"),x,m),I(v,S,g?m:0,!0,n),L(b,S,g?m:0,!0,n)},a=function(){var e,t,n;(0,r.trackEvent)("context_menu_click",{id:"Drop",context:"What-If Grades",legacyTarget:"assignment",legacyAction:"drop",legacyLabel:"What-If Grades"}),this[0].classList.add("dropped");let o=null===(e=this[0].querySelector(".grade-wrapper"))||void 0===e?void 0:e.parentElement,i=(null==o?void 0:o.querySelector(".rounded-grade"))||(null==o?void 0:o.querySelector(".rubric-grade-value")),s=null==o?void 0:o.querySelector(".max-grade"),a=0,l=0;if(i&&s)a=Number.parseFloat(i.textContent),l=Number.parseFloat(s.textContent.substring(3));else if(this[0].classList.contains("contains-exception")&&s){let e=s.textContent.split("/");a=Number.parseFloat(e[0]),l=Number.parseFloat(e[1]),Number.isNaN(a)&&(a=0),this[0].querySelector(".exception-icon.missing")||(a=0,l=0)}o&&!o.querySelector(".modified-score-percent-warning")&&(o.appendChild(N()),E=!0);let c=this[0].dataset.parentId,d=Array.prototype.find.call(null===(t=this[0].parentElement)||void 0===t?void 0:t.getElementsByTagName("tr"),(e=>e.dataset.id==c)),u=d.dataset.parentId,p=Array.prototype.find.call(null===(n=this[0].parentElement)||void 0===n?void 0:n.getElementsByTagName("tr"),(e=>e.dataset.id==u)),h=p.dataset.parentId;I(d,-a,-l,!0,h),L(p,-a,-l,!0,h)},l={drop:{name:"Drop",callback:a},delete:{name:"Delete",callback:function(){a.bind(this)(),this[0].remove()}},separator:"-----",calculateMinGrade:{name:"Calculate Minimum Grade",callback:function(t,n){let o=this[0].dataset.parentId,i=Array.from(this[0].parentElement.getElementsByTagName("tr")).find((e=>e.dataset.id==o)).dataset.parentId,s=Array.from(this[0].parentElement.getElementsByTagName("tr")).find((e=>e.dataset.id==i)),a=Number.parseInt(/course-(\d+)$/.exec(this[0].parentElement.parentElement.parentElement.parentElement.id)[1]).toString(),l=(0,p.getGradingScale)(a),c=w(l,Number.parseFloat(/\d+(\.\d+)%/.exec(s.querySelector(".grade-column-right").firstElementChild.textContent)[0].slice(0,-1))),d=.9;for(let e in l)if(l[e]==c){d=Number.parseFloat(e)/100;break}(0,r.trackEvent)("context_menu_click",{id:"Calculate Minimum Grade",context:"What-If Grades",legacyTarget:"assignment",legacyAction:"calc-min",legacyLabel:"What-If Grades"}),e(this[0],d,a)},items:{}}},c={drop:l.drop,separator:l.separator,calculateMinGrade:l.calculateMinGrade};for(let t of document.getElementsByClassName("gradebook-course")){let i={},a={};i.items={},Object.assign(i.items,c),i.items.calculateMinGrade={},Object.assign(i.items.calculateMinGrade,c.calculateMinGrade),i.items.calculateMinGrade.items=a,i.selector="#"+t.id+" ";let d=/\d+$/.exec(t.id)[0],h=(0,p.getGradingScale)(d);for(let t of Object.keys(h).sort(((e,t)=>Number.parseFloat(t)-Number.parseFloat(e)))){let n=h[t];a["calculateMinGradeFor"+t]={name:"For "+n+" ("+t+"%)",callback:function(o,i){(0,r.trackEvent)("context_menu_click",{id:"Calculate Minimum Grade For...",context:"What-If Grades",value:n,legacyTarget:"assignment",legacyAction:`calc-min-for-${n}`,legacyLabel:"What-If Grades"}),e(this[0],Number.parseFloat(t)/100,d)}}}a.separator1="-----",a.calculateMinGradeForCustom={name:"For Custom Value",callback:function(t,n){(0,r.trackEvent)("context_menu_click",{id:"Calculate Minimum Grade For Custom Value",context:"What-If Grades",value:"custom-value",legacyTarget:"assignment",legacyAction:"calc-min-for-custom",legacyLabel:"What-If Grades"});let o=prompt("Please enter a grade to calculate for (a number on the scale of 0 to 100)");null===o||Number.isNaN(o)||Number.isNaN(Number.parseFloat(o))?alert("Invalid number"):e(this[0],Number.parseFloat(o)/100,d)}},a.separator2="-----",a.courseOptions={name:"Change Grade Boundaries",callback:function(){let e=this[0].closest(".gradebook-course"),t=m?document.querySelector(".page-title"):e.querySelector(".gradebook-course-title");(0,r.trackEvent)("context_menu_click",{id:"Change Grade Boundaries",context:"What-If Grades",legacyTarget:"assignment",legacyAction:"change-boundaries",legacyLabel:"What-If Grades"}),u.default.openModal("course-settings-modal",{courseId:e.id.match(/\d+/)[0],courseName:t.querySelector("a span:nth-child(3)")?t.querySelector("a span:nth-child(2)").textContent:t.innerText.split("\n")[0]})}};let g=Object.assign({},i);g.selector+=n;let f=Object.assign({},i);f.selector+=o,f.items=Object.assign({},i.items),f.items.drop=l.delete,s.default.contextMenu(g),s.default.contextMenu(f)}s.default.contextMenu({selector:i,items:{undrop:{name:"Undrop",callback:function(e,t){(0,r.trackEvent)("context_menu_click",{id:"Undrop",context:"What-If Grades",legacyTarget:"assignment",legacyAction:"undrop",legacyLabel:"What-If Grades"}),this[0].classList.remove("dropped");let n=this[0].querySelector(".grade-wrapper").parentElement;M(this[0],n);let o=n.querySelector(".rounded-grade")||n.querySelector(".rubric-grade-value"),i=n.querySelector(".max-grade"),s=0,a=0;if(o&&i)s=Number.parseFloat(o.textContent),a=Number.parseFloat(i.textContent.substring(3));else if(i&&this[0].querySelector(".exception-icon.missing")){let e=i.textContent.split("/");s=Number.parseFloat(e[0]),a=Number.parseFloat(e[1])}n.querySelector(".modified-score-percent-warning")||(n.appendChild(N()),E=!0);let l=this[0].dataset.parentId,c=Array.from(this[0].parentElement.getElementsByTagName("tr")).find((e=>e.dataset.id==l)),d=c.dataset.parentId,u=Array.from(this[0].parentElement.getElementsByTagName("tr")).find((e=>e.dataset.id==d)),p=u.dataset.parentId;I(c,s,a,!0,p),L(u,s,a,!0,p)}}}});for(let e of document.getElementsByClassName("kabob-menu"))f.includes(e.dataset.parentId)||e.classList.remove("hidden")}else if(E)confirm("Disabling grade edits now will reload the page and erase all existing modified grades. Proceed?")?document.location.reload():document.getElementById("enable-modify").checked=!0;else{for(let e of document.getElementsByClassName("grade-edit-indicator"))e.style.display="none";for(let e of document.getElementsByClassName("grade-add-indicator"))e.style.display="none",e.previousElementSibling.classList.contains("item-row")&&!e.previousElementSibling.classList.contains("last-row-of-tier")&&e.previousElementSibling.classList.add("last-row-of-tier");for(let e of document.getElementsByClassName("kabob-menu"))e.classList.add("hidden");for(let e of document.getElementsByClassName("gradebook-course"))s.default.contextMenu("destroy","#"+e.id+" "+n),s.default.contextMenu("destroy","#"+e.id+" "+o);for(let e of document.getElementsByClassName("injected-empty-category-expand-icon"))e.style.visibility="hidden";s.default.contextMenu("destroy",i)}}})),t||null==e||e.appendChild(n)}for(let e of x)yield e;if((!document.location.search.includes("past")||"1"!=document.location.search.split("past=")[1])&&"period"==h.Settings.CourseOrderMethod.value)for(let e of i)e&&e.parentElement.appendChild(e);function w(e,t){let n=Object.keys(e).sort(((e,t)=>Number.parseFloat(t)-Number.parseFloat(e)));for(let o of n)if(t>=Number.parseInt(o))return e[o];return"?"}function C(e,t,n,i){var s,r,l,u,p,h;let m=e.getElementsByClassName("no-grade")[0],g=e.getElementsByClassName("awarded-grade")[0],b=!1;if(!m&&g&&(d.Logger.log(`Found assignment (ID ${null===(s=e.dataset.id)||void 0===s?void 0:s.substr(2)}) with only letter-grade showing`),b=!0,g.textContent+=" ",m=document.createElement("span"),m.classList.add("no-grade"),m.textContent="—",g.insertAdjacentElement("afterend",m)),!m)return void d.Logger.log(`Error loading potentially nonentered assignment with ID ${null===(r=e.dataset.id)||void 0===r?void 0:r.substr(2)}`);if((null===(l=m.parentElement)||void 0===l?void 0:l.classList.contains("exception-grade-wrapper"))&&(m.remove(),e.classList.add("contains-exception"),m=e.querySelector(".exception .exception-icon"),m)){let t=e.querySelector(".exception .exception-text");m.title=null!==(u=null==t?void 0:t.textContent)&&void 0!==u?u:"<ERR>",null==t||t.remove()}if(m&&e.dataset.id){let s=document.createElement("span");s.classList.add("max-grade"),s.classList.add("no-grade"),s.textContent=" / —",m.insertAdjacentElement("afterend",s);let r=()=>o(this,void 0,void 0,(function*(){var o;let r=null===(o=e.dataset.id)||void 0===o?void 0:o.substr(2);d.Logger.log(`Fetching max points for (nonentered) assignment ${r}`);let l=null,u=null;try{l=yield(0,a.fetchApi)(`sections/${t}/assignments/${r}`)}catch(e){u=e}if(l&&!l.ok)u={status:l.status,error:l.statusText};else if(l)try{let e=yield l.json();e&&void 0!==e.max_points?(s.textContent=" / "+e.max_points,s.classList.remove("no-grade")):u="JSON returned without max points"}catch(e){u=e}if(u||b){u&&d.Logger.log(`Error directly fetching max points for (nonentered) assignment ${r}, reverting to list-search`),b&&d.Logger.log(`Finding grade for letter-grade-only assignment ${r} from list-search`);try{if(l=yield(0,a.fetchApi)(`users/${(0,a.getUserId)()}/grades?section_id=${t}`),!l.ok)throw{status:l.status,error:l.statusText};let e=yield l.json();if(!(e&&e.section.length>0))throw b&&(y("Letter grade only assignment can't load point values",!0,!1),f.push(i.dataset.id)),"List search failed to obtain meaningful response";{let o=e.section[0].period.flatMap((e=>e.assignment)).filter((e=>e.assignment_id==Number.parseInt(r)))[0];if(b&&void 0!==o.grade){let e=(0,c.createElement)("span",["numeric-grade-value"],{},[(0,c.createElement)("span",["rounded-grade"],{title:String(o.grade),textContent:String(o.grade)})]);g.insertAdjacentElement("beforeend",e),m&&(m.outerHTML=""),I(i,Number.parseFloat(o.grade),Number.parseFloat(o.max_points),!1,t),L(n,Number.parseFloat(o.grade),Number.parseFloat(o.max_points),!1,t)}u&&(s.textContent=" / "+o.max_points,s.classList.remove("no-grade"))}}catch(e){throw{listSearchErr:e,firstTryError:u}}}}));v.push([r,0])}null===(p=null==m?void 0:m.parentElement)||void 0===p||p.appendChild(document.createElement("br"));let E=(0,c.createElement)("span",["percentage-grade","injected-assignment-percent"],{textContent:"N/A"});null===(h=null==m?void 0:m.parentElement)||void 0===h||h.appendChild(E)}function T(e,t,n){e.textContent=0===n?"EC":`${Math.round(100*t/n)}%`,e.title=0===n?"Extra Credit":100*t/n+"%",e.classList.contains("max-grade")||e.classList.add("max-grade"),e.classList.contains("injected-assignment-percent")||e.classList.add("injected-assignment-percent")}function A(e,t,n,o,i=!1){var s,r,a;if(!e)return;let l=o.parentElement.firstElementChild.dataset.id,d=e.parentElement.textContent;e.parentElement.classList.add("grade-column-center"),e.innerHTML="",e.appendChild((0,c.createElement)("span",["rounded-grade"],{textContent:i?"":(Math.round(100*t)/100).toString()})),e.appendChild((0,c.createElement)("span",["max-grade"],{textContent:i?"":" / "+Math.round(100*n)/100}));let u=o.querySelector(".comment-column").firstChild;u.textContent=d,k(u,l),null===(s=u.parentElement)||void 0===s||s.classList.remove("comment-column"),null===(r=u.parentElement)||void 0===r||r.classList.add("grade-column"),null===(a=u.parentElement)||void 0===a||a.classList.add("grade-column-right")}function k(e,t){let n=(0,p.getGradingScale)(t);if("disabled"!=h.Settings.CustomGradingScales.value&&null!==e.textContent.match(/^\d+\.?\d*%/)){let t=Number.parseFloat(e.textContent.substr(0,e.textContent.length-1)),o=w(n,t);e.textContent=`${o} (${t}%)`,e.title=`Letter grade calculated by ${l.EXTENSION_NAME} using the following grading scale:\n${Object.keys(n).sort(((e,t)=>Number.parseFloat(e)-Number.parseFloat(t))).reverse().map((e=>`${n[e]}: ${e}%`)).join("\n")}\nTo change this grading scale, find 'Course Options' on the page for this course`}}function N(){return(0,c.createElement)("img",["modified-score-percent-warning"],{src:chrome.runtime.getURL("imgs/exclamation-mark.svg"),title:"This grade has been modified from its true value."})}function I(e,t,n,o=!0,i){let s=e.querySelector(".rounded-grade").parentNode,r=s.querySelector(".rounded-grade"),a=s.querySelector(".max-grade"),l=Number.parseFloat(r.textContent)+t,c=Number.parseFloat(a.textContent.substring(3))+n;r.textContent=S(l,2).toString(),a.textContent=" / "+S(c,2),o&&!s.querySelector(".modified-score-percent-warning")&&s.appendChild(N());let d=e.querySelector(".grade-column-right").firstElementChild,u=d;for(;u.firstChild;)u.firstChild.remove();u.appendChild(document.createElement("span")),u=u.firstElementChild,u.classList.add("awarded-grade"),u.appendChild(document.createElement("span")),u=u.firstElementChild,u.classList.add("numeric-grade"),u.classList.add("primary-grade"),u.appendChild(document.createElement("span")),u=u.firstElementChild,u.classList.add("rounded-grade");let p=l/c*100;u.title=p+"%",u.textContent=Math.round(100*p)/100+"%",o&&!d.querySelector(".modified-score-percent-warning")&&d.prepend(N()),i&&k(u,i)}function L(e,t,n,o=!0,i){let s=e.querySelector(".grade-column-right").firstElementChild,r=s;for(;r.firstChild;)r.firstChild.remove();r.appendChild(document.createElement("span")),r=r.firstElementChild,r.classList.add("awarded-grade"),r.appendChild(document.createElement("span")),r=r.firstElementChild,r.classList.add("numeric-grade"),r.classList.add("primary-grade"),s=r,r.appendChild(document.createElement("span")),r=r.firstElementChild,r.classList.add("rounded-grade");let a=e.querySelector(".grade-column-center");if(a&&0!==a.textContent.trim().length){let e=a.querySelector(".rounded-grade"),i=a.querySelector(".max-grade"),s=Number.parseFloat(e.textContent)+t,l=Number.parseFloat(i.textContent.substring(3))+n;e.textContent=S(s,2).toString(),i.textContent=" / "+S(l,2),o&&!a.querySelector(".modified-score-percent-warning")&&a.appendChild(N());let c=s/l*100;r.title=c+"%",r.textContent=Math.round(100*c)/100+"%"}else{let t=0,n=0;for(let o of e.parentElement.querySelectorAll(`.category-row[data-parent-id="${e.dataset.id}"]`)){let e=o.getElementsByClassName("percentage-contrib")[0];if(!e)continue;let i=e.textContent,s=o.getElementsByClassName("grade-column-right")[0],r=s?s.textContent.match(/(\d+\.?\d*)%/):null;if(r){let e=Number.parseFloat(r[1]);Number.isNaN(e)||(t+=Number.parseFloat(i.slice(1,-2))/100*e,n+=Number.parseFloat(i.slice(1,-2)))}}n/=100,n>0&&n<1?t/=n:n<1e-5&&(t=100),r.title=t+"%",r.textContent=Math.round(100*t)/100+"%"}i&&k(r,i),s=e.querySelector(".grade-column-right").firstElementChild,o&&!s.querySelector(".modified-score-percent-warning")&&s.prepend(N())}function O(e,t,n){if(Number.isNaN(t))return Number.NaN;let o,i=/^(-?[0-9]+(\.[0-9]+)?)%$/.exec(e);if(Number.isFinite(t)&&i&&i[1]&&(o=t*Number.parseFloat(i[1])/100,!Number.isNaN(o)))return o;if(o=Number.parseFloat(e),!Number.isNaN(o))return o;if(Number.isFinite(t)&&n){let i=(0,p.getGradingScale)(n);for(let n in i)if(e==i[n]){o=Number.parseFloat(n)/100*t;break}}return Number.isFinite(o)?o:Number.NaN}function M(e,t,n,o,i){var s,r;t||(t=e.querySelector(".grade-column .td-content-wrapper"));let a=t.querySelector(".grade-wrapper");if(!n&&!(n=t.querySelector(".exception-icon")))return{};o||(o=t.querySelector(".rounded-grade")||t.querySelector(".rubric-grade-value")),i||(i=t.querySelector(".max-grade"));let l=n.classList.contains("missing"),d=(0,c.createElement)("span",[l?"rounded-grade":"no-grade"],{textContent:l?"0":"—"});l&&(d=(0,c.createElement)("span",["awarded-grade"],{},[d,i]));let u=null===(s=n.parentElement)||void 0===s?void 0:s.parentElement,p=n.parentElement;n.insertAdjacentElement("afterend",d),n.remove();let h=Array.from(null!==(r=null==p?void 0:p.childNodes)&&void 0!==r?r:[]),m=h.splice(h.findIndex((e=>"BR"==e.tagName)));h.reverse(),m.reverse();for(let e=0;e<h.length;e++)t.insertAdjacentElement("afterbegin",h[e]);for(let e=0;e<m.length;e++)null==a||a.insertAdjacentElement("afterend",m[e]);null==u||u.remove(),e.classList.remove("contains-exception")}function D(e,t,n,o,i){return function(){(0,r.trackEvent)("button_click",{id:"change-assignment-grade",context:"What-If Grades",legacyTarget:"assignment",legacyAction:"change-grade",legacyLabel:"What-If Grades"}),M(e,t);let s,a,l=t.querySelector(".no-grade"),u=t.querySelector(".rounded-grade")||t.querySelector(".rubric-grade-value"),p=t.querySelector(".max-grade"),h=null;if(l&&(h=l,s=0,a=0,p&&p.classList.contains("no-grade")&&(p.remove(),p=null)),u&&p&&(h=u,s=Number.parseFloat(u.textContent),a=Number.parseFloat(p.textContent.substring(3))),!h||h.classList.contains("student-editable"))return;h.classList.add("student-editable"),h.contentEditable="true";let m=Number.parseInt(/course-(\d+)$/.exec(o.parentElement.parentElement.parentElement.parentElement.id)[1]).toString(),g=function(e){return 13!=e.which&&13!=e.keyCode||(null==h||h.blur(),!1)},f=function(){if(function(){if(!(null==h?void 0:h.classList.contains("student-editable")))return!0;let r,g;if(l){if(p)g=Number.parseFloat(p.textContent.substring(3)),r=O(l.textContent,g,m);else{let e=/^(-?\d+(\.\d+)?)\s*\/\s*(-?\d+(\.\d+)?)$/.exec(h.textContent);if(!e)return!1;g=Number.parseFloat(e[3]),r=O(e[1],g,m)}if(Number.isNaN(r)||Number.isNaN(g))return!1}else{if(!u)return d.Logger.warn("unexpected case of field type in editing grade"),!1;if(r=O(u.textContent,a,m),g=a,Number.isNaN(r))return!1}let f=r-s,v=g-a;if(l){p||(p=(0,c.createElement)("span",["max-grade"],{textContent:" / "+g}),t.prepend(p));let e=(0,c.createElement)("span",["awarded-grade"]);u=(0,c.createElement)("span",["rounded-grade"],{title:r.toString(),textContent:r.toString()}),e.appendChild(u),t.prepend(u),l.remove()}else u&&p&&(u.title=r.toString(),u.textContent=r.toString(),p.textContent=" / "+g,u.contentEditable="false",u.classList.remove("student-editable"),u.parentElement&&u.parentElement.parentElement&&"SPAN"===u.parentElement.parentElement.tagName.toUpperCase()&&u.parentElement.parentElement.classList.contains("awarded-grade")&&/^[A-DF] /.test(u.parentElement.parentElement.textContent)&&u.parentElement.parentElement.childNodes[0].remove());return T(t.querySelector(".injected-assignment-percent"),r,g),t.querySelector(".modified-score-percent-warning")||(t.appendChild(N()),E=!0),e.classList.contains("dropped")?(i&&i(),!0):(I(n,f,v,!0,m),L(o,f,v,!0,m),i&&i(),!0)}()){null==h||h.removeEventListener("blur",f),null==h||h.removeEventListener("keydown",g);var r=window.getSelection?window.getSelection():document.getSelection();r&&(r.removeAllRanges?r.removeAllRanges():r.empty&&r.empty())}else null==h||h.focus();return!1};h.addEventListener("blur",f),h.addEventListener("keydown",g),h.focus(),document.execCommand("selectAll",!1,null)}}}))}(),d.Logger.log("Retrieving ("+v.length+") nonentered assignments info..."),E()}))}},9897:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.load=void 0;const s=i(n(2838)),r=n(3137),a=n(5913),l=n(5252),c=n(933),d=n(2589),u=i(n(5144)),p=n(412),h=n(9792),m=n(1973);function g(e){var t;let n=(0,c.createElement)("li",["splus-broadcast-post"],{id:`broadcast${e.id}`,dataset:{timestamp:((e.timestamp?new Date(e.timestamp).getTime():Date.now())/1e3).toString()}},[(0,c.createElement)("div",["s-edge-type-update-post","sUpdate-processed"],{},[(0,c.createElement)("div",["edge-item"],{},[(0,c.createElement)("div",["edge-left"],{},[(0,c.createElement)("div",["picture"],{},[(0,c.createElement)("a",["sExtlink-processed"],{href:"",title:`${l.EXTENSION_NAME} Broadcast`},[(0,c.createElement)("div",["profile-picture-wrapper"],{},[(0,c.createElement)("div",["profile-picture"],{},[(0,c.createElement)("img",["imagecache","imagecache-profile_sm"],{src:chrome.runtime.getURL("imgs/icon@128.png"),alt:`${l.EXTENSION_NAME} Logo`})])])])])]),(0,c.createElement)("div",["edge-main-wrapper"],{},[(0,c.createElement)("span",["edge-sentence"],{},[(0,c.createElement)("div",["update-sentence-inner"],{},[(0,c.createElement)("a",["sExtlink-processed"],{textContent:l.EXTENSION_NAME.toUpperCase(),href:l.EXTENSION_WEBSITE}),(0,c.createElement)("span",["blue-arrow-right"],{},[(0,c.createElement)("span",["visually-hidden"],{textContent:"posted to"})]),(0,c.createElement)("a",["sExtlink-processed"],{textContent:`${l.EXTENSION_NAME} Announcements`}),(0,c.createElement)("span",["splus-broadcast-close"],{textContent:"×",title:"Dismiss notification",onclick:()=>(0,r.trackEvent)("button_click",{id:"close",context:"Broadcast",value:e.id,legacyTarget:`broadcast${e.id}`,legacyAction:"close",legacyLabel:"Broadcast"})}),(0,c.createElement)("span",["update-body","s-rte"],{},[(0,c.createElement)("p",["no-margins"],{},[(0,c.createElement)("strong",["splus-broadcast-title"],{innerHTML:e.title})]),(0,c.createElement)("p",["small-top-margin"],{innerHTML:e.message})])])]),(0,c.createElement)("span",["edge-main"],{},[(0,c.createElement)("div",["post-body"])]),(0,c.createElement)("div",["edge-footer"],{},[(0,c.createElement)("div",["created"],{},[(0,c.createElement)("span",["small","gray"],{textContent:(o=new Date(null!==(t=e.timestamp)&&void 0!==t?t:Date.now()),`${o.toLocaleString("en-US",{weekday:"short"})} ${o.toLocaleString("en-US",{year:"numeric",month:"long",day:"numeric"})} at ${o.toLocaleString("en-US",{hour:"numeric",minute:"2-digit"}).toLowerCase()} | This post is pinned to the top`)})])])])])])]);var o;let i=n.querySelector(".blue-arrow-right");null==i||i.insertAdjacentText("beforebegin"," "),null==i||i.insertAdjacentText("afterend"," ");let s=n.querySelector(".splus-broadcast-close");return s&&(s.dataset.broadcastId=e.id,s.addEventListener("click",f)),n}function f(e){var t,n;let o=null===(n=null===(t=e.target)||void 0===t?void 0:t.dataset)||void 0===n?void 0:n.broadcastId;if(!o)return;let i=h.Settings.UnreadBroadcasts.value;i.splice(i.findIndex((e=>e.id==o)),1),h.Settings.UnreadBroadcasts.setValue(i);let s=localStorage.getItem("splus-readBroadcasts"),r=null===s?[]:JSON.parse(s);r.push(o),localStorage.setItem("splus-readBroadcasts",JSON.stringify(r)),document.getElementById(`broadcast${o}`).outerHTML=""}function v(e){var t,n,o,i;return e.includes("/assignment/")?null===(t=e.match(/assignment\/(\d+)/))||void 0===t?void 0:t[1]:e.includes("/course/")?null===(n=e.match(/course\/\d+\/.*\/(\d+)/))||void 0===n?void 0:n[1]:e.includes("/event/")?null===(o=e.match(/event\/(\d+)/))||void 0===o?void 0:o[1]:e.includes("/external_tool/")?null===(i=e.match(/external_tool\/(\d+)/))||void 0===i?void 0:i[1]:null}t.load=function(){return o(this,void 0,void 0,(function*(){!function(){let e=document.getElementById("home-feed-container"),t=e&&e.querySelector(".feed .item-list .s-edge-feed");e&&"disabled"!==h.Settings.Broadcasts.value&&function(){o(this,void 0,void 0,(function*(){yield(0,c.waitForElement)("#home-feed-container #edge-filters");let e=h.Settings.UnreadBroadcasts.value,n=[];try{n=yield(yield fetch(`${l.EXTENSION_WEBSITE}/alert.json`)).json();let t=localStorage.getItem("splus-readBroadcasts"),o=null===t?[]:JSON.parse(t);n=n.filter((t=>!o.includes(t.id)&&!e.map((e=>e.id)).includes(t.id)));for(let e of n)e.title=s.default.sanitize(e.title),e.message=s.default.sanitize(e.message)}catch(e){}let o=[];for(let i of[...e,...n])(!i.expires||i.expires>Date.now())&&(!i.version||(0,m.compareVersions)(chrome.runtime.getManifest().version,i.version)>=0)&&(null==t||t.insertAdjacentElement("afterbegin",g(i)),o.push(i));h.Settings.UnreadBroadcasts.setValue(o)}))}()}(),function(){let e=document.querySelector(".upcoming-events .upcoming-list");const t="splus-assignment-complete",n="splus-assignment-notcomplete";function i(e){return!!h.Settings.AssignmentCompletionOverrides.nestedValue(e)}function s(e,t){let n=h.Settings.AssignmentCompletionOverrides.value;(n||t)&&(n||(n={}),t?n[e]=t:delete n[e],h.Settings.AssignmentCompletionOverrides.setValue(n))}function l(e){return o(this,void 0,void 0,(function*(){let c=e.querySelector(".infotip, .singleday"),u=null==c?void 0:c.querySelector("a[href]");if(!c||!u)return null;let p=v(u.href);if(!p)return null;let h=i(p);return h||(yield function(e){return o(this,void 0,void 0,(function*(){if(null==e)return!1;try{let t=(yield(0,a.fetchApiJson)(`dropbox/${e}/${(0,a.getUserId)()}`)).revision;return!(!t||!t.length||t[t.length-1].draft)}catch(t){return d.Logger.warn(`Couldn't determine if assignment ${e} was complete. This is likely not a normal assignment.`),!1}}))}(p))?(d.Logger.log(`Marking assignment ${p} as complete ✔ (is force-marked complete? ${h})`),e.classList.add(t)):(e.classList.add(n),d.Logger.log(`Assignment ${p} is not submitted`)),e.querySelector(".splus-completed-check-indicator")||c.insertAdjacentElement(c.classList.contains("singleday")?"afterbegin":"afterend",function(e,o){let a=document.createElement("button");return a.classList.add("splus-completed-check-indicator"),a.addEventListener("click",(function(){e.classList.contains(t)&&i(o)?(e.classList.remove(t),s(o,!1),(0,r.trackEvent)("button_click",{id:"splus-completed-check-indicator",context:"Checklist",value:"uncheck",legacyTarget:"splus-completed-check-indicator",legacyAction:"uncheck",legacyLabel:"Checkmarks"}),l(e)):e.classList.contains(n)&&(e.classList.remove(n),(0,r.trackEvent)("button_click",{id:"splus-completed-check-indicator",context:"Checklist",value:"check",legacyTarget:"splus-completed-check-indicator",legacyAction:"check",legacyLabel:"Checkmarks"}),s(o,!0),l(e))})),a}(e,p)),p}))}setTimeout((function t(){return o(this,void 0,void 0,(function*(){var n;d.Logger.log("Checking to see if upcoming assignments are submitted");let o=new Set;for(let e of document.querySelectorAll(".upcoming-list")){switch(h.Settings.IndicateSubmittedAssignments.value){case"disabled":break;case"strikethrough":e.classList.add("splus-mark-completed-strikethrough");break;case"hide":e.classList.add("splus-mark-completed-hide");break;default:e.classList.add("splus-mark-completed-check")}let t=e.querySelectorAll(".upcoming-event:not(.upcoming-subevents-block)");for(let e of t)try{let t=yield l(e);if(!t)throw new Error("No assignment ID found");o.add(t)}catch(t){d.Logger.error(`Failed checking assignment '${null===(n=e.querySelector(".infotip a[href]"))||void 0===n?void 0:n.href}' : `,t)}}let i=null==e?void 0:e.querySelector("button.button-reset.refresh-button");if(i&&null!==i.offsetParent)i.addEventListener("click",(()=>setTimeout((()=>{var e,n,o;t();try{null===(e=document.getElementById("todo"))||void 0===e||e.remove();let t=document.querySelector(`${p.SIDEBAR_SECTIONS_MAP.Overdue.selector} h4`);null==t||t.replaceWith((0,c.createElement)("h3",[],{style:{textTransform:"capitalize"},textContent:null===(n=t.textContent)||void 0===n?void 0:n.toLowerCase()}));let i=document.querySelector(`${p.SIDEBAR_SECTIONS_MAP.Upcoming.selector} h4`);null==i||i.replaceWith((0,c.createElement)("h3",[],{style:{textTransform:"capitalize"},textContent:null===(o=i.textContent)||void 0===o?void 0:o.toLowerCase()}))}catch(e){}}),500)));else{let e=h.Settings.AssignmentCompletionOverrides.value;if(e){for(var s in e)e.hasOwnProperty(s)&&!o.has(s)&&delete e[s];h.Settings.AssignmentCompletionOverrides.setValue(e),d.Logger.info("Done clearing old overrides")}}}))}),1e3)}(),function(){let e=document.querySelector(".recently-completed-wrapper .recently-completed-list");function t(e,t){return o(this,void 0,void 0,(function*(){if(null==t)return null;let n=yield function(e,t){return o(this,void 0,void 0,(function*(){try{return(yield(0,a.fetchApiJson)(`sections/${e}/assignments/${t}`)).max_points}catch(e){return null}}))}(e,t);if(null!==n&&!Number.isNaN(n))return d.Logger.debug(`Found direct denominator for assignment ${t} in section ${e}: ${n}`),n;try{let n=yield(0,a.fetchApiJson)(`users/${(0,a.getUserId)()}/grades?section_id=${e}`);if(0===n.section.length)throw new Error("Assignment details could not be read");const o=n.section[0].period.reduce(((e,t)=>e.concat(t.assignment)),[]);let i=Number.parseFloat(o.filter((e=>e.assignment_id==t))[0].max_points);return d.Logger.debug(`Found indirect denominator for assignment ${t} in section ${e}: ${i}`),i}catch(n){return d.Logger.error(`Failed finding denominator for assignment ${t} in section ${e}`,n),null}}))}setTimeout((function(){return o(this,void 0,void 0,(function*(){var n;let i=yield function(){return o(this,void 0,void 0,(function*(){let e=yield(0,a.fetchApiJson)(`users/${(0,a.getUserId)()}/sections`),t={};for(let n of e.section)t[n.course_title+" : "+n.section_title]=n.id;return t}))}();for(let o of(null==e?void 0:e.querySelectorAll(".recently-completed-event"))||[])try{let e=v(o.querySelector("a[href]").href),n=i[o.querySelector(".realm-title-course-title .realm-main-titles").textContent.trim()];if(n&&e){d.Logger.debug(`Getting denominator for assignment ${e} in section ${n}`);let i=yield t(n,e);if(d.Logger.debug(`Got denominator for assignment ${e} in section ${n}: ${i}`),i){let e=o.querySelector("span.infotip.grade-infotip span.recently-completed-grade");if(e){let t=(0,c.createElement)("span",["splus-recent-denominator"],{textContent:` / ${i}`});e.insertAdjacentElement("afterend",t)}else o.querySelector("span.recently-completed-grade").textContent+=` / ${i}`}}}catch(e){d.Logger.error(`Failed finding denominator for recent assignment '${null===(n=o.querySelector(".infotip a[href]"))||void 0===n?void 0:n.href}' : `,e)}}))}),1e3)}(),yield function(){return o(this,void 0,void 0,(function*(){let e,t=document.getElementById("right-column-inner"),n=(0,c.createElement)("div",["quick-access-wrapper"],{},[(0,c.createElement)("h3",["h3-med"],{title:`Added by ${l.EXTENSION_NAME}`},[(0,c.createSvgLogo)("splus-logo-inline"),(0,c.createElement)("span",[],{textContent:"Quick Access"}),(0,c.createElement)("a",["quick-right-link","splus-track-clicks"],{id:"quick-access-splus-settings",textContent:"Customize Sidebar",href:"#splus-settings#setting-input-sidebarSectionOrder"})]),(0,c.createElement)("div",["date-header","first"],{},[(0,c.createElement)("h4",[],{textContent:"Pages"})]),e=(0,c.createElement)("div",["quick-link-wrapper"])]);const o=[{textContent:"Grade Report",href:"/grades/grades",id:"quick-access-grades"},{textContent:"Courses",href:"/courses",id:"quick-access-courses"},{textContent:"Mastery",href:"/mastery",id:"quick-access-mastery"},{textContent:"Groups",href:"/groups",id:"quick-access-groups"},{textContent:"Messages",href:"/messages",id:"quick-access-messages"}];for(let t of o)e.appendChild((0,c.createElement)("a",["quick-link","splus-track-clicks"],t)).dataset.splusTrackingContext="Quick Access";n.appendChild((0,c.createElement)("div",["date-header"],{},[(0,c.createElement)("h4",[],{},[(0,c.createElement)("span",[],{textContent:"Courses"}),(0,c.createElement)("a",["quick-right-link","splus-track-clicks"],{id:"quick-access-reorder",textContent:"Reorder",href:"/courses?reorder"})])]));try{let e=(yield(0,a.fetchApiJson)(`users/${(0,a.getUserId)()}/sections`)).section;if(e&&0!=e.length){let t,o,i;for(let s of e){n.appendChild((0,c.createElement)("div",["quick-access-course"],{},[o=(0,c.createElement)("div",["splus-course-icon"],{dataset:{courseTitle:`${s.course_title}: ${s.section_title}`}}),(0,c.createElement)("a",["splus-track-clicks","quick-course-link"],{textContent:`${s.course_title}: ${s.section_title}`,href:`/course/${s.id}`,dataset:{splusTrackingId:"quick-access-course-link",splusTrackingContext:"Quick Access"}}),i=(0,c.createElement)("div",["icons-container"],{},[(0,c.createElement)("a",["icon","icon-grades","splus-track-clicks"],{href:`/course/${s.id}/student_grades`,title:"Grades",dataset:{splusTrackingId:"quick-access-grades-link",splusTrackingContext:"Quick Access"}}),(0,c.createElement)("a",["icon","icon-mastery","splus-track-clicks"],{href:`/course/${s.id}/student_mastery`,title:"Mastery",dataset:{splusTrackingId:"quick-access-mastery-link",splusTrackingContext:"Quick Access"}}),t=(0,c.createElement)("a",["icon","icon-settings","splus-track-clicks"],{href:"#",dataset:{splusTrackingId:"quick-access-settings-link",splusTrackingContext:"Quick Access"}})])]));let e=h.Settings.CourseQuickLinks.nestedValue(s.id);e&&""!==e&&i.prepend((0,c.createElement)("a",["icon","icon-quicklink","splus-track-clicks"],{href:e,title:`Quick Link \n(${e})`,dataset:{splusTrackingId:"quick-access-quicklink-link",splusTrackingContext:"Quick Access"}})),o.style.backgroundImage=`url(${chrome.runtime.getURL("imgs/fallback-course-icon.svg")})`,t.addEventListener("click",(()=>u.default.openModal("course-settings-modal",{courseId:s.id,courseName:`${s.course_title}: ${s.section_title}`})))}}else n.appendChild((0,c.createElement)("p",["quick-access-no-courses"],{textContent:"No courses found"}))}catch(e){if("noapikey"!==e)throw e;n.appendChild((0,c.createElement)("div",["quick-access-no-api"],{},[(0,c.createElement)("p",[],{textContent:"Please grant access to your enrolled courses in order to use this feature."}),(0,c.createButton)("quick-access-grant-access","Grant Access",(()=>{location.pathname="/api"}))]))}null==t||t.append(n)}))}(),setTimeout((()=>{!function(){var e,t,n;let o=document.getElementById("right-column-inner"),i=h.Settings.SidebarSectionOrder.value,s=(null==i?void 0:i.exclude)||[],r=Array.from((null==i?void 0:i.include)||[]).reverse();for(let e of Array.from(p.SIDEBAR_SECTIONS).reverse())if(!r.includes(e.name)&&!s.includes(e.name)&&e){let t=document.querySelector(e.selector);t&&(null==o||o.insertAdjacentElement("afterbegin",t))}for(let e of r){let t=p.SIDEBAR_SECTIONS_MAP[e];if(t){let e=document.querySelector(t.selector);e&&(null==o||o.insertAdjacentElement("afterbegin",e))}}for(let e of s){let t=p.SIDEBAR_SECTIONS_MAP[e];if(t){let e=document.querySelector(t.selector);e&&(e.style.display="none")}}try{null===(e=document.getElementById("todo"))||void 0===e||e.remove();let o=document.querySelector(`${p.SIDEBAR_SECTIONS_MAP.Overdue.selector} h4`);null==o||o.replaceWith((0,c.createElement)("h3",[],{style:{textTransform:"capitalize"},textContent:null===(t=o.textContent)||void 0===t?void 0:t.toLowerCase()}));let i=document.querySelector(`${p.SIDEBAR_SECTIONS_MAP.Upcoming.selector} h4`);null==i||i.replaceWith((0,c.createElement)("h3",[],{style:{textTransform:"capitalize"},textContent:null===(n=i.textContent)||void 0===n?void 0:n.toLowerCase()}))}catch(e){}}()}),500)}))}},1832:function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,o,i)}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.user=t.page=t.materials=t.material=t.home=t.grades=t.courses=t.course=t.assessment=t.apikey=t.all=void 0,t.all=s(n(1143)),t.apikey=s(n(3234)),t.assessment=s(n(5072)),t.course=s(n(5703)),t.courses=s(n(622)),t.grades=s(n(4422)),t.home=s(n(9897)),t.material=s(n(7803)),t.materials=s(n(8218)),t.page=s(n(1809)),t.user=s(n(345))},7803:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.load=void 0;const i=n(933),s=n(2589);t.load=function(){return o(this,void 0,void 0,(function*(){try{yield function(){return o(this,void 0,void 0,(function*(){let e=document.querySelector("#content-wrapper .attachments .attachments-file-name a[href$='.pdf']");if(!e)return;let t=()=>o(this,void 0,void 0,(function*(){let t=e.href;yield chrome.runtime.sendMessage({type:"declarativeNetRequestRuleset",action:"enable",rulesetId:"pdf_preview_ruleset"}),window.open(t,"_blank"),setTimeout((()=>{chrome.runtime.sendMessage({type:"declarativeNetRequestRuleset",action:"disable",rulesetId:"pdf_preview_ruleset"})}),5e3)})),n=(0,i.createButtonWithLogo)("splus-preview-pdf-button","Preview PDF in Browser's Viewer",t),s=(0,i.createButtonWithLogo)("splus-preview-pdf-button-lower","Preview PDF in Browser's Viewer",t),r=document.querySelector("#center-top .content-top-wrapper");null==r||r.appendChild(n);let a=document.querySelector("#content-wrapper .attachments .attachments-files");null==a||a.appendChild(s)}))}()}catch(e){s.Logger.error("Error running material page modification script: ",e)}}))}},8218:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.load=void 0;const s=i(n(1669));n(6156);const r=n(5913),a=n(2589),l=n(9792);t.load=function(){return o(this,void 0,void 0,(function*(){try{yield function(){return o(this,void 0,void 0,(function*(){let e=window.location.pathname.match(/\/course\/(\d+)\/materials/)[1];function t(e){let t=document.createElement("span");return(0,s.default)(t).text(e),t.innerText}function n(e,t,n){let o="<"+t;if(n)for(let e in n)o+=` ${e}="${n[e]}"`;return o+=">",o+=e,o+="</"+t+">",o}let o,i=[],c=!1,d={};let u=document.getElementById("course-profile-materials");function p(e){let o="Loading...";(0,s.default)(e).find(".item-title>a").tipsy({gravity:"n",html:!0,title:()=>o});let r=e.id.match(/\d+/)[0];var a;a=function(e){let i="";if(e.grades[r]){let o=e.grades[r];if(1==o.exception)i+='<span class="exception-excused">Excused</span>';else if(2==o.exception)i+='<span class="exception-incomplete">Incomplete</span>';else if(3==o.exception)i+='<span class="exception-missing">Missing</span>';else if(null!==o.grade){let e=n(t((!o.max_points&&o.grade>=0?"+":"")+o.grade),"span",{class:"tooltip-grade-numerator"});o.max_points?(e+=' <span class="tooltip-horiz-divider">/</span> ',e+=n(t(o.max_points),"span",{class:"tooltip-grade-denominator"})):e+=" pts",i+=n(e,"span",{class:"tooltip-grade-info"})}else i+="<span>No Grade</span>";(o.exception||null===o.grade)&&(i+=` <span class="exception-max-pts-info">(${o.max_points?`${o.max_points} pts`:"EC"})</span>`),e.gradeDrops[r]&&(i=n("Dropped","span",{class:"tooltip-dropped-indicator"})+" "+n(i,"span",{class:"tooltip-dropped-gradeinfo"})),i=n(i,"p");let s=[];if(o.category_id&&e.categories[o.category_id]&&s.push(n(t(e.categories[o.category_id].title),"span",{class:"tooltip-category"})),e.dropboxes[r]){let t=e.dropboxes[r].filter((e=>!e.draft));if(0==t.length)s.push(n("Not Submitted","span",{class:"tooltip-not-submitted"}));else{let e="Submitted";t[t.length-1].late?(e+=" (Late)",e=n(e,"span",{class:"tooltip-submitted-late"})):e=n(e,"span",{class:"tooltip-submitted-ontime"}),s.push(e)}}s.length>0&&(i+=n(s.join('<span class="tooltip-horiz-divider"> | </span>'),"p",{class:"tooltip-footer"}))}else i='<span class="error-message">No data found</span>';o=n(i,"div",{class:"schoologyplus-tooltip assignment-tooltip"})},c?a(d):i.push(a),e.dataset.schoologyPlusProcessedTooltip="true"}for(let e of u.querySelectorAll("tr.type-assignment"))p(e);let h=new MutationObserver((function(e){let t=!1;for(let n of e)if(n.addedNodes){t=!0;break}if(t)for(let e of u.querySelectorAll("tr.type-assignment, tr.type-document"))e.dataset.schoologyPlusProcessedTooltip||"TR"==e.nodeName&&(e.classList.contains("type-document")||e.classList.contains("type-assignment")&&p(e))}));o=(0,r.getUserId)(),h.observe(u,{childList:!0,subtree:!0});let m=(yield(0,r.fetchApiJson)(`/users/${o}/grades?section_id=${e}`)).section[0];if(d={},d.categories={},d.grades={},d.assignments={},d.dropboxes={},d.gradeDrops={},m){for(let e of m.grading_category)d.categories[e.id]=e,Object.freeze(e);Object.freeze(d.categories);for(let e of m.period.reduce(((e,t)=>e.concat(t.assignment)),[]))d.grades[e.assignment_id]=e,Object.freeze(e);Object.freeze(d.grades)}let g=0,f=0,v=yield(0,r.fetchApiJson)(`/sections/${e}/assignments`),y=Object.keys(d.grades).filter((e=>v.assignment.findIndex((t=>t.id==e))<0)).filter((e=>document.getElementById("n-"+e)));for(let t of y){g++;let n=yield(0,r.fetchApi)(`/sections/${e}/assignments/${t}`);n.ok?v.assignment.push(yield n.json()):f++}g>0&&a.Logger.log(`Fetched ${g} assignment(s) (${f} error(s)) missing from summary API call`);for(let t of v.assignment){d.assignments[t.id]=t,Object.freeze(t);let n=d.grades[t.id];!+t.allow_dropbox||n&&null!==n.grade&&!n.exception||(d.dropboxes[t.id]=(yield(0,r.fetchApiJson)(`/sections/${e}/submissions/${t.id}/${o}`)).revision,Object.freeze(d.dropboxes[t.id]))}Object.freeze(d.assignments),Object.freeze(d.dropboxes);let b=yield(yield fetch(`https://${l.Settings.DefaultDomain.value}/course/${e}/student_grades`)).text(),E=(new DOMParser).parseFromString(b,"text/html").querySelector(".gradebook-course-grades");if(E)for(let e of E.querySelectorAll(".item-row"))d.gradeDrops[e.dataset.id.match(/\d+/)[0]]=e.classList.contains("dropped");Object.freeze(d.gradeDrops),Object.freeze(d),a.Logger.log("Assignment data loaded, creating tooltips"),c=!0;for(let e of i)e(d)}))}()}catch(e){a.Logger.error("Error running materials page modification script: ",e)}}))}},1809:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.load=void 0;const i=n(933);t.load=function(){return o(this,void 0,void 0,(function*(){const e=document.querySelector(".s-page-summary iframe");if(!e)return;const t=document.querySelector(".s-page-title"),n=(0,i.createElement)("a",[],{href:e.src,title:"Open in a new tab",target:"_blank",style:"background: none;"},[null==t?void 0:t.cloneNode(!0),(0,i.createElement)("span",[],{textContent:" ⇨"})]);null==t||t.replaceWith(n),n.href=function(e){let t=new URL(e);return t.host.match(/(docs|drive)\.google\.com/g)&&(t.pathname=t.pathname.replace(/(\/preview|\/htmlembed)(\/?)$/,"/edit"),t.searchParams.delete("embedded")),t.href}(n.href)}))}},345:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.load=void 0;const s=n(5913),r=n(933),a=n(2589),l=n(9792),c=i(n(564));function d(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function u(e,t,n,i){return o(this,void 0,void 0,(function*(){let o=e;do{if(o.enrollment.some((e=>e.uid==i))){n.push(t);break}o=o.links.next?yield(yield(0,s.fetchWithApiAuthentication)(o.links.next)).json():null}while(o)}))}t.load=function(){return o(this,void 0,void 0,(function*(){!function(){try{const e="user-courses-in-common-list",t=document.getElementById("main-inner")||document.getElementById("main"),n=function(e){return o(this,void 0,void 0,(function*(){let t=[],n=(yield(0,s.fetchApiJson)(`/users/${(0,s.getUserId)()}/sections`)).section;for(let o of n)try{yield u(yield(0,s.fetchApiJson)(`/sections/${o.id}/enrollments`),o,t,e)}catch(e){a.Logger.warn(`Error checking enrollments for section ${o.id}`,e)}return a.Logger.log("Finished processing enrollments"),t}))}(document.location.href.match(/\/(\d+)\//)[1]),i=(0,r.createElement)("div",["course-in-common-container"]),p=(0,r.createElement)("div",[],{},[(0,r.createElement)("ul",["setting-entry","common-realm-list"],{id:e},[])]),h=(0,r.createElement)("h4",["mimic-profile-header"],{textContent:"Courses In Common"});i.appendChild(h),i.appendChild(p),t?t.appendChild(i):a.Logger.error("Failed to find page element to attach courses in common"),function(e,t){let n=document.getElementById(e);d(n),n.appendChild((0,r.createElement)("li",[],{textContent:"Loading..."})),t.then((e=>{d(n);let t=l.Settings.CourseNicknames.value;if(0==e.length)n.appendChild((0,r.createElement)("li",[],{textContent:"No common courses found"}));else for(let o of e)n.appendChild((0,r.createElement)("li",[],{},[(0,r.createElement)("img",[],{src:o.profile_url,alt:`Profile picture for ${o.course_title}: ${o.section_title}`}),(0,r.createElement)("a",[],{href:`https://${l.Settings.DefaultDomain.value}/course/${o.id}`,textContent:t[o.id]||`${o.course_title}: ${o.section_title}`})]));c.default.setProfilePictures(n.getElementsByTagName("img"))})).catch((t=>{a.Logger.error("Error building courses in common: ",t);let n=document.getElementById(e);n&&(d(n),n.appendChild((0,r.createElement)("li",[],{textContent:"Failed to load courses in common."})))}))}(e,n)}catch(e){a.Logger.error(e)}}()}))}},3137:function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))},o=this&&this.__rest||function(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(o=Object.getOwnPropertySymbols(e);i<o.length;i++)t.indexOf(o[i])<0&&Object.prototype.propertyIsEnumerable.call(e,o[i])&&(n[o[i]]=e[o[i]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.initializeAnalytics=t.getAnalyticsUserId=t.trackEvent=void 0,t.trackEvent=function(e,t={}){var{legacyTarget:n,legacyAction:i,legacyLabel:s,legacyValue:r,id:a,context:l,value:c}=t;o(t,["legacyTarget","legacyAction","legacyLabel","legacyValue","id","context","value"]),console.debug("[S+] Tracking disabled by user",arguments)},t.getAnalyticsUserId=function(){return n(this,void 0,void 0,(function*(){let e=yield chrome.storage.local.get({randomUserId:null});if(!e.randomUserId){let e=function(){var e=new Uint8Array(32);crypto.getRandomValues(e);for(var t="",n=0;n<e.length;++n)t+=e[n].toString(16);return t}();return yield chrome.storage.local.set({randomUserId:e}),e}return e.randomUserId}))},t.initializeAnalytics=function(e){return n(this,arguments,void 0,(function*({documentContext:e,isAnalyticsEnabled:n,selectedTheme:i,selectedBeta:s,currentVersion:r,newVersion:a,randomUserId:l,themeIsModern:c}){n&&function(){function n(...e){var t;null===(t=globalThis.dataLayer)||void 0===t||t.push(arguments)}function d(e){if(!e.isTrusted)return;let n=e.currentTarget||e.target;(0,t.trackEvent)("tracking_link_click",{legacyTarget:n.dataset.splusTrackingId||n.id||"Unlabeled Button",legacyAction:"click",legacyLabel:n.dataset.splusTrackingContext||"Tracking Link",legacyValue:n.dataset.splusTrackingValue||e.button,id:n.dataset.splusTrackingId||n.id||"Unlabeled Button",context:n.dataset.splusTrackingContext||"Tracking Link",value:n.dataset.splusTrackingValue})}if(globalThis.dataLayer=globalThis.dataLayer||[],n("js",new Date),n("config","G-YM6B00RDYC",{page_location:location.href.replace(/\/\d{3,}\b/g,"/*"),page_path:location.pathname.replace(/\/\d{3,}\b/g,"/*"),page_title:null,user_id:l,user_properties:{theme:i,activeBeta:s,lastEnabledVersion:a,extensionVersion:r,domain:location.host,modernTheme:c}}),t.trackEvent=function(e,t={}){var{legacyTarget:i,legacyAction:s,legacyLabel:r,legacyValue:a,id:l,context:c,value:d}=t,u=o(t,["legacyTarget","legacyAction","legacyLabel","legacyValue","id","context","value"]);let p=Object.assign({id:l,context:c,value:d},u);console.debug("[S+] Tracked event:",e,p),n("event",e,p)},e){let p=new Set,h=new MutationObserver(((e,t)=>{for(let e of document.querySelectorAll(".splus-track-clicks:not(.splus-tracked)"))p.has(e)||(e.addEventListener("click",d),e.addEventListener("auxclick",d),e.classList.add("splus-tracked"),p.add(e))}));var u=setInterval((function(){"complete"===document.readyState&&(clearInterval(u),m())}),10);function m(){h.observe(document.body,{childList:!0,subtree:!0});for(let e of document.querySelectorAll(".splus-track-clicks"))p.has(e)||(e.addEventListener("click",d),e.addEventListener("auxclick",d),e.classList.add("splus-tracked"),p.add(e))}}}()}))}},5913:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getUserId=t.fetchApiJson=t.fetchWithApiAuthentication=t.fetchApi=void 0;const i=n(2589),s=n(9792);function r(e,t,n){return o(this,void 0,void 0,(function*(){try{let o=yield chrome.runtime.sendMessage({type:"fetch",url:e,params:t,bodyReadType:n});if(null==o)throw i.Logger.error("[backgroundPageFetch] Response is undefined or null",o,chrome.runtime.lastError),new Error("Response is undefined or null. Last error: "+chrome.runtime.lastError);if(o=JSON.parse(o),!o.success)throw new Error(o.error);delete o.success;let s=o.bodyReadError;delete o.bodyReadError;let r=o[n],a=new Promise(((e,t)=>{s?!0===s?t():t({status:o.status,bodyReadError:s}):e(r)}));return o[n]=()=>a,o}catch(e){throw i.Logger.error("[backgroundPageFetch] Error occurred",e),e}}))}var a=null,l=function(e,t){let n=0,o=[];function s(){n=0;let e=o.length;e&&i.Logger.log("Processing "+e+" ratelimit-delayed queued requests");for(let t=0;t<e;t++)o[t]();o.splice(0,e)}return function e(t,i,a){if(0==n&&setTimeout(s,5e3),n<13)return n++,r.apply(this,[t,i,a]);{let n=()=>{},s=this,r=new Promise((e=>{n=e})).then((()=>e.apply(s,[t,i,a])));return o.push(n),r}}}();function c(e){return d(`https://api.schoology.com/v1/${e}`)}function d(e,t){return o(this,arguments,void 0,(function*(e,t,n=!0,o="json"){return yield(n?l:r)(e,{headers:h(yield u(),t)},o)}))}function u(){return o(this,void 0,void 0,(function*(){if(a&&Array.isArray(a))return a;if(a&&void 0!==a.then)return yield a;{a=function(){return o(this,void 0,void 0,(function*(){let e=s.Settings.ApiKey.value,t=s.Settings.ApiSecret.value,n=s.Settings.ApiUser.value,o=p();if("denied"===s.Settings.ApiStatus.value&&n===o)throw"apidenied";if(e&&t&&n===o)return[e,t,n];throw"noapikey"}))}();let e=yield a;return a=e}}))}function p(){try{const e=document.querySelector("iframe[src*=session-tracker]");if(!e)throw new Error("Session tracker frame not found");const t=new URLSearchParams(e.src.split("?")[1]);return Number.parseInt(t.get("id"))}catch(e){i.Logger.warn("Failed to get user ID from session tracker, using backup",e);try{return JSON.parse(document.querySelector("script:not([type]):not([src])").textContent.split("=")[1]).props.user.uid}catch(e){throw i.Logger.error("Failed to get user ID from backup method",e),new Error(`Failed to get user ID from backup method: ${e}`)}}}function h(e,t){let n={};t&&Object.assign(n,t);let o=e[0],i=e[1];return n.Authorization=`OAuth realm="Schoology%20API",oauth_consumer_key="${o}",oauth_signature_method="PLAINTEXT",oauth_timestamp="${Math.floor(Date.now()/1e3)}",oauth_nonce="${Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)}",oauth_version="1.0",oauth_signature="${i}%26"`,n["Content-Type"]||(n["Content-Type"]="application/json"),n}t.fetchApi=c,t.fetchWithApiAuthentication=d,t.fetchApiJson=function(e){return o(this,void 0,void 0,(function*(){let t;try{t=yield c(e)}catch(e){throw e}if(!t.ok)throw t;return yield t.json()}))},t.getUserId=p},9891:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createBetaSection=t.FORCED_BETA_TEST=t.BETA_TESTS=void 0;const o=n(933);t.BETA_TESTS={},t.FORCED_BETA_TEST=void 0,t.createBetaSection=function(e){var n,i,s;return(0,o.createElement)("div",["splus-beta-section"],{id:`splus-beta-section-${e}`},[(0,o.createElement)("h3",[],{},[(0,o.createElement)("a",[],{href:t.BETA_TESTS[e].url,textContent:t.BETA_TESTS[e].name+(t.FORCED_BETA_TEST===e?" [Cannot be disabled]":""),style:{color:"white !important"}})]),(0,o.createElement)("p",[],{textContent:t.BETA_TESTS[e].description}),null!==(s=null===(i=(n=t.BETA_TESTS[e]).controls)||void 0===i?void 0:i.call(n))&&void 0!==s?s:(0,o.createElement)("div")])}},5242:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.deleteBroadcasts=t.createBroadcast=t.saveBroadcasts=void 0;const i=n(9792);t.saveBroadcasts=function(e){return o(this,void 0,void 0,(function*(){let t=(yield chrome.storage.sync.get(["unreadBroadcasts"])).unreadBroadcasts||[],n=t.map((e=>e.id));for(let o of e)n.includes(o.id)||t.push(o);yield chrome.storage.sync.set({unreadBroadcasts:t})}))},t.createBroadcast=function(e,t,n,o=Date.now(),i){return{id:String(e),title:t,message:n,timestamp:+o,expires:void 0!==i?+i:void 0}},t.deleteBroadcasts=function(...e){return o(this,void 0,void 0,(function*(){for(let t of e){let e=i.Settings.UnreadBroadcasts.value;if(!e)continue;e.splice(e.findIndex((e=>e.id==t)),1),yield i.Settings.UnreadBroadcasts.setValue(e);let n=document.getElementById(`broadcast${t}`);n&&(n.outerHTML="")}}))}},5252:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_THEME_NAME=t.DISCORD_URL=t.EXTENSION_WEBSITE=t.EXTENSION_NAME=void 0,t.EXTENSION_NAME="Schoology Plus",t.EXTENSION_WEBSITE="https://schoologypl.us",t.DISCORD_URL="https://discord.schoologypl.us",t.DEFAULT_THEME_NAME=t.EXTENSION_NAME},7239:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_ICONS=void 0,t.DEFAULT_ICONS=[{regex:"\\bPE\\b|Phys(ical)? Edu?(cation)?|\\bSRLA\\b|TRK|TRACK FIELD|CROSS C|ADV COND|MO?V BD AWR|ATHLETIC|SPORTS|FITNESS|PHYS FIT",url:"https://cdn-icons-png.flaticon.com/512/2553/2553967.png",source:"exercise_2553967"},{regex:"WO?R?LD HIST?(ORY)?|WHG|WLD LANG|LAT AM|INTL REL",url:"https://cdn-icons-png.flaticon.com/512/174/174249.png",source:"internet_174249"},{regex:"ANIMAL",url:"https://cdn-icons-png.flaticon.com/512/2109/2109342.png",source:"barn_2109342"},{regex:"ANIM",url:"https://cdn-icons-png.flaticon.com/512/2037/2037876.png",source:"animation_2037876"},{regex:"FOREN",url:"https://cdn-icons-png.flaticon.com/512/1616/1616525.png",source:"forensic-science_1616525"},{regex:"AUTO.*[TM]ECH|[MT]ECH.*AUTO|AUTO MAIN",url:"https://cdn-icons-png.flaticon.com/512/2040/2040989.png",source:"car-service_2040989"},{regex:"ALG(EB|EBRA)?(\\d|\\b)",url:"https://cdn-icons-png.flaticon.com/512/167/167753.png",source:"blackboard_167753"},{regex:"ART HIST|PAINT",url:"https://cdn-icons-png.flaticon.com/512/214/214275.png",source:"paint-brush_214275"},{regex:"EUR",url:"https://cdn-icons-png.flaticon.com/512/664/664549.png",source:"europe_664549"},{regex:"PHYSICS|PHY:C",url:"https://cdn-icons-png.flaticon.com/512/164/164969.png",source:"science_164969"},{regex:"ASTRONOMY",url:"https://cdn-icons-png.flaticon.com/512/124/124553.png",source:"telescope_124553"},{regex:"PRE ?CALC",url:"https://cdn-icons-png.flaticon.com/512/1074/1074140.png",source:"parabola_1074140"},{regex:"BASKETBALL|BSKTBL",url:"https://cdn-icons-png.flaticon.com/512/500/500245.png",source:"basketball_500245"},{regex:"(^|\\b)CALC(ULUS)?\\b",url:"https://cdn-icons-png.flaticon.com/512/1572/1572296.png",source:"line-graph_1572296"},{regex:"CHEER|DRILL",url:"https://cdn-icons-png.flaticon.com/512/2185/2185584.png",source:"cheerleaders_2185584"},{regex:"CHEM",url:"https://cdn-icons-png.flaticon.com/512/123/123381.png",source:"flask_123381"},{regex:"GAME DESG?N|GAME DESIGN",url:"https://cdn-icons-png.flaticon.com/512/1737/1737285.png",source:"computer_1737285"},{regex:"COMP SCI?|COMPUTER|INTRO COMP|COMP PRO?G|INTRO PROG|CODING|INTE?R?NE?T|DIGITAL LIT|JAVA",url:"https://cdn-icons-png.flaticon.com/512/626/626570.png",source:"binary-code_626570"},{regex:"US HIST|AMER(ICAN?)?|AM DEM|AM IMAGE|IB HS AMR",url:"https://cdn-icons-png.flaticon.com/512/149/149513.png",source:"united-states-of-america_149513"},{regex:"HE?A?LTH|MEDICAL|MED INTERVEN|MEDICINE|HOSP|PATIENT",url:"https://cdn-icons-png.flaticon.com/512/179/179555.png",source:"first-aid-kit_179555"},{regex:"CERAMICS|AM IND",url:"https://cdn-icons-png.flaticon.com/512/123/123458.png",source:"pot_123458"},{regex:"FLOR|FLOWER",url:"https://cdn-icons-png.flaticon.com/512/346/346167.png",source:"flower_346167"},{regex:"MARINE|ZOOLOGY|OCEAN",url:"https://cdn-icons-png.flaticon.com/512/146/146718.png",source:"turtle_146718"},{regex:"MAND|CHINESE|CHINA|CHIN LANG",url:"https://cdn-icons-png.flaticon.com/512/2448/2448781.png",source:"flag_2448781"},{regex:"KOREA",url:"https://cdn-icons-png.flaticon.com/512/1999/1999610.png",source:"korea_1999610"},{regex:"PSYC|IB THEORY",url:"https://cdn-icons-png.flaticon.com/512/552/552408.png",source:"creativity_552408"},{regex:"PIANO|KEYBOARD",url:"https://cdn-icons-png.flaticon.com/512/1973/1973888.png",source:"keyboard_1973888"},{regex:"EXPO TE?XT|SH STORY",url:"https://cdn-icons-png.flaticon.com/512/176/176690.png",source:"writing_176690"},{regex:"DISCR",url:"https://cdn-icons-png.flaticon.com/512/251/251986.png",source:"calculating_251986"},{regex:"VET",url:"https://cdn-icons-png.flaticon.com/512/2659/2659366.png",source:"pawprint_2659366"},{regex:"ORCH|VIOLIN|STRINGS",url:"https://cdn-icons-png.flaticon.com/512/124/124811.png",source:"violin_124811"},{regex:"BAND|MAR DYN",url:"https://cdn-icons-png.flaticon.com/512/718/718543.png",source:"drums_718543"},{regex:"SOCCER",url:"https://cdn-icons-png.flaticon.com/512/1800/1800944.png",source:"football_1800944"},{regex:"LACROSS",url:"https://cdn-icons-png.flaticon.com/512/2827/2827041.png",source:"lacrosse_2827041"},{regex:"MUSIC|JAZZ|CHOIR|INSTRUM|WIND PERC|HARMONY|GLEE|CHORUS|VOC ENSEMBLE|SING|VOICE",url:"https://cdn-icons-png.flaticon.com/512/579/579496.png",source:"treble-clef_579496"},{regex:"BIO(LOGY|TECH(NOLOGY)?|MED)?\\b|GENETICS",url:"https://cdn-icons-png.flaticon.com/512/620/620366.png",source:"dna_620366"},{regex:"(^|\\b)LIT(ERATURE)?\\b|READ|L & L|LIBRARY",url:"https://cdn-icons-png.flaticon.com/512/167/167755.png",source:"open-book_167755"},{regex:"STAGE|THEATRE DSN|TH DSN WKSP|CHORPROC",url:"https://cdn-icons-png.flaticon.com/512/2673/2673346.png",source:"spotlight_2673346"},{regex:"ADVT DES",url:"https://cdn-icons-png.flaticon.com/512/1055/1055664.png",source:"ads_1055664"},{regex:"ECON(O(MICS)?)?|AP MA ECO|FIN MGMT|FINANCIAL",url:"https://cdn-icons-png.flaticon.com/512/712/712743.png",source:"profit_712743"},{regex:"STAT(STICS|ISTCS)|STATS?|STATISTICS",url:"https://cdn-icons-png.flaticon.com/512/1006/1006636.png",source:"analysis_1006636"},{regex:"FILM(MAKING)?\\b|VIDEO|VID PRD|BRDCST|CINEMA|SCREEN PLAY",url:"https://cdn-icons-png.flaticon.com/512/321/321799.png",source:"video-camera_321799"},{regex:"(FIR|1)ST RESPONDER",url:"https://cdn-icons-png.flaticon.com/512/119/119083.png",source:"ambulance_119083"},{regex:"GEOLOGY",url:"https://cdn-icons-png.flaticon.com/512/184/184647.png",source:"science_184647"},{regex:"COOK|CULINARY|FOOD|CATER",url:"https://cdn-icons-png.flaticon.com/512/1142/1142696.png",source:"cooking_1142696"},{regex:"\\bGOVT\\b|YOU ADM JUS|JUSTICE",url:"https://cdn-icons-png.flaticon.com/512/167/167718.png",source:"university_167718"},{regex:"GEOM",url:"https://cdn-icons-png.flaticon.com/512/258/258316.png",source:"office-material_258316"},{regex:"GUIT(AR)?|MARIACHI|UKELELE",url:"https://cdn-icons-png.flaticon.com/512/1586/1586234.png",source:"guitar_1586234"},{regex:"MYP ST TECH|\\bCTE\\b|SEM(INAR)?\\b|ENGINEER|\\bENG DE\\b|INTRO ENGIN|CREAT EXP|STEA?M|MULTICRAFT CORE",url:"https://cdn-icons-png.flaticon.com/512/1460/1460471.png",source:"idea_1460471"},{regex:"FLIGHT|SPACE|AEROSPA?CE",url:"https://cdn-icons-png.flaticon.com/512/744/744502.png",source:"globe_744502"},{regex:"ENG(LISH)?\\b|CREAT(IVE)? WRI?T(ING)?|\\bCOMP(OSITION)?\\b|\\bERWC\\b|LANGUAGE ARTS|LNG ART|\\bELA\\b",url:"https://cdn-icons-png.flaticon.com/512/254/254022.png",source:"signing_254022"},{regex:"SPAN(ISH)?\\b|SP LANG",url:"https://cdn-icons-png.flaticon.com/512/8081/8081829.png",source:"spanish-language_8081829"},{regex:"FREN(CH)?\\b|AP FR LANG",url:"https://cdn-icons-png.flaticon.com/512/206/206657.png",source:"france_206657"},{regex:"ITALIAN",url:"https://cdn-icons-png.flaticon.com/512/555/555668.png",source:"italy_555668"},{regex:"ENV",url:"https://cdn-icons-png.flaticon.com/512/291/291211.png",source:"recycle_291211"},{regex:"ROBOT|MFG|INTRO PHYS COMPUTING|MACHINING|MACHI?NI?ST",url:"https://cdn-icons-png.flaticon.com/512/1546/1546683.png",source:"robotic-arm_1546683"},{regex:"MEDIA",url:"https://cdn-icons-png.flaticon.com/512/1649/1649092.png",source:"media-player_1649092"},{regex:"CYBER",url:"https://cdn-icons-png.flaticon.com/512/2084/2084028.png",source:"cyber-security_2084028"},{regex:"GEOG|HUMAN GEO",url:"https://cdn-icons-png.flaticon.com/512/717/717982.png",source:"globe_717982"},{regex:"(^|\\b)ART\\b|DES CRAFT|CRAFTS",url:"https://cdn-icons-png.flaticon.com/512/1497/1497573.png",source:"creativity_1497573"},{regex:"AM SIGN LNG",url:"https://cdn-icons-png.flaticon.com/512/2014/2014363.png",source:"sign-language_2014363"},{regex:"DANCE?|DN CH|DNC CMP?NT?Y|BALLET?",url:"https://cdn-icons-png.flaticon.com/512/493/493507.png",source:"dancing_493507"},{regex:"APP CREAT",url:"https://cdn-icons-png.flaticon.com/512/186/186239.png",source:"smartphone_186239"},{regex:"MUSEUM",url:"https://cdn-icons-png.flaticon.com/512/252/252032.png",source:"banks_252032"},{regex:"GOLF",url:"https://cdn-icons-png.flaticon.com/512/1584/1584143.png",source:"golf_1584143"},{regex:"JAPAN",url:"https://cdn-icons-png.flaticon.com/512/206/206789.png",source:"japan_206789"},{regex:"MEX",url:"https://cdn-icons-png.flaticon.com/512/206/206600.png",source:"mexico_206600"},{regex:"RUSSIA",url:"https://cdn-icons-png.flaticon.com/512/206/206604.png",source:"russia_206604"},{regex:"(^|\\b)ELD\\b|(^|\\b)ELS\\b|(^|\\b)ELL\\b",url:"https://cdn-icons-png.flaticon.com/512/947/947478.png",source:"book_947478"},{regex:"(^|\\b)THEA(T[ER][ER])?\\b|DRAMA|PERFORM ART",url:"https://cdn-icons-png.flaticon.com/512/214/214351.png",source:"theater_214351"},{regex:"LEADER",url:"https://cdn-icons-png.flaticon.com/512/1534/1534091.png",source:"government_1534091"},{regex:"SERVICE|T\\.A\\.|PEER COUNSELING|TUTOR|AVID|ETHNIC|ETHN STUDIES|INTERACTIONS|ANTHRO|SOCI|DECATHLON|PENTATHLON|AFRO-AM",url:"https://cdn-icons-png.flaticon.com/512/4337/4337288.png",source:"idea_4337288"},{regex:"LATIN|\\bLAW\\b|CALLIGRAPHY",url:"https://cdn-icons-png.flaticon.com/512/1020/1020074.png",source:"manuscript_1020074"},{regex:"HUMANITI?E?S?|LIFE (MGMT|SKI?L?LS)|PHIL",url:"https://cdn-icons-png.flaticon.com/512/1205/1205495.png",source:"discussion_1205495"},{regex:"YEARBOOK|DIG IMAG|PHOTO",url:"https://cdn-icons-png.flaticon.com/512/1006/1006107.png",source:"memories_1006107"},{regex:"NETWORKING",url:"https://cdn-icons-png.flaticon.com/512/1554/1554377.png",source:"network_1554377"},{regex:"RES(EA)?RCH",url:"https://cdn-icons-png.flaticon.com/512/164/164996.png",source:"research_164996"},{regex:"COL(LEGE)?\\b|CLASS OF",url:"https://cdn-icons-png.flaticon.com/512/167/167743.png",source:"mortarboard_167743"},{regex:"CAREER|JOB|GEN WRK|\\bWORK\\b|ENTERP|SMALL BUS",url:"https://cdn-icons-png.flaticon.com/512/149/149018.png",source:"briefcase_149018"},{regex:"ADVIS|HOME|SOCIAL COM|GRADE \\d|BOOKS",url:"https://cdn-icons-png.flaticon.com/512/167/167729.png",source:"desk_167729"},{regex:"SWIM",url:"https://cdn-icons-png.flaticon.com/512/124/124212.png",source:"swimming_124212"},{regex:"CONSTRUCTION|WOOD|CARPENTRY?",url:"https://cdn-icons-png.flaticon.com/512/1973/1973946.png",source:"woodworking_1973946"},{regex:"VO?LLE?YBA?LL?",url:"https://cdn-icons-png.flaticon.com/512/68/68175.png",source:"volley-ball_68175"},{regex:"FOOTBALL",url:"https://cdn-icons-png.flaticon.com/512/167/167741.png",source:"american-football_167741"},{regex:"JOURNALI?SM",url:"https://cdn-icons-png.flaticon.com/512/1720/1720094.png",source:"communication_1720094"},{regex:"TENNIS",url:"https://cdn-icons-png.flaticon.com/512/1645/1645793.png",source:"tennis_1645793"},{regex:"SPEECH",url:"https://cdn-icons-png.flaticon.com/512/512/512500.png",source:"speak_512500"},{regex:"WRESTLING",url:"https://cdn-icons-png.flaticon.com/512/577/577132.png",source:"wrestling_577132"},{regex:"GRAPH(IC)? (DESIGN|COMM|ARTS)|INTR INT VD",url:"https://cdn-icons-png.flaticon.com/512/148/148862.png",source:"layers_148862"},{regex:"FASH DSN",url:"https://cdn-icons-png.flaticon.com/512/770/770088.png",source:"dress_770088"},{regex:"JROTC",url:"https://cdn-icons-png.flaticon.com/512/942/942444.png",source:"rank_942444"},{regex:"WATERPOLO",url:"https://cdn-icons-png.flaticon.com/512/625/625383.png",source:"water-polo_625383"},{regex:"HORT|LANDSCAP",url:"https://cdn-icons-png.flaticon.com/512/346/346195.png",source:"sprout_346195"},{regex:"ARABIC",url:"https://cdn-icons-png.flaticon.com/512/1704/1704491.png",source:"pattern_1704491"},{regex:"GERMAN",url:"https://cdn-icons-png.flaticon.com/512/555/555613.png",source:"germany_555613"},{regex:"HIST|ANCT CIVL",url:"https://cdn-icons-png.flaticon.com/512/1501/1501478.png",source:"parchment_1501478"},{regex:"SCULPT",url:"https://cdn-icons-png.flaticon.com/512/2071/2071211.png",source:"sculpture_2071211"},{regex:"SCI|ISCS",url:"https://cdn-icons-png.flaticon.com/512/167/167733.png",source:"microscope_167733"},{regex:"(BASE|SOFT)BALL",url:"https://cdn-icons-png.flaticon.com/512/1668/1668514.png",source:"baseball_1668514"},{regex:"PHYSIO|HUM BODY|BOD DYN|KINESIOLOGY",url:"https://cdn-icons-png.flaticon.com/512/2044/2044715.png",source:"x-ray_2044715"},{regex:"(^|\\b)MATH|IB MTH",url:"https://cdn-icons-png.flaticon.com/512/1284/1284095.png",source:"mathematics_1284095"},{regex:"DRAW|2D|3D|DESIGN|DE?SN|DRAFT ARC|SCREEN PRINT|EXPL ARCH|DRAFT TEC",url:"https://cdn-icons-png.flaticon.com/512/681/681560.png",source:"sketch_681560"},{regex:"SANDBOX",url:"https://cdn-icons-png.flaticon.com/512/1588/1588745.png",source:"sandbox_1588745"},{regex:"DRIVER|DRIVING",url:"https://cdn-icons-png.flaticon.com/512/741/741407.png",source:"car_741407"},{regex:".",url:"https://cdn-icons-png.flaticon.com/512/164/164949.png",source:"bookshelf_164949"}]},8563:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_THEMES=t.CLASSIC_THEMES=t.LAUSD_THEMES=void 0;const o=n(5252);t.LAUSD_THEMES=["LAUSD Orange","LAUSD Dark Blue","LAUSD 2019"],t.CLASSIC_THEMES=["Schoology Plus","Rainbow"],t.DEFAULT_THEMES=[{name:"Schoology Plus Modern Light",version:2,color:{hue:200,modern:{dark:!1,interface:{primary:"#EAEAEA",accent:"#F7F7F7",secondary:"#DDD",input:"#D0D0D0",border:"#BABABA",highlight:"rgba(255, 183, 2, 0.2)",active:"rgba(152, 212, 228, 0.8)",grades:"#009400",error:"#F44336"},calendar:["#d6e7f4","#d7e8cf","#f9e9d4","#e7e0e5","#e6b5c9","#f9f1cf","#daf0f9","#f9ddea","#fbd7d8","#f1f2d1","#e0e8f5","#fbd7e4","#fcddd3","#e7f2d5","#e6e0ee","#f0e5db","#fce8d1","#e1f1e7","#f0dfed","#e9e9ea","#00427c","#603073","#8b1941","#970c0c","#9c3b07","#685203","#2a5f16","#09584f","#005a75","#4d5557"],text:{primary:"#2A2A2A",muted:"#677583",contrast:"white"},options:{borderRadius:5,borderSize:1,padding:10}}},logo:{preset:"schoology_plus"}},{name:"Schoology Plus Modern Dark",version:2,color:{custom:{primary:"#202225",hover:"#40444B",background:"#36393f",border:"#40444b",link:"#6fa8dc"},modern:{dark:!0,interface:{primary:"#36393F",accent:"#2F3136",secondary:"#202225",input:"#40444B",border:"#DCDDDE",highlight:"rgba(184, 134, 11, 0.2)",active:"rgba(0, 255, 255, 0.1)",grades:"#8BC34A",error:"#F44336"},calendar:["#457da5","#547c41","#926c37","#7c3d6b","#0b4c9c","#00209c","#004a09","#72721a","#44233e","#683131","#770a0a","#a72413","#E0024C","#188C16","#bd7304","#80168C","#164152","#00543f","#633e11","#461b2d","#00427c","#603073","#8b1941","#970c0c","#9c3b07","#685203","#2a5f16","#09584f","#005a75","#4d5557"],text:{primary:"#DCDDDE",muted:"#72767D",contrast:"#EEEEEE"},options:{borderRadius:5,borderSize:1,padding:10}}},logo:{preset:"schoology_plus"}},{name:"Rainbow Modern",version:2,color:{rainbow:{hue:{animate:{speed:50,offset:0,min:0,max:359,alternate:!1}},saturation:{value:50},lightness:{value:50}},modern:{dark:!1,interface:{primary:"#EAEAEA",accent:"#F7F7F7",secondary:"#DDD",input:"#D0D0D0",border:"#BABABA",highlight:"rgba(255, 183, 2, 0.2)",active:"rgba(152, 212, 228, 0.8)",grades:"#009400",error:"#F44336"},calendar:["#d6e7f4","#d7e8cf","#f9e9d4","#e7e0e5","#e6b5c9","#f9f1cf","#daf0f9","#f9ddea","#fbd7d8","#f1f2d1","#e0e8f5","#fbd7e4","#fcddd3","#e7f2d5","#e6e0ee","#f0e5db","#fce8d1","#e1f1e7","#f0dfed","#e9e9ea","#00427c","#603073","#8b1941","#970c0c","#9c3b07","#685203","#2a5f16","#09584f","#005a75","#4d5557"],text:{primary:"#2A2A2A",muted:"#677583",contrast:"white"},options:{borderRadius:5,borderSize:1,padding:10}}},logo:{preset:"schoology_plus"}},{name:o.DEFAULT_THEME_NAME,version:2,color:{hue:210},logo:{preset:"schoology_plus"}},{name:"Rainbow",version:2,color:{rainbow:{hue:{animate:{speed:50,offset:0,min:0,max:359,alternate:!1}},saturation:{value:50},lightness:{value:50}}},logo:{preset:"schoology_plus"}},{name:"Toy",version:2,color:{hue:150},logo:{preset:"schoology_plus"},cursor:{primary:chrome.runtime.getURL("/imgs/toy-mode.png")}},{name:"LAUSD Dark Blue",version:2,color:{custom:{primary:"#143f69",hover:"#345f89",background:"#345f89",border:"#024f7d"}},logo:{preset:"lausd_2022"}},{name:"LAUSD 2019",version:2,color:{custom:{primary:"#143f69",hover:"#345f89",background:"#345f89",border:"#024f7d"}},logo:{preset:"lausd_2019"}},{name:"LAUSD Orange",version:2,color:{custom:{primary:"#ff7a00",hover:"#ff9a20",background:"#ff8a10",border:"#df5a00"}},logo:{preset:"lausd_legacy"}},{name:"Schoology Default",version:2,color:{custom:{primary:"#0677ba",hover:"#024f7d",background:"#002c47",border:"#024f7d"}},logo:{preset:"schoology_logo"}}]},933:(e,t)=>{"use strict";function n(e,t,n,o){let i=document.createElement(e);if(t)for(let e of t)i.classList.add(e);if(n)for(let e in n)if(n[e]instanceof Object&&!(n[e]instanceof Function))for(let t in n[e])i[e][t]=n[e][t];else void 0!==e&&void 0!==n[e]&&(i[e]=n[e]);if(o)for(let e of o)i.appendChild(e);return i}function o(e,t,o){return n("span",["submit-span-wrapper","splus-modal-button"],{onclick:o},[n("input",["form-submit","splus-track-clicks"],{type:"button",value:t,id:e,dataset:{splusTrackingContext:"S+ Button"}})])}function i(...e){let t=document.createElementNS("http://www.w3.org/2000/svg","circle");t.setAttribute("cx","250"),t.setAttribute("cy","250"),t.setAttribute("r","230"),t.setAttribute("style","fill: none; stroke-width: 35px; stroke: currentColor;");let n=document.createElementNS("http://www.w3.org/2000/svg","line");n.setAttribute("x1","250"),n.setAttribute("y1","125"),n.setAttribute("x2","250"),n.setAttribute("y2","375"),n.setAttribute("style","stroke-linecap: round; stroke-width: 35px; stroke: currentColor;");let o=document.createElementNS("http://www.w3.org/2000/svg","line");o.setAttribute("x1","125"),o.setAttribute("y1","250"),o.setAttribute("x2","375"),o.setAttribute("y2","250"),o.setAttribute("style","stroke-linecap: round; stroke-width: 35px; stroke: currentColor;");let i=document.createElementNS("http://www.w3.org/2000/svg","svg");return i.setAttribute("viewBox","0 0 500 500"),i.append(t,n,o),e&&i.classList.add(...e),i}Object.defineProperty(t,"__esModule",{value:!0}),t.waitForElement=t.createSvgLogo=t.setCSSVariable=t.getParents=t.isVisible=t.getBrowser=t.createButtonWithLogo=t.createButton=t.createElement=void 0,t.createElement=n,t.createButton=o,t.createButtonWithLogo=function(e,t,n){let s=o(e,t,n),r=i();Object.assign(r.style,{verticalAlign:"middle",paddingLeft:"4px",width:"18px"}),s.prepend(r),s.style.setProperty("height","36px","important");let a=s.querySelector("input");return a.style.paddingLeft="4px",a.style.setProperty("height","36px","important"),s.style.cursor="pointer",s},t.getBrowser=function(){return void 0!==globalThis.chrome?void 0!==globalThis.browser?"Firefox":"Chrome":"Other"},t.isVisible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},t.getParents=function(e,t){var n,o=[];for(t&&(n=t.charAt(0));e&&e!==document.documentElement;e=e.parentNode)t?("."===n&&e.classList.contains(t.substr(1))&&o.push(e),"#"===n&&e.id===t.substr(1)&&o.push(e),"["===n&&e.hasAttribute(t.substr(1,t.length-1))&&o.push(e),e.tagName.toLowerCase()===t&&o.push(e)):o.push(e);return o},t.setCSSVariable=function(e,t){document.documentElement.style.setProperty(`--${e}`,null!=t?t:null)},t.createSvgLogo=i,t.waitForElement=function(e,t=50){return new Promise((n=>{let o=setInterval((()=>{let t=document.querySelector(e);t&&(clearInterval(o),n(t))}),t)}))}},7621:function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,o,i)}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.version=t.updateSettings=t.types=t.toast=t.theme=t.themeModel=t.splusSettings=t.settings=t.notifications=t.modal=t.logger=t.dom=t.defaultThemes=t.defaultIcons=t.constants=t.broadcast=t.beta=t.api=t.analytics=void 0,t.analytics=s(n(3137)),t.api=s(n(5913)),t.beta=s(n(9891)),t.broadcast=s(n(5242)),t.constants=s(n(5252)),t.defaultIcons=s(n(7239)),t.defaultThemes=s(n(8563)),t.dom=s(n(933)),t.logger=s(n(2589)),t.modal=s(n(5144)),t.notifications=s(n(9229)),t.settings=s(n(412)),t.splusSettings=s(n(9792)),t.themeModel=s(n(7012)),t.theme=s(n(564)),t.toast=s(n(302)),t.types=s(n(4800)),t.updateSettings=s(n(536)),t.version=s(n(1973))},2589:(e,t)=>{"use strict";function n(e){return`color:${e};border:1px solid #2A2A2A;border-radius:100%;font-size:14px;font-weight:bold;padding: 0 4px 0 4px;background-color:#2A2A2A`}Object.defineProperty(t,"__esModule",{value:!0}),t.Logger=void 0,t.Logger={log:console.log.bind(globalThis.console,"%c+",n("#81D4FA")),error:console.error.bind(globalThis.console,"%c+",n("#FF6961")),info:console.info.bind(globalThis.console,"%c+",n("white")),warn:console.warn.bind(globalThis.console,"%c+",n("#FDFD96")),trace:console.trace.bind(globalThis.console,"%c+",n("orange")),debug:console.debug.bind(globalThis.console,"%c+",n("lightgreen"))}},5144:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.modalFooterText=void 0;const s=i(n(1669));n(6325);const r=n(3137),a=n(9891),l=n(5252),c=n(933),d=n(412),u=n(9792),p=i(n(564)),h=n(536),m=`&copy; ${l.EXTENSION_NAME} Contributors 2017-2024 | <a id="open-webstore" class="splus-track-clicks" href="${l.EXTENSION_WEBSITE}/?utm_source=ext-splus-settings-footer">${l.EXTENSION_NAME} v${chrome.runtime.getManifest().version_name||chrome.runtime.getManifest().version}${"Chrome"!=(0,c.getBrowser)()||chrome.runtime.getManifest().update_url?"":" dev"}</a> | <a href="${l.DISCORD_URL}" id="open-discord" class="splus-track-clicks" title="Get support, report bugs, suggest features, and chat with the ${l.EXTENSION_NAME} community">Discord Server</a> | <a href="https://github.com/aopell/SchoologyPlus" id="open-github" class="splus-track-clicks">GitHub</a> | <a href="#" id="open-contributors" class="splus-track-clicks">Contributors</a> | <a target="_blank" href="${l.EXTENSION_WEBSITE}/privacy" id="open-privacy-policy" class="splus-track-clicks">Privacy Policy</a> | <a href="#" id="open-changelog" class="splus-track-clicks"> Changelog</a>`;t.modalFooterText=`${l.EXTENSION_NAME} v${chrome.runtime.getManifest().version_name||chrome.runtime.getManifest().version} &copy; ${l.EXTENSION_NAME} Contributors 2017-2024`;const g=document.createElement("iframe");g.src=`${l.EXTENSION_WEBSITE}/changelog?version=${chrome.runtime.getManifest().version}`;class f{constructor(e,t,n,o,i){this.elementOnPage=!1,this.containerElement=document.createElement("div");let s=`<div id="${e}" class="splus-modal"><div class="splus-modal-content"><div class="splus-modal-header"><span class="close" data-parent="${e}">&times;</span><p class="splus-modal-title">${t}</p></div><div class="splus-modal-body"></div><div class="splus-modal-footer"><p class="splus-modal-footer-text">${o}</p></div></div></div>`;this.id=e,this.onopen=i,this.containerElement.innerHTML=s,this.bodyElement=n}get element(){return document.getElementById(this.id)}get body(){var e;return null===(e=this.element)||void 0===e?void 0:e.querySelector(".splus-modal-body")}static openModal(e,t){var n,o;f.closeAllModals(),(0,r.trackEvent)("perform_action",{id:"open",context:"Modal",value:e,legacyTarget:e,legacyAction:"open",legacyLabel:"Modal"});let i=f.modals.find((t=>t.id==e));i&&(i.elementOnPage||(document.body.appendChild(i.containerElement),i.body.appendChild(i.bodyElement),null===(o=null===(n=i.element)||void 0===n?void 0:n.querySelector(".close"))||void 0===o||o.addEventListener("click",f.closeAllModals),i.elementOnPage=!0),i.onopen&&i.onopen(i,t),i.element.style.display="block",document.documentElement.classList.add("splus-modal-open"))}static closeAllModals(){for(let e of f.modals)e.element&&f.modalClose(e.element)}static modalClose(e){if("settings-modal"===e.id&&"none"!==e.style.display&&d.LegacySetting.anyModified()){if(!confirm("You have unsaved settings.\nAre you sure you want to exit?"))return;(0,h.updateSettings)()}else if("choose-theme-modal"===e.id&&"block"===e.style.display&&!localStorage.getItem("splus-temp-theme-chosen"))return void alert("Please use the 'Select' button to confirm your choice.");e.style.display="none",document.documentElement.classList.remove("splus-modal-open")}}f.modals=[new f("settings-modal",`${l.EXTENSION_NAME} Settings`,(0,h.getModalContents)(),m,(function(e){return o(this,void 0,void 0,(function*(){var t,n;e.body.innerHTML="",yield(0,h.updateSettings)(),e.body.appendChild((0,h.getModalContents)()),null===(t=e.element.querySelector("#open-changelog"))||void 0===t||t.addEventListener("click",(()=>f.openModal("changelog-modal")),{once:!0}),null===(n=e.element.querySelector("#open-contributors"))||void 0===n||n.addEventListener("click",(()=>f.openModal("contributors-modal")),{once:!0}),d.LegacySetting.onShown(),(0,s.default)(".splus-settings-tabs").tabs({active:0,heightStyle:"fill"})}))})),new f("changelog-modal",`${l.EXTENSION_NAME} Changelog`,(0,c.createElement)("div",["splus-modal-contents"],{},[g]),t.modalFooterText),new f("analytics-modal",l.EXTENSION_NAME,(0,c.createElement)("div",["splus-modal-contents"],{},[(0,c.createElement)("h2",["setting-entry"],{textContent:"Anonymous Usage Statistics"}),(0,c.createElement)("p",["setting-description"],{style:{fontSize:"14px"}},[(0,c.createElement)("span",[],{textContent:`${l.EXTENSION_NAME} would like to collect anonymous usage statistics to better understand how people use this extension. Per our `}),(0,c.createElement)("a",["splus-track-clicks"],{id:"analytics-privacy-policy-link",href:`${l.EXTENSION_WEBSITE}/privacy`,textContent:"privacy policy"}),(0,c.createElement)("strong",[],{textContent:" we don't collect ANY personal information."})]),(0,c.createElement)("p",["setting-description"],{style:{fontSize:"14px",paddingTop:"10px",paddingBottom:"10px"}},[(0,c.createElement)("strong",[],{textContent:"We encourage you to leave this enabled"}),(0,c.createElement)("span",[],{textContent:` so we can better understand how people use ${l.EXTENSION_NAME}, and we promise to be transparent about what we collect by providing aggregated statistics periodically in our `}),(0,c.createElement)("a",[],{href:l.DISCORD_URL,textContent:"Discord server."})]),u.Settings.Analytics.settingsMenuElement,(0,c.createElement)("p",["setting-description"],{style:{fontSize:"14px",paddingTop:"10px"},textContent:`You can change your choice at any point in ${l.EXTENSION_NAME} settings`}),(0,c.createElement)("div",["settings-buttons-wrapper"],void 0,[(0,c.createButton)("save-analytics-settings","Save and Close",(()=>{d.LegacySetting.saveModified(),f.closeAllModals()}))])]),t.modalFooterText),new f("beta-modal",`${l.EXTENSION_NAME} βeta`,(0,c.createElement)("div",["splus-modal-contents"],{},[(0,c.createElement)("h2",["setting-entry"],{textContent:"Enable βeta Testing"}),(0,c.createElement)("p",["setting-description"],{style:{fontSize:"14px"}},[(0,c.createElement)("span",[],{textContent:`If you have been given a ${l.EXTENSION_NAME} βeta code, you can enter it below to enable that beta test. If you don't know what this is, you should probably close this window, or you can `}),(0,c.createElement)("a",["splus-track-clicks"],{id:"beta-discord-link",href:l.DISCORD_URL,textContent:"join our Discord server"}),(0,c.createElement)("span",[],{textContent:" if you want to learn more."})]),(0,c.createElement)("p",["setting-description"],{style:{fontSize:"14px",paddingTop:"10px",paddingBottom:"10px"}},[(0,c.createElement)("strong",[],{textContent:"You must"}),(0,c.createElement)("span",[],{textContent:" have anonymous usage statistics enabled in order to participate in beta tests"})]),u.Settings.BetaCode.settingsMenuElement,(0,c.createElement)("p",["setting-description"],{style:{fontSize:"14px",paddingTop:"10px"},textContent:"You can change this setting at any point to disable or change the beta test. Access this page by pressing Alt+B (Option+B on Mac)."}),(0,c.createElement)("div",["settings-buttons-wrapper"],void 0,[(0,c.createButton)("save-beta-settings","Save",(()=>{let e=document.getElementById("setting-input-beta").value,t=a.BETA_TESTS[e],n=u.Settings.BetaCode.value;if(""===e&&n)confirm(`Are you sure you want to disable the "${n}" beta test? This will reload the page.`)&&(d.LegacySetting.saveModified(),location.reload());else if(t){if(e===n)return;if(n){if(!confirm(`Are you sure you want to disable the "${n}" beta test and enable the "${e}" beta test? This will reload the page and open a document with information about how the new test works.`))return}else if(!confirm(`Are you sure you want to enable the "${e}" beta test? This will reload the page and open a document with information about how the test works.`))return;d.LegacySetting.saveModified(),window.open(t.url,"_blank"),location.reload()}else alert("The βeta Code you entered was invalid")}))])]),t.modalFooterText),new f("contributors-modal",`${l.EXTENSION_NAME} Contributors`,(0,c.createElement)("div",["splus-modal-contents"],void 0,[(0,c.createElement)("h2",["setting-entry"],{textContent:"Lead Developers"}),(0,c.createElement)("div",["setting-entry"],{},[(0,c.createElement)("h3",["setting-title"],{},[(0,c.createElement)("a",[],{href:"https://github.com/aopell",textContent:"Aaron Opell (@aopell)"})]),(0,c.createElement)("p",["setting-description"],{textContent:"Extension creator; lead developer"})]),(0,c.createElement)("div",["setting-entry"],{},[(0,c.createElement)("h3",["setting-title"],{},[(0,c.createElement)("a",[],{href:"https://github.com/glen3b",textContent:"Glen Husman (@glen3b)"})]),(0,c.createElement)("p",["setting-description"],{textContent:"Developer emeritus"})]),(0,c.createElement)("h2",["setting-entry"],{textContent:"Code Contributions"}),(0,c.createElement)("div",["setting-entry"],{},[(0,c.createElement)("ul",["contributor-list"],{style:{listStyle:"inside"},innerHTML:function(e){let t="";for(let n=0;n<e.length;n++)e[n].url?t+=`<li><a href="${e[n].url}" title="${e[n].name}">${e[n].name}</a></li>`:t+=`<li><span>${e[n].name}</span></li>`;return t}([{name:"Alexander (@xd-arsenic)",url:"https://github.com/xd-arsenic"},{name:"@Roguim",url:"https://github.com/Roguim"},{name:"Peter Stenger (@reteps)",url:"https://github.com/reteps"},{name:"Eric Pedley (@EricPedley)",url:"https://github.com/EricPedley"},{name:"@KTibow",url:"https://github.com/KTibow"},{name:"@FenyLabs",url:"https://github.com/FenyLabs"},{name:"@jetline0",url:"https://github.com/jetline0"},{name:"@dsnsgithub",url:"https://github.com/dsnsgithub"},{name:"@senoj26",url:"https://github.com/senoj26"},{name:"@TheThonos",url:"https://github.com/TheThonos"}])})]),(0,c.createElement)("h2",["setting-entry"],{textContent:"Testing, Bug Reporting, and/or Discord Moderation"}),(0,c.createElement)("div",["setting-entry"],{},[(0,c.createElement)("ul",["contributor-list"],{style:{listStyle:"inside"},innerHTML:function(e){let t="";for(let n=0;n<e.length;n++)e[n].url?t+=`<li><a href="${e[n].url}" title="${e[n].name}">${e[n].name}</a></li>`:t+=`<li><span>${e[n].name}</span></li>`;return t}([{name:"atomicproton#4444"},{name:"penguinee232#7792"},{name:"Cody Lomeli"},{name:"Lucienne Reyes"},{name:"Airbus A330-200#0001"},{name:"Ark#9999"},{name:"ASAMU#1919"},{name:"Blumiere#7442"},{name:"Krishy Fishy#3333"},{name:"meepypotato07#7816"},{name:"phool#0200"},{name:"RVxBot#7862"},{name:"TechFun#9234"}])})]),(0,c.createElement)("h2",["setting-entry"],{textContent:"Icons and Images"}),(0,c.createElement)("div",["setting-entry"],{},[(0,c.createElement)("ul",["contributor-list"],{style:{listStyle:"inside"},innerHTML:function(e){let t="";for(let n=0;n<e.length;n++)t+=`<li><a href="https://www.flaticon.com/authors/${e[n].replace(/[ _]/,"-").toLowerCase()}" title="${e[n]}">${e[n]}</a></li>`;return t}(["DinosoftLabs","Eucalyp","Flat Icons","Freepik","Maxim Basinski","Pixel Buddha","Smashicons","Twitter","Vectors Market","Vitaly Gorbachev","srip","surang","Pixelmeetup","photo3idea_studio"])})]),(0,c.createElement)("div",["setting-entry"],{},[(0,c.createElement)("p",["setting-description"],{},[(0,c.createElement)("span",[],{textContent:"Many custom course icons (under "}),(0,c.createElement)("a",[],{href:"https://creativecommons.org/licenses/by/3.0/",title:"Creative Commons BY 3.0",target:"_blank",textContent:"CC BY 3.0"}),(0,c.createElement)("span",[],{textContent:") from "}),(0,c.createElement)("a",[],{href:"https://www.flaticon.com/",title:"flaticon",target:"_blank",textContent:"flaticon.com"}),(0,c.createElement)("p",[],{textContent:"Bundled:"}),(0,c.createElement)("div",["splus-indent-1"],{innerHTML:'<ul style="list-style: inside;"><li>Exclamation mark (grades page modified indicator): By <a href="https://www.flaticon.com/authors/pixel-buddha" title="Pixel Buddha">Pixel Buddha</a> from <a href="https://www.flaticon.com/" title="Flaticon">flaticon.com</a> under <a href="http://creativecommons.org/licenses/by/3.0/" title="Creative Commons BY 3.0" target="_blank">CC BY 3.0</a></li><li>Bookshelf (default course icon): <i>Modified</i>. Original by <a href="https://www.flaticon.com/authors/freepik" title="Freepik">Freepik</a> from <a href="https://www.flaticon.com/" title="Flaticon">flaticon.com</a> under <a href="http://creativecommons.org/licenses/by/3.0/" title="Creative Commons BY 3.0" target="_blank">CC BY 3.0</a></li><li>Pencil (grade edit icon): From <a href="http://www.iconninja.com/edit-draw-pencile-write-icon-899685" title="IconNinja">iconninja.com</a></li></ul>'})])]),(0,c.createElement)("div",["setting-entry"],{},[(0,c.createElement)("h2",["setting-title"],{textContent:"...and countless other people"}),(0,c.createElement)("p",["setting-description"],{textContent:"For various ideas and suggestions"})]),(0,c.createElement)("div",["setting-entry"],{},[(0,c.createElement)("h2",["setting-title"],{textContent:"Would you like to contribute?"}),(0,c.createElement)("p",["setting-description"],{innerHTML:`Please see our <a href="https://github.com/aopell/SchoologyPlus/blob/develop/CONTRIBUTING.md">contributing guidelines</a> for various ways you can help in the development of ${l.EXTENSION_NAME}. Thanks for your interest in contributing!`})]),(0,c.createElement)("div",["setting-entry"],{},[(0,c.createElement)("h3",["setting-title"],{textContent:"Disclaimer"}),(0,c.createElement)("p",["setting-description"],{textContent:`${l.EXTENSION_NAME} is not affiliated with Schoology Inc. or the Los Angeles Unified School District. Schoology, the SCHOOLOGY® wordmark, and the S logo are registered and unregistered trademarks of Schoology, Inc. in the United States. All product names, logos, and brands are property of their respective owners.`})])]),t.modalFooterText),new f("choose-theme-modal",`${l.EXTENSION_NAME} Themes`,(0,c.createElement)("div",["splus-modal-contents"],{},[(0,c.createElement)("h2",["setting-entry"],{textContent:"Choose a New Theme!"}),(0,c.createElement)("p",["setting-description"],{textContent:`${l.EXTENSION_NAME} has a bunch of new themes! Choose one from below, make your own, or keep your current theme. It's your choice! Click on each theme for a preview and then click the button to confirm your choice. You can change your theme at any time in ${l.EXTENSION_NAME} Settings.`,style:{fontSize:"14px",paddingBottom:"10px"}}),(0,c.createElement)("div",["splus-button-tile-container"],{},[{text:"Modern Dark Theme",theme:"Schoology Plus Modern Dark",new:!0},{text:"Modern Light Theme",theme:"Schoology Plus Modern Light",new:!0},{text:"Modern Rainbow Theme",theme:"Rainbow Modern",new:!0},{text:`${l.EXTENSION_NAME} Classic Theme`,theme:l.DEFAULT_THEME_NAME,active:p.default.active.name===l.DEFAULT_THEME_NAME},{text:`Keep Current Theme: ${p.default.active.name}`,theme:p.default.active.name,active:p.default.active.name!==l.DEFAULT_THEME_NAME,hidden:p.default.active.name===l.DEFAULT_THEME_NAME},{text:"See More Themes or Make Your Own",theme:p.default.active.name,extraWide:p.default.active.name===l.DEFAULT_THEME_NAME}].map((e=>(0,c.createElement)("div",["splus-button-tile","select-theme-tile",...e.active?["active"]:[]],{style:{display:e.hidden?"none":"flex",gridColumnEnd:e.extraWide?"span 2":"unset"},dataset:{new:`${e.new}`},onclick:t=>{let n=t.target;for(let e of n.parentElement.children)e.classList.remove("active");n.classList.add("active"),(0,r.trackEvent)("button_click",{id:"preview-theme",context:"Choose Theme Popup",value:e.text,legacyTarget:"selected tile",legacyAction:e.text,legacyLabel:"Choose Theme Popup"}),p.default.tempTheme=e.theme,p.default.apply(p.default.byName(e.theme)),document.getElementById("theme-popup-select-button").value=`Select ${e.text}`}},[(0,c.createElement)("span",["splus-button-tile-content"],{textContent:e.text})])))),(()=>{let e=(0,c.createButton)("theme-popup-select-button",`Select Keep Current Theme: ${p.default.active.name}`,(e=>{var t;localStorage.setItem("splus-temp-theme-chosen","true");let n=null===(t=document.querySelector(".select-theme-tile.active .splus-button-tile-content"))||void 0===t?void 0:t.textContent;(0,r.trackEvent)("button_click",{id:"apply-theme",context:"Choose Theme Popup",value:null!=n?n:void 0,legacyTarget:"confirmed selection",legacyAction:null!=n?n:void 0,legacyLabel:"Choose Theme Popup"});let o=document.getElementById("choose-theme-modal");f.closeAllModals(),u.Settings.Theme.setValue(p.default.tempTheme),o.querySelector(".splus-button-tile-container .splus-button-tile:last-child").classList.contains("active")&&(location.href=chrome.runtime.getURL("/theme-editor.html"))}));return e.style.float="right",e.style.margin="20px 20px 0",e})()]),t.modalFooterText),new f("debug-modal","Debug Info",(0,c.createElement)("div",["splus-modal-contents"],{},[(0,c.createElement)("div",["setting-entry"],{},[(0,c.createButton)("debug-modal-clipboard-copy","Copy to Clipboard",(e=>navigator.clipboard.writeText((0,d.generateDebugInfo)())))]),(0,c.createElement)("pre",[],{id:"debug-modal-content",textContent:"Loading..."})]),t.modalFooterText,((e,t)=>document.getElementById("debug-modal-content").textContent=(0,d.generateDebugInfo)()))],t.default=f},9229:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.sendNotification=t.updateLastTime=t.loadAssignmentNotifications=void 0;const s=i(n(2838)),r=n(3137),a=n(933),l=n(2589);t.loadAssignmentNotifications=function(e,t){return o(this,void 0,void 0,(function*(){let n=yield fetch(e,{credentials:"same-origin"});if(!n.ok)throw new Error("Error loading notifications: "+n);let o=yield n.json();l.Logger.log("Last new grade: "+new Date(t).toString());let i=t,r=!1;i||(i=Date.now(),r=!0);let a=document.querySelector("div")||document.body.appendChild(document.createElement("div"));a.innerHTML=s.default.sanitize(o.output);let c=a.querySelectorAll(".edge-sentence"),d=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],u=0;for(let e of Array.from(c).reverse())if(e.textContent.includes("new grade")){e.getElementsByTagName("a"),e.querySelector(".other-items-link");let t=e.querySelector(".edge-time").textContent.split(" at "),n=t[0],o=t[1],s=new Date,a=n+` ${s.getFullYear()}`,c=`${d[s.getMonth()]} ${s.getDate()} ${s.getFullYear()}`,p=Date.parse(a);p=p>Date.parse(c)?Date.parse(n+` ${s.getFullYear()-1} ${o}`):Date.parse(`${a} ${o}`),p>i&&(i=p,r=!0,u++,l.Logger.log(e))}let p=null;return u>0&&(p={type:"basic",iconUrl:"imgs/icon@128.png",title:"New grade posted",message:`${u} new assignment${1===u?" has a grade":"s have grades"}`,eventTime:Date.now(),isClickable:!0}),{notification:p,name:"assignment",count:u,lastTime:i,timeModified:r}}))},t.updateLastTime=function(e,t){return o(this,void 0,void 0,(function*(){e?(yield chrome.storage.sync.set({lastTime:t}),l.Logger.log("Set new time "+new Date(t))):l.Logger.log("No new notifications")}))},t.sendNotification=function(e,t,n){return o(this,void 0,void 0,(function*(){if(!e)return;let o=yield chrome.storage.sync.get(null);if(n=n||0==n?n:1,"Firefox"==(0,a.getBrowser)()&&delete e.requireInteraction,l.Logger.log("New notification!",e),n>0&&(!o.notifications||"enabled"==o.notifications||"badge"==o.notifications)){let e=yield chrome.action.getBadgeText({}),t=Number.parseInt(e);chrome.action.setBadgeText({text:(t?t+n:n).toString()})}else l.Logger.log("Number badge is disabled");o.notifications&&"enabled"!=o.notifications&&"popup"!=o.notifications?l.Logger.log("Popup notifications are disabled"):(chrome.notifications.create(t,e),(0,r.trackEvent)("perform_action",{id:"shown",context:"Notifications",value:t,legacyTarget:t,legacyAction:"shown",legacyLabel:"Notifications"}))}))}},412:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getGradingScale=t.generateDebugInfo=t.isLAUSD=t.SIDEBAR_SECTIONS_MAP=t.SIDEBAR_SECTIONS=t.LegacySetting=void 0;const i=n(3137),s=n(5252),r=n(933);class a{constructor(e,t,n,o,i,s,l,c,d,u,p="sync"){this.storageLocation="sync",this.name=e,this.onmodify=c,this.onsave=d,this.onload=l,this.onshown=u,this.modified=!1,this.default=o,this.storageLocation=p,this.control=(()=>{let l=(0,r.createElement)("div",["setting-entry"]),c=(0,r.createElement)("h2",["setting-title"],{textContent:t+": "}),d=(0,r.createElement)("p",["setting-description"],{innerHTML:n}),u=null;switch(i){case"number":case"text":case"button":u=(0,r.createElement)("input",void 0,Object.assign({type:i},s)),c.appendChild(u),"button"==i?u.onclick=e=>a.onModify(e.target):u.oninput=e=>a.onModify(e.target);break;case"select":u=(0,r.createElement)("select");for(let e of s.options)u.appendChild((0,r.createElement)("option",void 0,{textContent:e.text,value:e.value}));c.appendChild(u),u.onchange=e=>a.onModify(e.target);break;default:u=(0,r.createElement)("div"),c.appendChild(u)}return l.appendChild(c),l.appendChild(d),u.dataset.settingName=e,u.id=`setting-input-${e}`,"local"===p&&void 0===a.rawLocalStorage[e]?a.rawLocalStorage[e]=o:"sync"===p&&void 0===a.rawSyncStorage[e]&&(a.rawSyncStorage[e]=o),this.onload?u.value=this.onload(this.getRawValue(),u)||this.default:u.value=this.getRawValue()||this.default,l})(),a.settings[e]=this}getRawValue(){return"sync"===this.storageLocation?a.rawSyncStorage[this.name]:a.rawLocalStorage[this.name]}getElement(){return document.getElementById(`setting-input-${this.name}`)}static saveModified(e,t){return o(this,arguments,void 0,(function*(e,t,n=!0,o=!0){let s={},r={};if(e&&Object.assign(s,e),t&&Object.assign(r,t),o)for(let e in a.settings){let t=a.settings[e];if(t.modified){let n=t.onsave(t.getElement());"sync"===t.storageLocation?(s[e]=n,a.rawSyncStorage[e]=n):(r[e]=n,a.rawLocalStorage[e]=n),t.onload(n,t.getElement()),t.modified=!1}}yield chrome.storage.sync.set(s),yield chrome.storage.local.set(r);let l=Object.assign(Object.assign({},s),r);for(let e in l){let t=a.settings[e];if(!t)continue;if((0,i.trackEvent)("update_setting",{id:e,context:"Settings",value:l[e],legacyTarget:e,legacyAction:`set value: ${l[e]}`,legacyLabel:"Setting"}),!t.getElement())continue;let n=t.getElement().parentElement.querySelector(".setting-modified");n&&n.remove()}yield a.updateSettingsFunction();let c=document.getElementById("save-settings");n&&c&&(c.value="Saved!",setTimeout((()=>{c.value="Save Settings"}),2e3))}))}static restoreDefaults(){return o(this,void 0,void 0,(function*(){if(confirm("Are you sure you want to delete all settings?\nTHIS CANNOT BE UNDONE")){(0,i.trackEvent)("reset_settings",{context:"Settings",legacyTarget:"restore-defaults",legacyAction:"restore default values",legacyLabel:"Setting"});for(let e in a.settings)"sync"===a.settings[e].storageLocation?(yield chrome.storage.sync.remove(e),delete a.rawSyncStorage[e]):(yield chrome.storage.local.remove(e),delete a.rawLocalStorage[e]),a.settings[e].onload(void 0,a.settings[e].getElement());location.reload()}}))}static export(){(0,i.trackEvent)("button_click",{id:"export-settings",context:"Settings",legacyTarget:"export-settings",legacyAction:"export settings",legacyLabel:"Setting"}),navigator.clipboard.writeText(JSON.stringify({sync:a.rawSyncStorage,local:a.rawLocalStorage},null,2)).then((()=>alert("Copied settings to clipboard!"))).catch((e=>alert("Exporting settings failed!")))}static import(){if((0,i.trackEvent)("button_click",{id:"import-settings-attempt",context:"Settings",legacyTarget:"import-settings",legacyAction:"attempt import settings",legacyLabel:"Setting"}),confirm(`Are you sure you want to import settings? Importing invalid or malformed settings will most likely break ${s.EXTENSION_NAME}.`)){let e=prompt("Please paste settings to import below:");try{let t=JSON.parse(e);a.setValues(t.sync,t.local).then((()=>{(0,i.trackEvent)("button_click",{id:"import-settings-success",context:"Settings",legacyTarget:"import-settings",legacyAction:"successfully imported settings",legacyLabel:"Setting"}),alert(`Successfully imported settings. If ${s.EXTENSION_NAME} breaks, please restore defaults or reinstall. Reloading page.`),location.reload()}))}catch(e){return void alert("Failed to import settings! They were probably malformed. Make sure the settings are valid JSON. The top level object should have a 'sync' and 'local' key.")}}}static onModify(e){let t=e.parentElement;t&&!t.querySelector(".setting-modified")&&t.appendChild((0,r.createElement)("span",["setting-modified"],{textContent:" *",title:"This setting has been modified from its saved value"}));let n=a.settings[e.dataset.settingName];n.modified=!0,n.onmodify&&n.onmodify(e)}static onShown(){for(let e in a.settings)a.settings[e].onshown&&a.settings[e].onshown()}static anyModified(){for(let e in a.settings)if(a.settings[e].modified)return!0;return!1}static getValue(e,t,n){return"sync"===t&&void 0!==a.rawSyncStorage[e]?a.rawSyncStorage[e]:"local"===t&&void 0!==a.rawLocalStorage[e]?a.rawLocalStorage[e]:a.settings[e]&&!n?a.settings[e].default:n}static getNestedValue(e,t,n,o){return"sync"===n&&a.rawSyncStorage[e]&&t in a.rawSyncStorage[e]?a.rawSyncStorage[e][t]:"local"===n&&a.rawLocalStorage[e]&&t in a.rawLocalStorage[e]?a.rawLocalStorage[e][t]:o}static setValue(e,t,n){return o(this,void 0,void 0,(function*(){"sync"===n?yield a.saveModified({[e]:t},{},!1,!1):yield a.saveModified({},{[e]:t},!1,!1),"defaultDomain"===e&&chrome.runtime.sendMessage({type:"updateDefaultDomain",domain:t})}))}static setNestedValue(e,t,n,i){return o(this,void 0,void 0,(function*(){var o=a.getValue(e,i,{});o[t]=n,"sync"===i?yield a.saveModified({[e]:o},{},!1,!1):yield a.saveModified({},{[e]:o},!1,!1)}))}static setValues(e,t){return o(this,void 0,void 0,(function*(){yield a.saveModified(e,t,!1,!1)}))}}t.LegacySetting=a,a.settings={},a.rawSyncStorage={},a.rawLocalStorage={},a.updateSettingsFunction=()=>Promise.resolve(),t.SIDEBAR_SECTIONS=[{name:"Quick Access",selector:"#right-column-inner div.quick-access-wrapper"},{name:"Reminders",selector:"#right-column-inner div.reminders-wrapper"},{name:"Overdue",selector:"#right-column-inner div#overdue-submissions.overdue-submissions-wrapper"},{name:"Upcoming",selector:"#right-column-inner div.upcoming-submissions-wrapper"},{name:"Upcoming Events",selector:"#right-column-inner div#upcoming-events.upcoming-events-wrapper"},{name:"Recently Completed",selector:"#right-column-inner div.recently-completed-wrapper"}],t.SIDEBAR_SECTIONS_MAP=Object.fromEntries(t.SIDEBAR_SECTIONS.map((e=>[e.name,e]))),t.isLAUSD=function(){return"lms.lausd.net"===a.getValue("defaultDomain","sync")},t.generateDebugInfo=function(){return JSON.stringify({version:chrome.runtime.getManifest().version,getBrowser:(0,r.getBrowser)(),url:location.href,storageContents:{sync:a.rawSyncStorage,local:a.rawLocalStorage},userAgent:navigator.userAgent},null,2)},t.getGradingScale=function(e){let t={90:"A",80:"B",70:"C",60:"D",0:"F"};return a.rawSyncStorage.defaultGradingScale&&(t=a.rawSyncStorage.defaultGradingScale),null!==e&&a.rawSyncStorage.gradingScales&&a.rawSyncStorage.gradingScales[e]?a.rawSyncStorage.gradingScales[e]:t}},9792:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Settings=void 0;const s=n(9891),r=n(5252),a=n(8563),l=n(933),c=n(412),d=i(n(564));class u{constructor(e,t,n,o,i,s,{config:r,onInit:a,onPreviewChange:l,onSave:c,onShown:d}={}){this.name=e,this.friendlyName=t,this.description=n,this._defaultValue=o,this.controlType=i,this.storageLocation=s,this.config=null!=r?r:{},this.onInit=null!=a?a:e=>e,this.onPreviewChange=l,this.onSave=null!=c?c:e=>e.value,this.onShown=d}initializeSetting(){var e,t;this.settingObject=new c.LegacySetting(this.name,this.friendlyName,this.description,this.defaultValue,this.controlType,this.config,this.onInit.bind(this),null===(e=this.onPreviewChange)||void 0===e?void 0:e.bind(this),this.onSave.bind(this),null===(t=this.onShown)||void 0===t?void 0:t.bind(this),this.storageLocation)}get settingsMenuElement(){return this.initializeSetting(),this.settingObject.control}get inputElement(){return this.settingObject.getElement()}get defaultValue(){return this._defaultValue instanceof Function?this._defaultValue():this._defaultValue}get value(){return c.LegacySetting.getValue(this.name,this.storageLocation,this.defaultValue)}valueOrDefault(e){return c.LegacySetting.getValue(this.name,this.storageLocation,e)}nestedValue(e,t){return c.LegacySetting.getNestedValue(this.name,e,this.storageLocation,t)}setValue(e){return o(this,void 0,void 0,(function*(){yield c.LegacySetting.setValue(this.name,e,this.storageLocation)}))}setNestedValue(e,t){return o(this,void 0,void 0,(function*(){yield c.LegacySetting.setNestedValue(this.name,e,t,this.storageLocation)}))}}t.Settings={LastLoadedVersion:new u("newVersion","Last Loaded Version","The version of SchoologyPlus that was last loaded","","text","sync",{config:{disabled:!0}}),DefaultDomain:new u("defaultDomain","Default Schoology Domain",`The website on which ${r.EXTENSION_NAME} runs. Cannot be changed here.`,"app.schoology.com","text","sync",{config:{disabled:!0}}),Analytics:new u("analytics","Anonymous Usage Statistics",`[Reload required] Allow ${r.EXTENSION_NAME} to collect anonymous information about how you use the extension. We don't collect any personal information per our privacy policy.`,(()=>"Firefox"===(0,l.getBrowser)()?"disabled":"enabled"),"select","sync",{config:{options:[{text:"Enabled",value:"enabled"},{text:"Disabled",value:"disabled"}]}}),BetaCode:new u("beta",`${r.EXTENSION_NAME} βeta Code`,`[Reload required] Enables a beta test of a new ${r.EXTENSION_NAME} feature if you enter a valid code`,"","text","sync",{config:{disabled:!(!s.FORCED_BETA_TEST&&"enabled"===c.LegacySetting.getValue("analytics","sync"))||void 0,placeholder:s.FORCED_BETA_TEST?s.FORCED_BETA_TEST:""}}),ThemeEditorButton:new u("themeEditor","Theme Editor","Click to open the theme editor to create, edit, or select a theme","Theme Editor","button","local",{onInit:()=>"Theme Editor",onPreviewChange:()=>location.href=chrome.runtime.getURL("/theme-editor.html"),onSave:()=>{}}),Theme:new u("theme","Theme",`Change the theme of ${r.EXTENSION_NAME}`,r.DEFAULT_THEME_NAME,"select","sync",{config:{options:[...a.DEFAULT_THEMES.filter((e=>!a.LAUSD_THEMES.includes(e.name)||(0,c.isLAUSD)())).map((e=>({text:e.name,value:e.name}))),...(c.LegacySetting.rawSyncStorage.themes||[]).map((e=>({text:e.name,value:e.name})))]},onInit:e=>(d.default.tempTheme=void 0,d.default.apply(d.default.active),e),onPreviewChange:e=>{d.default.tempTheme=e.value,d.default.apply(d.default.byName(e.value))}}),OverrideCourseIcons:new u("courseIcons","Override Course Icons","[Refresh required to disable] Replace the course icons with the selected theme's icons",(()=>(0,c.isLAUSD)()?"enabled":"defaultOnly"),"select","sync",{config:{options:[{text:"All Icons",value:"enabled"},{text:"Default Icons Only",value:"defaultOnly"},{text:"Disabled",value:"disabled"}]}}),UseDefaultIcons:new u("useDefaultIconSet","Use Built-In Icon Set",`[Refresh required] Use ${r.EXTENSION_NAME}'s <a href="${chrome.runtime.getURL("/default-icons.html")}" target="_blank">default course icons</a> as a fallback when a custom icon has not been specified. NOTE: these icons were meant for schools in Los Angeles Unified School District and may not work correctly for other schools.`,(()=>(0,c.isLAUSD)()?"enabled":"disabled"),"select","sync",{config:{options:[{text:"Enabled",value:"enabled"},{text:"Disabled",value:"disabled"}]}}),CourseIconFavicons:new u("courseIconFavicons","Use Course Icons as Favicons When Possible","[Refresh required] Use the course's icon as the favicon (the icon next to the tab's title) on most course pages. This will not work in all cases.","enabled","select","sync",{config:{options:[{text:"Enabled",value:"enabled"},{text:"Disabled",value:"disabled"}]}}),OverrideUserStyles:new u("overrideUserStyles","Override Styled Text","Override styled text in homefeed posts and discussion responses when using modern themes. WARNING: This guarantees text is readable on dark theme, but removes colors and other styling that may be important. You can always use the Toggle Theme button on the navigation bar to temporarily disble your theme.","true","select","sync",{config:{options:[{text:"Enabled",value:"true"},{text:"Disabled",value:"false"}]},onInit:e=>(document.documentElement.setAttribute("style-override",e),e),onPreviewChange:function(e){this.onInit(e.value)}}),ArchivedCoursesButton:new u("archivedCoursesButton","Archived Courses Button","Adds a link to see past/archived courses in the courses dropdown","show","select","sync",{config:{options:[{text:"Show",value:"show"},{text:"Hide",value:"hide"}]}}),PowerSchoolLogo:new u("powerSchoolLogo","PowerSchool Logo","Controls the visibility of the PowerSchool logo on the navigation bar","block","select","sync",{config:{options:[{text:"Show",value:"block"},{text:"Hide",value:"none"}]},onInit:e=>((0,l.setCSSVariable)("power-school-logo-display",e),e),onPreviewChange:function(e){this.onInit(e.value)}}),IndicateSubmittedAssignments:new u("indicateSubmission","Submitted Assignments Checklist",'[Reload required] Shows a checkmark, shows a strikethrough, or hides items in "Upcoming Assignments" that have been submitted. If "Show Check Mark" is selected, a checklist function will be enabled allowing you to manually mark assignments as complete.',"check","select","sync",{config:{options:[{text:"Show Check Mark ✔ (Enables manual checklist)",value:"check"},{text:"Show Strikethrough (Doesn't allow manual checklist)",value:"strikethrough"},{text:"Hide Assignment (Not recommended)",value:"hide"},{text:"Do Nothing",value:"disabled"}]}}),ToDoIconVisibility:new u("toDoIconVisibility",'"Overdue" and "Due Tomorrow" Icon Visibility','Controls the visibility of the "Overdue" exclamation point icon and the "Due Tomorrow" clock icon in the Upcoming and Overdue lists on the sidebar of the homepage',"visible","select","sync",{config:{options:[{text:"Visible",value:"visible"},{text:"Hidden",value:"hidden"}]},onInit:e=>((0,l.setCSSVariable)("to-do-list-icons-display","block"),"hidden"===e&&(0,l.setCSSVariable)("to-do-list-icons-display","none"),e),onPreviewChange:function(e){this.onInit(e.value)}}),CustomGradingScales:new u("customScales","Custom Grading Scales","[Refresh required] Uses custom grading scales (set per-course in course settings) when courses don't have one defined","enabled","select","sync",{config:{options:[{text:"Enabled",value:"enabled"},{text:"Disabled",value:"disabled"}]}}),CourseOrderMethod:new u("orderClasses","Order Classes","[Refresh required] Changes the order of your classes on the grades and mastery pages (only works if your course names contain PER N or PERIOD N)","period","select","sync",{config:{options:[{text:"By Period",value:"period"},{text:"Alphabetical",value:"alpha"}]}}),WeightedGradebookIndicator:new u("weightedGradebookIndicator","Weighted Gradebook Indicator","Adds an indicator next to gradebooks which are weighted","enabled","select","sync",{config:{options:[{text:"Show",value:"enabled"},{text:"Hide",value:"disabled"}]},onInit:e=>((0,l.setCSSVariable)("weighted-gradebook-indicator-display","enabled"==e?"inline":"none"),e),onPreviewChange:function(e){this.onInit(e.value)}}),DesktopNotifications:new u("notifications","Desktop Notifications","Displays desktop notifications and a number badge on the extension button when new grades are entered","enabled","select","sync",{config:{options:[{text:"Enable All Notifications",value:"enabled"},{text:"Number Badge Only (No Pop-Ups)",value:"badge"},{text:"Pop-Ups Only (No Badge)",value:"popup"},{text:"Disable All Notifications",value:"disabled"}]}}),Broadcasts:new u("broadcasts","Announcement Notifications",`Displays news feed posts for announcements sent to all ${r.EXTENSION_NAME} users`,"enabled","select","sync",{config:{options:[{text:"Enabled",value:"enabled"},{text:"Disabled",value:"disabled"}]}}),BypassLinkRedirects:new u("autoBypassLinkRedirects","Automatically Bypass Link Redirects","Automatically skip the external link redirection page, clicking 'Continue' by default","enabled","select","sync",{config:{options:[{text:"Enabled",value:"enabled"},{text:"Disabled",value:"disabled"}]}}),PersistSessionCookies:new u("sessionCookiePersist","Stay Logged In","[Logout/login required] Stay logged in to Schoology when you restart your browser","disabled","select","sync",{config:{options:[{text:"Enabled",value:"enabled"},{text:"Disabled",value:"disabled"}]}}),SidebarSectionOrder:new u("sidebarSectionOrder","Customize Sidebar","",{include:[],exclude:[]},"custom","sync",{onInit:function(e,t){if(!t)throw new Error("SidebarSectionOrder element not found");t.innerHTML="",t.appendChild((0,l.createElement)("p",[],{style:{fontWeight:"normal"},textContent:"Drag items between the sections to control which sections of the sidebar are visible and the order in which they are shown."})),t.appendChild((0,l.createElement)("div",["sortable-container"],{},[(0,l.createElement)("div",["sortable-list"],{},[(0,l.createElement)("h3",["splus-underline-heading"],{textContent:"Sections to Hide"}),(0,l.createElement)("ul",["sidebar-sortable","splus-modern-border-radius","splus-modern-padding"],{id:"sidebar-excluded-sortable"})]),(0,l.createElement)("div",["sortable-list"],{},[(0,l.createElement)("h3",["splus-underline-heading"],{textContent:"Sections to Show"}),(0,l.createElement)("ul",["sidebar-sortable","splus-modern-border-radius","splus-modern-padding"],{id:"sidebar-included-sortable"})])]));let n=null==t?void 0:t.querySelector("#sidebar-included-sortable"),o=null==t?void 0:t.querySelector("#sidebar-excluded-sortable");n.innerHTML="",o.innerHTML="",e&&e.include&&e.exclude||(e={include:[],exclude:[]});for(let t of e.include)n.appendChild((0,l.createElement)("p",["sortable-item","splus-modern-border-radius","splus-modern-padding"],{textContent:t}));for(let t of e.exclude)o.appendChild((0,l.createElement)("p",["sortable-item","splus-modern-border-radius","splus-modern-padding"],{textContent:t}));for(let t of c.SIDEBAR_SECTIONS)e.include.includes(t.name)||e.exclude.includes(t.name)||n.appendChild((0,l.createElement)("p",["sortable-item","splus-modern-border-radius","splus-modern-padding"],{textContent:t.name}));return e},onSave:e=>{let t=e.querySelector("#sidebar-included-sortable"),n=e.querySelector("#sidebar-excluded-sortable");return{include:Array.from(t.children).map((e=>e.textContent)),exclude:Array.from(n.children).map((e=>e.textContent))}},onShown:function(){$(".sidebar-sortable").sortable({connectWith:".sidebar-sortable",stop:()=>c.LegacySetting.onModify(this.inputElement)})}}),ForceDefaultCourseIcons:new u("forceDefaultCourseIcons","Force Default Course Icons","",{},"text","sync",{config:{disabled:!0},onInit:e=>JSON.stringify(e)}),Popups:new u("popup","Popups","",{},"text","local",{config:{disabled:!0},onInit:e=>JSON.stringify(e)}),CourseNicknames:new u("courseAliases","Course Nicknames","",{},"text","sync",{config:{disabled:!0},onInit:e=>JSON.stringify(e)}),CourseQuickLinks:new u("courseQuickLinks","Course Quick Links","",{},"text","sync",{config:{disabled:!0},onInit:e=>JSON.stringify(e)}),CourseGradingScales:new u("gradingScales","Custom Grading Scales","",{},"text","sync",{config:{disabled:!0},onInit:e=>JSON.stringify(e)}),DefaultGradingScale:new u("defaultGradingScale","Default Grading Scale","",{},"text","sync",{config:{disabled:!0},onInit:e=>JSON.stringify(e)}),UnreadBroadcasts:new u("unreadBroadcasts",`Unread ${r.EXTENSION_NAME} Announcements`,"",[],"text","local",{config:{disabled:!0},onInit:e=>JSON.stringify(e)}),Themes:new u("themes","All Custom Themes","",[],"text","sync",{config:{disabled:!0},onInit:e=>JSON.stringify(e)}),AssignmentCompletionOverrides:new u("assignmentCompletionOverrides","Assignment Completion Overrides","",{},"text","local",{config:{disabled:!0},onInit:e=>JSON.stringify(e)}),MissingIconsLastCheck:new u("missingIconsLastCheck","Last Checked for Missing Course Icons","",0,"text","local",{config:{disabled:!0}}),ApiKey:new u("apikey","API Key","The API key for the Schoology API",void 0,"text","sync",{config:{disabled:!0}}),ApiSecret:new u("apisecret","API Secret","The API secret for the Schoology API",void 0,"text","sync",{config:{disabled:!0}}),ApiUser:new u("apiuser","API User","The User ID for the Schoology API",void 0,"text","sync",{config:{disabled:!0}}),ApiStatus:new u("apiStatus","API Status","The status of the API",void 0,"text","sync",{config:{disabled:!0}})}},7012:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SchoologyTheme=t.ThemeIcon=t.ThemeCursor=t.ThemeLogo=t.ThemeColor=t.ModernColorDefinition=t.ModernOptionsDefinition=t.ModernTextColorDefinition=t.ModernInterfaceColorDefinition=t.RainbowColorDefinition=t.RainbowColorComponentDefinition=t.RainbowColorComponentAnimation=t.CustomColorDefinition=void 0;class n{constructor(e,t,n,o,i){this.primary=e,this.hover=t,this.background=n,this.border=o,this.link=i||t}static loadFromObject(e){return e?new n(e.primary,e.hover,e.background,e.border,e.link||e.hover):void 0}}t.CustomColorDefinition=n;class o{constructor(e,t,n,o,i){this.speed=e,this.offset=t,this.min=n,this.max=o,this.alternate=i}static loadFromObject(e){return e?new o(e.speed,e.offset,e.min,e.max,e.alternate):void 0}}t.RainbowColorComponentAnimation=o;class i{constructor(e,t){this.animate=e,this.value=t}static loadFromObject(e){return e?new i(o.loadFromObject(e.animate),e.value):void 0}}t.RainbowColorComponentDefinition=i;class s{constructor(e,t,n){this.hue=e,this.saturation=t,this.lightness=n}static loadFromObject(e){return e?new s(i.loadFromObject(e.hue),i.loadFromObject(e.saturation),i.loadFromObject(e.lightness)):void 0}}t.RainbowColorDefinition=s;class r{constructor(e,t,n,o,i,s,r,a,l){this.primary=e,this.accent=t,this.secondary=n,this.input=o,this.border=i,this.highlight=s,this.active=r,this.grades=a,this.error=l}static loadFromObject(e){return e?new r(e.primary,e.accent,e.secondary,e.input,e.border,e.highlight,e.active,e.grades,e.error):void 0}}t.ModernInterfaceColorDefinition=r;class a{constructor(e,t,n){this.primary=e,this.muted=t,this.contrast=n}static loadFromObject(e){return e?new a(e.primary,e.muted,e.contrast):void 0}}t.ModernTextColorDefinition=a;class l{constructor(e,t,n){this.borderRadius=e,this.borderSize=t,this.padding=n}static loadFromObject(e){return e?new l(e.borderRadius,e.borderSize,e.padding):void 0}}t.ModernOptionsDefinition=l;class c{constructor(e,t,n,o,i){this.dark=e,this.interface=t,this.calendar=n,this.text=o,this.options=i}static loadFromObject(e){return e?new c(e.dark,r.loadFromObject(e.interface),e.calendar,a.loadFromObject(e.text),l.loadFromObject(e.options)):void 0}}t.ModernColorDefinition=c;class d{constructor(e,t,n,o){this.hue=e,this.custom=t,this.rainbow=n,this.modern=o}static loadFromObject(e){return e?new d(e.hue,n.loadFromObject(e.custom),s.loadFromObject(e.rainbow),c.loadFromObject(e.modern)):new d(210)}}t.ThemeColor=d;class u{constructor(e,t){this.url=e,this.preset=t}static loadFromObject(e){return e?new u(e.url,e.preset):new u(void 0,"schoology_plus")}}t.ThemeLogo=u;class p{constructor(e){this.primary=e}static loadFromObject(e){return e?new p(e.primary):void 0}}t.ThemeCursor=p;class h{constructor(e,t){this.regex=e,this.url=t}static loadArrayFromObject(e){return e?e.map((e=>new h(e.regex,e.url))):void 0}}t.ThemeIcon=h;class m{constructor(e,t,n,o,i,s){if(!e)throw new Error("Theme must have a name");this.name=e,this.version=t||m.CURRENT_VERSION,this.color=n,this.logo=o,this.cursor=i,this.icons=s}toString(){return JSON.stringify(this)}static loadFromObject(e){if(e&&e.version===m.CURRENT_VERSION)return new m(e.name,e.version,d.loadFromObject(e.color),u.loadFromObject(e.logo),p.loadFromObject(e.cursor),h.loadArrayFromObject(e.icons));throw new Error(`Invalid theme object provided. Make sure the provided JSON is a valid version ${m.CURRENT_VERSION} theme.`)}}t.SchoologyTheme=m,m.CURRENT_VERSION=2},564:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ICON_REQUEST_URL=t.defaultCourseIconUrlRegex=void 0;const o=n(5252),i=n(7239),s=n(8563),r=n(933),a=n(412),l=n(9792),c=n(302);t.defaultCourseIconUrlRegex=/\/sites\/[a-zA-Z0-9_-]+\/themes\/[%a-zA-Z0-9_-]+\/images\/course-default.(?:svg|png|jpe?g|gif)(\?[a-zA-Z0-9_%-]+(=[a-zA-Z0-9_%-]+)?(&[a-zA-Z0-9_%-]+(=[a-zA-Z0-9_%-]+)?)*)?$/;let d=document.createElement("div");d.style.display="none";let u=!1;t.ICON_REQUEST_URL="https://docs.google.com/forms/d/e/1FAIpQLSe-v0vRE4Obwkx6iL37aztz3kmpqYBBVxKEsdVxu8CZqk1OCQ/viewform?entry.50164059=",setInterval((()=>{p.active.onupdate&&p.active.onupdate()}),100);class p{constructor(e,t,n){this.name=e,this.onapply=t,this.onupdate=n}static setModernEnabled(e){document.documentElement.setAttribute("modern",e.toString())}static getIcon(e){if(!e)return null;for(let t of p.profilePictureOverrides)if(e.match(new RegExp(t.regex,"i")))return t.url;let t=l.Settings.Themes.value.find((e=>e.name===p.active.name));if(t&&t.icons&&t.icons instanceof Array)for(let n of t.icons){let t=Array.isArray(n)?new RegExp(n[0],"i"):new RegExp(n.regex,"i");if(e.match(t))return Array.isArray(n)?n[1]:n.url}if("enabled"===l.Settings.UseDefaultIcons.value)for(let t of i.DEFAULT_ICONS)if(e.match(new RegExp(t.regex,"i")))return t.url;return null}static hasBuiltInIcon(e){for(let t of i.DEFAULT_ICONS)if("."!=t.regex&&(null==e?void 0:e.match(new RegExp(t.regex,"i"))))return!0;return!1}static loadFromObject(e){return e.version?new p(e.name,2===e.version?()=>{if(e.color.hue?p.setBackgroundHue(e.color.hue):e.color.custom&&p.setBackgroundColor(e.color.custom.primary,e.color.custom.background,e.color.custom.hover,e.color.custom.border,e.color.custom.link),p.setModernEnabled(!!e.color.modern),e.color.modern&&p.setModernColors(e.color.modern),e.logo||(e.logo={preset:"schoology_plus"}),p.setDefaultLogoVisibility(!1),e.logo.url)p.setLogoUrl(e.logo.url);else switch(e.logo.preset){case"schoology_plus":p.setLogoUrl(chrome.runtime.getURL("/imgs/schoology-plus-wide.svg"));break;case"schoology_logo":p.setLogoUrl();break;case"lausd_legacy":p.setLogoUrl(chrome.runtime.getURL("/imgs/lausd-legacy.png"));break;case"lausd_2022":p.setLogoUrl(chrome.runtime.getURL("/imgs/lausd-2022.png"));break;case"lausd_2019":p.setLogoUrl(chrome.runtime.getURL("/imgs/lausd-2019.png"));break;case"default":p.setDefaultLogoVisibility(!0)}e.cursor&&p.setCursorUrl(e.cursor.primary)}:()=>{switch(p.setBackgroundHue(e.hue),e.colors&&p.setBackgroundColor(e.colors[0],e.colors[1],e.colors[2],e.colors[3]),p.setCursorUrl(e.cursor),e.logo=e.logo||"schoology",e.logo){case"schoology":p.setLogoUrl();break;case"lausd":p.setLogoUrl(chrome.runtime.getURL("/imgs/lausd-legacy.png"));break;case"lausd_new":p.setLogoUrl(chrome.runtime.getURL("/imgs/lausd-2019.png"));break;default:p.setLogoUrl(e.logo)}},function(){return e.color&&e.color.rainbow?()=>{let n=0,o=0,i=0,s=(new Date).valueOf();if(e.color.rainbow&&e.color.rainbow.hue&&e.color.rainbow.saturation&&e.color.rainbow.lightness){if(e.color.rainbow.hue.animate){let o=e.color.rainbow.hue.animate;o.max<o.min&&(o.max+=360),n=t(o,s)}else n=e.color.rainbow.hue.value;o=e.color.rainbow.saturation.animate?t(e.color.rainbow.saturation.animate,s):e.color.rainbow.saturation.value,i=e.color.rainbow.lightness.animate?t(e.color.rainbow.lightness.animate,s):e.color.rainbow.lightness.value,p.setBackgroundHue(n,o,i)}}:void 0;function t(e,t){let{speed:n,offset:o,alternate:i,min:s,max:r}=e,a=r-s,l=(t/(150-n)+ +o)%(i?2*a:a)+s;return i&&l>r&&(l=r-(l-r)),l}}()):null}static apply(e){p.setBackgroundHue(210),p.setCursorUrl(),p.setDefaultLogoVisibility(!1),p.setLogoUrl(),e.onapply(),p.setProfilePictures()}static get active(){return p.tempTheme?p.byName(p.tempTheme):p.byName(l.Settings.Theme.value)||p.byName(o.DEFAULT_THEME_NAME)}static byName(e){return p.themes.find((t=>(null==t?void 0:t.name)==e))||p.byName(o.DEFAULT_THEME_NAME)}static setBackgroundColor(e,t,n,o,i=n){e&&t&&n&&o&&(document.documentElement.style.setProperty("--primary-color",e),document.documentElement.style.setProperty("--background-color",t),document.documentElement.style.setProperty("--hover-color",n),document.documentElement.style.setProperty("--border-color",o),document.documentElement.style.setProperty("--link-color",i))}static setBackgroundHue(e,t,n){!e||t||n?e&&(document.documentElement.style.setProperty("--color-hue",e.toString()),document.documentElement.style.setProperty("--primary-color",`hsl(var(--color-hue), ${t}%, ${n}%)`),document.documentElement.style.setProperty("--background-color","hsl(var(--color-hue), 60%, 30%)"),document.documentElement.style.setProperty("--hover-color","hsl(var(--color-hue), 55%, 40%)"),document.documentElement.style.setProperty("--border-color","hsl(var(--color-hue), 60%, 25%)"),document.documentElement.style.setProperty("--link-color","hsl(var(--color-hue), 55%, 40%)")):(document.documentElement.style.setProperty("--color-hue",e.toString()),document.documentElement.style.setProperty("--primary-color","hsl(var(--color-hue), 50%, 50%)"),document.documentElement.style.setProperty("--background-color","hsl(var(--color-hue), 60%, 30%)"),document.documentElement.style.setProperty("--hover-color","hsl(var(--color-hue), 55%, 40%)"),document.documentElement.style.setProperty("--border-color","hsl(var(--color-hue), 60%, 25%)"),document.documentElement.style.setProperty("--link-color","hsl(var(--color-hue), 55%, 40%)"))}static setModernColors(e){if((0,r.setCSSVariable)("theme-is-dark",(e.dark?1:0).toString()),document.documentElement.setAttribute("dark",e.dark?"true":"false"),e.interface&&((0,r.setCSSVariable)("primary",e.interface.primary),(0,r.setCSSVariable)("accent",e.interface.accent),(0,r.setCSSVariable)("secondary",e.interface.secondary),(0,r.setCSSVariable)("input",e.interface.input),(0,r.setCSSVariable)("contrast-border",e.interface.border),(0,r.setCSSVariable)("highlight",e.interface.highlight),(0,r.setCSSVariable)("active",e.interface.active),(0,r.setCSSVariable)("grades",e.interface.grades),(0,r.setCSSVariable)("error",e.interface.error)),e.calendar)for(let t=0;t<Math.min(30,e.calendar.length);t++)(0,r.setCSSVariable)(`cal${t+1}`,e.calendar[t]);e.text&&((0,r.setCSSVariable)("text",e.text.primary),(0,r.setCSSVariable)("muted-text",e.text.muted),(0,r.setCSSVariable)("contrast-text",e.text.contrast)),e.options&&((0,r.setCSSVariable)("border-radius",`${e.options.borderRadius}px`),(0,r.setCSSVariable)("border-size",`${e.options.borderSize}px`),(0,r.setCSSVariable)("padding",`${e.options.padding}px`))}static setProfilePictures(e){var n,i;if("disabled"===l.Settings.OverrideCourseIcons.value)return;let s="defaultOnly"===l.Settings.OverrideCourseIcons.value,r=[];e&&(r=s?Array.from(e).filter((e=>e.src.match(t.defaultCourseIconUrlRegex))):Array.from(e));let m=document.querySelector(".profile-picture-wrapper.sCourse-processed .profile-picture>img");s&&m&&!m.src.match(t.defaultCourseIconUrlRegex)&&(m=null),m&&r.push(m);let g=document.querySelectorAll(".my-courses-item-list");if(g&&g.length>0){let e=[];for(let n of Array.from(g).reduce(((e,t)=>e.concat(Array.from(t.querySelectorAll(".course-item")))),[])){let o=n.querySelector(".profile-picture>img");o&&(s&&!o.src.match(t.defaultCourseIconUrlRegex)||(o.alt="Profile picture for "+n.textContent,e.push(o)))}r=r.concat(e)}let f=Array.from(document.querySelectorAll(".gradebook-course-title .arrow:not(.icon-modified), .splus-course-icon:not(.icon-modified)"));for(let e of f)e.dataset.themedIconMode="gradesPageArrow";let v=document.querySelectorAll(".splus-courses-navbar-button ._1tpub.Kluyr a.Card-card-1Qd8e .Card-card-image-uV6Bu");for(let e of v){e.dataset.themedIconMode="coursesDropDown";let n=e.parentElement,o=n.querySelector(".Card-card-data-17m6S div:not(.splus-coursesdropdown-nicknamed-dataset) ._3U8Br._2s0LQ._2qcpH._3ghFm._17Z60._1Aph-.gs0RB");if(!o)continue;let i=n.querySelector(".Card-card-data-17m6S div:not(.splus-coursesdropdown-nicknamed-dataset) ._1wP6w._23_WZ._2qcpH._3ghFm._17Z60._1Aph-.gs0RB");if(!i)continue;e.dataset.courseTitle=`${o.textContent}: ${null==i?void 0:i.textContent}`;let r=e.style.backgroundImage.slice(4,-1).replace(/"/g,"");s&&!r.match(t.defaultCourseIconUrlRegex)||f.push(e)}let y=l.Settings.MissingIconsLastCheck.value,b=new Set;for(let e of f){e.classList.add("icon-modified");let t=p.getIcon(e.dataset.courseTitle||e.parentElement.textContent),o=chrome.runtime.getURL("imgs/fallback-course-icon.svg"),s=t&&t.match(/^https?\:\/\/([^\/?#]+)(?:[\/?#]|$)/i),r=s&&s[1];if(r){let n=null;for(let e of d.children)if(e.dataset.domain==r){n=e;break}if(n||(n=document.createElement("img"),n.dataset.domain=r,d.appendChild(n)),n.dataset.result&&"fail"==n.dataset.result)t=o;else if(!n.dataset.result){let i=n.onerror;n.onerror=function(s,r,a){i?i(s,r,a):(n.dataset.result="fail",n.onerror=null),t=o,"gradesPageArrow"==e.dataset.themedIconMode?e.setAttribute("style",`background: url(${o}) no-repeat 0; background-size: cover;`):"coursesDropDown"==e.dataset.themedIconMode&&e.setAttribute("style",`background-image: url(${o}); background-size: contain;`)},n.src||(n.onload=function(){n.onload=null,n.dataset.result="success"},t&&n.src!=t&&(n.src=t))}}else t=o;"gradesPageArrow"==e.dataset.themedIconMode?e.setAttribute("style",`background: url(${t}) no-repeat 0; background-size: cover;`):"coursesDropDown"==e.dataset.themedIconMode&&e.setAttribute("style",`background-image: url(${t}); background-size: contain;`),y&&!h(y)||p.hasBuiltInIcon(e.dataset.courseTitle||(null===(n=e.parentElement)||void 0===n?void 0:n.textContent)||void 0)||b.add(e.dataset.courseTitle||(null===(i=e.parentElement)||void 0===i?void 0:i.textContent)||void 0)}for(let e of r){e.onerror=function(){e.onerror=null,e.src=chrome.runtime.getURL("imgs/fallback-course-icon.svg"),e.classList.add("splus-loaderror")};let t=p.getIcon(e.alt);if(e.src!==t&&(e.src=`${t}`),e.classList.add("injected-course-icon"),"disabled"!==l.Settings.CourseIconFavicons.value&&e==m&&!document.querySelector("head > link[rel='icon'][type='image/svg+xml']")){document.querySelectorAll("link[rel='shortcut icon']").forEach((e=>e.remove()));let e=document.createElement("link");e.rel="icon",e.type=!t||t.endsWith(".svg")?"image/svg+xml":"image/png",e.href=t||chrome.runtime.getURL("imgs/fallback-course-icon.svg"),document.head.appendChild(e)}}if((0,a.isLAUSD)()&&!u&&b.size>0&&c.showToast){let e=encodeURI(Array.from(b).join("\n").replace("&","{amp;}"));(0,c.showToast)("Request New Course Icons?",`${b.size} ${1==b.size?`course is missing a ${o.EXTENSION_NAME} course icon. Would you like to request that an icon be added for this course?`:`courses are missing ${o.EXTENSION_NAME} course icons. Would you like to request that icons be added for these courses?`}`,"yellow",{buttons:[(0,c.createToastButton)("Yes","suggest-icons-button",(()=>window.open(`${t.ICON_REQUEST_URL}${e}`,"_blank"))),(0,c.createToastButton)("No","nothing-button",(()=>(0,c.showToast)("You can request icons later from course options","","hsl(190, 100%, 50%)",{timeout:5e3})))]}),u=!0,l.Settings.MissingIconsLastCheck.setValue(Date.now())}}static setDefaultLogoVisibility(e){e?document.documentElement.classList.remove("use-custom-url"):document.documentElement.classList.add("use-custom-url")}static setLogoUrl(e="https://ui.schoology.com/design-system/assets/schoology-logo-horizontal-white.884fbe559c66e06d28c5cfcbd4044f0e.svg"){(0,r.setCSSVariable)("background-url",`url(${e})`)}static setCursorUrl(e){document.documentElement.style.setProperty("--cursor",e?`url(${e}), auto`:"auto")}}function h(e){let t=o(new Date),n=o(new Date(e));return n.year<t.year||n.year===t.year&&n.semester!==t.semester&&"Spring"===n.semester;function o(e){let t=e.getMonth(),n=e.getFullYear();return{semester:t>0&&t<8?"Spring":"Fall",year:0==t?n-1:n}}}p.profilePictureOverrides=[],p.tempTheme=void 0,p.themes=s.DEFAULT_THEMES.map(p.loadFromObject),t.default=p},302:function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.createToastButton=t.showToast=void 0;const i=o(n(9568)),s=n(3137);t.showToast=function(e,t,n,{theme:o="dark",layout:s=1,buttons:r=[],timeout:a=0,position:l="topRight",options:c={},iconUrl:d=chrome.runtime.getURL("/imgs/plus-icon.png")}={theme:"dark",layout:1,timeout:0,position:"topRight",iconUrl:chrome.runtime.getURL("/imgs/plus-icon.png")}){let u={theme:o,iconUrl:d,title:e,message:t,progressBarColor:n,layout:s,buttons:r,timeout:a,position:l};Object.assign(u,c),i.default.show(u)},t.createToastButton=function(e,t,n,o="fadeOutRight",i=!0){return[`<button>${e}</button>`,function(i,r){i.hide({transitionOut:o,onClosing:function(o,i,r){(0,s.trackEvent)("button_click",{id:t||e,context:"Toast",legacyTarget:t||e,legacyAction:"click",legacyLabel:"Toast Button"}),n(o,i,r)}},r,t)},i]}},4800:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},536:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,s){function r(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}l((o=o.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.updateSettings=t.getModalContents=void 0,n(5285);const s=n(5252),r=n(933),a=i(n(5144)),l=n(412),c=n(9792),d=i(n(564));var u=!0,p=void 0;function h(){return o(this,void 0,void 0,(function*(){const e=yield chrome.storage.sync.get(null),t=yield chrome.storage.local.get(null);if(l.LegacySetting.rawSyncStorage=e,l.LegacySetting.rawLocalStorage=t,u){if(e.themes)for(let t of e.themes)d.default.themes.push(d.default.loadFromObject(t));d.default.apply(d.default.active),u=!1}let n=document.createElement("div");p=(0,r.createElement)("div",[],void 0,[(0,r.createElement)("div",["splus-modal-contents","splus-settings-tabs"],{},[(0,r.createElement)("ul",[],{},[(0,r.createElement)("li",[],{},[(0,r.createElement)("a",[],{href:"#splus-settings-section-appearance",textContent:"Appearance"})]),(0,r.createElement)("li",[],{},[(0,r.createElement)("a",[],{href:"#splus-settings-section-sidebar",textContent:"Homepage/Sidebar"})]),(0,r.createElement)("li",[],{},[(0,r.createElement)("a",[],{href:"#splus-settings-section-grades",textContent:"Grades"})]),(0,r.createElement)("li",[],{},[(0,r.createElement)("a",[],{href:"#splus-settings-section-utilities",textContent:"Utilities"})])]),(0,r.createElement)("div",[],{id:"splus-settings-section-appearance"},[c.Settings.ThemeEditorButton.settingsMenuElement,c.Settings.Theme.settingsMenuElement,c.Settings.OverrideCourseIcons.settingsMenuElement,c.Settings.UseDefaultIcons.settingsMenuElement,c.Settings.CourseIconFavicons.settingsMenuElement,c.Settings.OverrideCourseIcons.settingsMenuElement,c.Settings.ArchivedCoursesButton.settingsMenuElement,c.Settings.PowerSchoolLogo.settingsMenuElement]),(0,r.createElement)("div",[],{id:"splus-settings-section-sidebar"},[c.Settings.IndicateSubmittedAssignments.settingsMenuElement,c.Settings.ToDoIconVisibility.settingsMenuElement,c.Settings.SidebarSectionOrder.settingsMenuElement]),(0,r.createElement)("div",[],{id:"splus-settings-section-grades"},[c.Settings.CustomGradingScales.settingsMenuElement,c.Settings.CourseOrderMethod.settingsMenuElement,c.Settings.WeightedGradebookIndicator.settingsMenuElement]),(0,r.createElement)("div",[],{id:"splus-settings-section-utilities"},[c.Settings.DesktopNotifications.settingsMenuElement,c.Settings.Broadcasts.settingsMenuElement,c.Settings.BypassLinkRedirects.settingsMenuElement,c.Settings.PersistSessionCookies.settingsMenuElement,(0,r.createElement)("div",["setting-entry"],{},[(0,r.createElement)("h2",["setting-title"],{},[(0,r.createElement)("a",[],{href:"#",textContent:"Change Schoology Account Access",onclick:()=>{location.pathname="/api"},style:{fontSize:""}})]),(0,r.createElement)("p",["setting-description"],{textContent:`Grant ${s.EXTENSION_NAME} access to your Schoology API Key so many features can function, or revoke that access.`})]),"Firefox"!==(0,r.getBrowser)()?(0,r.createElement)("div",["setting-entry"],{},[(0,r.createElement)("h2",["setting-title"],{},[(0,r.createElement)("a",[],{href:"#",textContent:"Anonymous Usage Statistics",onclick:()=>a.default.openModal("analytics-modal"),style:{fontSize:""}})]),(0,r.createElement)("p",["setting-description"],{textContent:`[Reload required] Allow ${s.EXTENSION_NAME} to collect anonymous information about how you use the extension. We don't collect any personal information per our privacy policy.`})]):n])]),(0,r.createElement)("div",["settings-buttons-wrapper"],void 0,[(0,r.createButton)("save-settings","Save Settings",(()=>l.LegacySetting.saveModified())),(0,r.createElement)("div",["settings-actions-wrapper"],{},[(0,r.createElement)("a",[],{textContent:"View Debug Info",onclick:()=>a.default.openModal("debug-modal"),href:"#"}),(0,r.createElement)("a",[],{textContent:"Export Settings",onclick:l.LegacySetting.export,href:"#"}),(0,r.createElement)("a",[],{textContent:"Import Settings",onclick:l.LegacySetting.import,href:"#"}),(0,r.createElement)("a",["restore-defaults"],{textContent:"Restore Defaults",onclick:l.LegacySetting.restoreDefaults,href:"#"})])])])}))}l.LegacySetting.updateSettingsFunction=h,t.getModalContents=function(){return p||(0,r.createElement)("p",[],{textContent:"Error loading settings"})},t.updateSettings=h},1973:function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.versionSpecificFirstLaunch=t.compareVersions=void 0;const i=n(3137),s=n(5242),r=n(5252),a=n(933),l=n(2589),c=o(n(5144)),d=n(412),u=n(9792);function p(e,t){function n(e){return e.match(/\d+(\.\d+)*/)[0].split(".").map((e=>+e))}let o=n(e),i=n(t),s=!1;if(i.length<o.length){let e=o;o=i,i=e,s=!0}for(;o.length<i.length;)o.push(0);if(s){let e=o;o=i,i=e}for(let e=0;e<o.length;e++){if(o[e]<i[e])return-1;if(o[e]>i[e])return 1}return 0}t.compareVersions=p;const h={7:function(e,t){(0,s.saveBroadcasts)([(0,s.createBroadcast)(510,`${r.EXTENSION_NAME} Discord Server`,`${r.EXTENSION_NAME} has a Discord server where you can offer feature suggestions, report bugs, get support, or just talk with other ${r.EXTENSION_NAME} users. <a href="${r.DISCORD_URL}" id="announcement-discord-link" class="splus-track-clicks">Click here</a> to join!`,new Date(2019,1,14))]).then((()=>{if("Firefox"!==(0,a.getBrowser)()){let e=setInterval((function(){"complete"!==document.readyState||document.querySelector(".splus-modal-open")||(clearInterval(e),c.default.openModal("analytics-modal"))}),50)}let e=setInterval((function(){"complete"!==document.readyState||document.querySelector(".splus-modal-open")||(clearInterval(e),c.default.openModal("choose-theme-modal"))}),50);var t=setInterval((function(){"complete"!==document.readyState||document.querySelector(".splus-modal-open")||(clearInterval(t),u.Settings.ApiStatus.value||(location.pathname="/api"))}),500)}))},10:function(e,t){t&&(0,s.saveBroadcasts)([(0,s.createBroadcast)("update_10",`New Major Update for ${r.EXTENSION_NAME}`,`${r.EXTENSION_NAME} has been updated to be compatible with Google Chrome's new "Manifest v3" API for browser extensions. All browser extensions are required to use this new API by June of this year, and Schoology Plus has been substantially rewritten in order to support it. <br><br> The update has been tested, but since so much of the extension's code has changed there will likely be some bugs. <br><br> If you notice that anything is not working correctly, please report it to the <a href="${r.DISCORD_URL}" id="announcement-ver-10-discord-link" class="splus-track-clicks">${r.EXTENSION_NAME} Discord server</a>. <br><br> <strong>Thanks for using Schoology Plus!</strong>`,new Date(2024,4,25))])},10.1:function(e,t){u.Settings.UnreadBroadcasts.setValue(d.LegacySetting.rawSyncStorage[u.Settings.UnreadBroadcasts.name]||[]),chrome.storage.sync.remove(u.Settings.UnreadBroadcasts.name),u.Settings.AssignmentCompletionOverrides.setValue(d.LegacySetting.rawSyncStorage[u.Settings.AssignmentCompletionOverrides.name]||{}),chrome.storage.sync.remove(u.Settings.UnreadBroadcasts.name)}};t.versionSpecificFirstLaunch=function(e,t){l.Logger.log("[Updater] First launch after update, updating to ",e," from ",t),t?(0,i.trackEvent)("perform_action",{id:"update_extension",value:e,previousValue:t,context:"Versions",legacyTarget:"Update",legacyAction:`${t} to ${e}`,legacyLabel:"Versions"}):(0,i.trackEvent)("perform_action",{id:"install_extension",value:e,context:"Versions",legacyTarget:"Install",legacyAction:e,legacyLabel:"Versions"});for(let n in h)t?p(n,e)<=0&&p(n,t)>0&&h[n](e,t):h[n](e,t)}},1669:e=>{"use strict";e.exports=jQuery}},t={};function n(o){var i=t[o];if(void 0!==i)return i.exports;var s=t[o]={exports:{}};return e[o].call(s.exports,s,s.exports,n),s.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n(7450)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,