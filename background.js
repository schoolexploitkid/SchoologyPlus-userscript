/*! For license information please see background.js.LICENSE.txt */
(()=>{var t={2838:function(t){t.exports=function(){"use strict";var t=Object.hasOwnProperty,e=Object.setPrototypeOf,n=Object.isFrozen,o=Object.freeze,r=Object.seal,i=Object.create,a="undefined"!=typeof Reflect&&Reflect,s=a.apply,c=a.construct;s||(s=function(t,e,n){return t.apply(e,n)}),o||(o=function(t){return t}),r||(r=function(t){return t}),c||(c=function(t,e){return new(Function.prototype.bind.apply(t,[null].concat(function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(e))))});var l,u=w(Array.prototype.forEach),d=w(Array.prototype.pop),m=w(Array.prototype.push),f=w(String.prototype.toLowerCase),p=w(String.prototype.match),g=w(String.prototype.replace),h=w(String.prototype.indexOf),y=w(String.prototype.trim),b=w(RegExp.prototype.test),v=(l=TypeError,function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return c(l,e)});function w(t){return function(e){for(var n=arguments.length,o=Array(n>1?n-1:0),r=1;r<n;r++)o[r-1]=arguments[r];return s(t,e,o)}}function x(t,o){e&&e(t,null);for(var r=o.length;r--;){var i=o[r];if("string"==typeof i){var a=f(i);a!==i&&(n(o)||(o[r]=a),i=a)}t[i]=!0}return t}function T(e){var n=i(null),o=void 0;for(o in e)s(t,e,[o])&&(n[o]=e[o]);return n}var A=o(["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","picture","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr"]),k=o(["svg","a","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","audio","canvas","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","style","switch","symbol","text","textpath","title","tref","tspan","video","view","vkern"]),_=o(["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]),E=o(["math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmultiscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mspace","msqrt","mstyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover"]),S=o(["#text"]),L=o(["accept","action","align","alt","autocapitalize","autocomplete","autopictureinpicture","autoplay","background","bgcolor","border","capture","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","controls","controlslist","coords","crossorigin","datetime","decoding","default","dir","disabled","disablepictureinpicture","disableremoteplayback","download","draggable","enctype","enterkeyhint","face","for","headers","height","hidden","high","href","hreflang","id","inputmode","integrity","ismap","kind","label","lang","list","loading","loop","low","max","maxlength","media","method","min","minlength","multiple","muted","name","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","playsinline","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","role","rows","rowspan","spellcheck","scope","selected","shape","size","sizes","span","srclang","start","src","srcset","step","style","summary","tabindex","title","translate","type","usemap","valign","value","width","xmlns"]),M=o(["accent-height","accumulate","additive","alignment-baseline","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","class","clip","clippathunits","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","fill","fill-opacity","fill-rule","filter","filterunits","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","height","href","id","image-rendering","in","in2","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lang","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","media","method","mode","min","name","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","preserveaspectratio","primitiveunits","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","specularconstant","specularexponent","spreadmethod","startoffset","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","style","surfacescale","systemlanguage","tabindex","targetx","targety","transform","text-anchor","text-decoration","text-rendering","textlength","type","u1","u2","unicode","values","viewbox","visibility","version","vert-adv-y","vert-origin-x","vert-origin-y","width","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","xmlns","y","y1","y2","z","zoomandpan"]),I=o(["accent","accentunder","align","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","dir","display","displaystyle","encoding","fence","frame","height","href","id","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","width","xmlns"]),N=o(["xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]),O=r(/\{\{[\s\S]*|[\s\S]*\}\}/gm),D=r(/<%[\s\S]*|[\s\S]*%>/gm),R=r(/^data-[\-\w.\u00B7-\uFFFF]/),C=r(/^aria-[\-\w]+$/),F=r(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i),j=r(/^(?:\w+script|data):/i),B=r(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g),P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};function z(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}var U=function(){return"undefined"==typeof window?null:window};return function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:U(),n=function(e){return t(e)};if(n.version="2.1.1",n.removed=[],!e||!e.document||9!==e.document.nodeType)return n.isSupported=!1,n;var r=e.document,i=e.document,a=e.DocumentFragment,s=e.HTMLTemplateElement,c=e.Node,l=e.NodeFilter,w=e.NamedNodeMap,$=void 0===w?e.NamedNodeMap||e.MozNamedAttrMap:w,H=e.Text,q=e.Comment,V=e.DOMParser,W=e.trustedTypes;if("function"==typeof s){var G=i.createElement("template");G.content&&G.content.ownerDocument&&(i=G.content.ownerDocument)}var X=function(t,e){if("object"!==(void 0===t?"undefined":P(t))||"function"!=typeof t.createPolicy)return null;var n=null,o="data-tt-policy-suffix";e.currentScript&&e.currentScript.hasAttribute(o)&&(n=e.currentScript.getAttribute(o));var r="dompurify"+(n?"#"+n:"");try{return t.createPolicy(r,{createHTML:function(t){return t}})}catch(t){return console.warn("TrustedTypes policy "+r+" could not be created."),null}}(W,r),J=X&&St?X.createHTML(""):"",Y=i,K=Y.implementation,Z=Y.createNodeIterator,Q=Y.getElementsByTagName,tt=Y.createDocumentFragment,et=r.importNode,nt={};try{nt=T(i).documentMode?i.documentMode:{}}catch(t){}var ot={};n.isSupported=K&&void 0!==K.createHTMLDocument&&9!==nt;var rt=O,it=D,at=R,st=C,ct=j,lt=B,ut=F,dt=null,mt=x({},[].concat(z(A),z(k),z(_),z(E),z(S))),ft=null,pt=x({},[].concat(z(L),z(M),z(I),z(N))),gt=null,ht=null,yt=!0,bt=!0,vt=!1,wt=!1,xt=!1,Tt=!1,At=!1,kt=!1,_t=!1,Et=!1,St=!1,Lt=!0,Mt=!0,It=!1,Nt={},Ot=x({},["annotation-xml","audio","colgroup","desc","foreignobject","head","iframe","math","mi","mn","mo","ms","mtext","noembed","noframes","plaintext","script","style","svg","template","thead","title","video","xmp"]),Dt=null,Rt=x({},["audio","video","img","source","image","track"]),Ct=null,Ft=x({},["alt","class","for","id","label","name","pattern","placeholder","summary","title","value","style","xmlns"]),jt=null,Bt=i.createElement("form"),Pt=function(t){jt&&jt===t||(t&&"object"===(void 0===t?"undefined":P(t))||(t={}),t=T(t),dt="ALLOWED_TAGS"in t?x({},t.ALLOWED_TAGS):mt,ft="ALLOWED_ATTR"in t?x({},t.ALLOWED_ATTR):pt,Ct="ADD_URI_SAFE_ATTR"in t?x(T(Ft),t.ADD_URI_SAFE_ATTR):Ft,Dt="ADD_DATA_URI_TAGS"in t?x(T(Rt),t.ADD_DATA_URI_TAGS):Rt,gt="FORBID_TAGS"in t?x({},t.FORBID_TAGS):{},ht="FORBID_ATTR"in t?x({},t.FORBID_ATTR):{},Nt="USE_PROFILES"in t&&t.USE_PROFILES,yt=!1!==t.ALLOW_ARIA_ATTR,bt=!1!==t.ALLOW_DATA_ATTR,vt=t.ALLOW_UNKNOWN_PROTOCOLS||!1,wt=t.SAFE_FOR_TEMPLATES||!1,xt=t.WHOLE_DOCUMENT||!1,kt=t.RETURN_DOM||!1,_t=t.RETURN_DOM_FRAGMENT||!1,Et=t.RETURN_DOM_IMPORT||!1,St=t.RETURN_TRUSTED_TYPE||!1,At=t.FORCE_BODY||!1,Lt=!1!==t.SANITIZE_DOM,Mt=!1!==t.KEEP_CONTENT,It=t.IN_PLACE||!1,ut=t.ALLOWED_URI_REGEXP||ut,wt&&(bt=!1),_t&&(kt=!0),Nt&&(dt=x({},[].concat(z(S))),ft=[],!0===Nt.html&&(x(dt,A),x(ft,L)),!0===Nt.svg&&(x(dt,k),x(ft,M),x(ft,N)),!0===Nt.svgFilters&&(x(dt,_),x(ft,M),x(ft,N)),!0===Nt.mathMl&&(x(dt,E),x(ft,I),x(ft,N))),t.ADD_TAGS&&(dt===mt&&(dt=T(dt)),x(dt,t.ADD_TAGS)),t.ADD_ATTR&&(ft===pt&&(ft=T(ft)),x(ft,t.ADD_ATTR)),t.ADD_URI_SAFE_ATTR&&x(Ct,t.ADD_URI_SAFE_ATTR),Mt&&(dt["#text"]=!0),xt&&x(dt,["html","head","body"]),dt.table&&(x(dt,["tbody"]),delete gt.tbody),o&&o(t),jt=t)},zt=function(t){m(n.removed,{element:t});try{t.parentNode.removeChild(t)}catch(e){t.outerHTML=J}},Ut=function(t,e){try{m(n.removed,{attribute:e.getAttributeNode(t),from:e})}catch(t){m(n.removed,{attribute:null,from:e})}e.removeAttribute(t)},$t=function(t){var e=void 0,n=void 0;if(At)t="<remove></remove>"+t;else{var o=p(t,/^[\r\n\t ]+/);n=o&&o[0]}var r=X?X.createHTML(t):t;try{e=(new V).parseFromString(r,"text/html")}catch(t){}if(!e||!e.documentElement){var a=(e=K.createHTMLDocument("")).body;a.parentNode.removeChild(a.parentNode.firstElementChild),a.outerHTML=r}return t&&n&&e.body.insertBefore(i.createTextNode(n),e.body.childNodes[0]||null),Q.call(e,xt?"html":"body")[0]},Ht=function(t){return Z.call(t.ownerDocument||t,t,l.SHOW_ELEMENT|l.SHOW_COMMENT|l.SHOW_TEXT,(function(){return l.FILTER_ACCEPT}),!1)},qt=function(t){return"object"===(void 0===c?"undefined":P(c))?t instanceof c:t&&"object"===(void 0===t?"undefined":P(t))&&"number"==typeof t.nodeType&&"string"==typeof t.nodeName},Vt=function(t,e,o){ot[t]&&u(ot[t],(function(t){t.call(n,e,o,jt)}))},Wt=function(t){var e,o=void 0;if(Vt("beforeSanitizeElements",t,null),!((e=t)instanceof H||e instanceof q||"string"==typeof e.nodeName&&"string"==typeof e.textContent&&"function"==typeof e.removeChild&&e.attributes instanceof $&&"function"==typeof e.removeAttribute&&"function"==typeof e.setAttribute&&"string"==typeof e.namespaceURI))return zt(t),!0;if(p(t.nodeName,/[\u0080-\uFFFF]/))return zt(t),!0;var r=f(t.nodeName);if(Vt("uponSanitizeElement",t,{tagName:r,allowedTags:dt}),("svg"===r||"math"===r)&&0!==t.querySelectorAll("p, br").length)return zt(t),!0;if(!qt(t.firstElementChild)&&(!qt(t.content)||!qt(t.content.firstElementChild))&&b(/<[!/\w]/g,t.innerHTML)&&b(/<[!/\w]/g,t.textContent))return zt(t),!0;if(!dt[r]||gt[r]){if(Mt&&!Ot[r]&&"function"==typeof t.insertAdjacentHTML)try{var i=t.innerHTML;t.insertAdjacentHTML("AfterEnd",X?X.createHTML(i):i)}catch(t){}return zt(t),!0}return"noscript"!==r&&"noembed"!==r||!b(/<\/no(script|embed)/i,t.innerHTML)?(wt&&3===t.nodeType&&(o=t.textContent,o=g(o,rt," "),o=g(o,it," "),t.textContent!==o&&(m(n.removed,{element:t.cloneNode()}),t.textContent=o)),Vt("afterSanitizeElements",t,null),!1):(zt(t),!0)},Gt=function(t,e,n){if(Lt&&("id"===e||"name"===e)&&(n in i||n in Bt))return!1;if(bt&&b(at,e));else if(yt&&b(st,e));else{if(!ft[e]||ht[e])return!1;if(Ct[e]);else if(b(ut,g(n,lt,"")));else if("src"!==e&&"xlink:href"!==e&&"href"!==e||"script"===t||0!==h(n,"data:")||!Dt[t])if(vt&&!b(ct,g(n,lt,"")));else if(n)return!1}return!0},Xt=function(t){var e=void 0,o=void 0,r=void 0,i=void 0;Vt("beforeSanitizeAttributes",t,null);var a=t.attributes;if(a){var s={attrName:"",attrValue:"",keepAttr:!0,allowedAttributes:ft};for(i=a.length;i--;){var c=e=a[i],l=c.name,u=c.namespaceURI;if(o=y(e.value),r=f(l),s.attrName=r,s.attrValue=o,s.keepAttr=!0,s.forceKeepAttr=void 0,Vt("uponSanitizeAttribute",t,s),o=s.attrValue,!s.forceKeepAttr&&(Ut(l,t),s.keepAttr))if(b(/\/>/i,o))Ut(l,t);else{wt&&(o=g(o,rt," "),o=g(o,it," "));var m=t.nodeName.toLowerCase();if(Gt(m,r,o))try{u?t.setAttributeNS(u,l,o):t.setAttribute(l,o),d(n.removed)}catch(t){}}}Vt("afterSanitizeAttributes",t,null)}},Jt=function t(e){var n=void 0,o=Ht(e);for(Vt("beforeSanitizeShadowDOM",e,null);n=o.nextNode();)Vt("uponSanitizeShadowNode",n,null),Wt(n)||(n.content instanceof a&&t(n.content),Xt(n));Vt("afterSanitizeShadowDOM",e,null)};return n.sanitize=function(t,o){var i=void 0,s=void 0,l=void 0,u=void 0,d=void 0;if(t||(t="\x3c!--\x3e"),"string"!=typeof t&&!qt(t)){if("function"!=typeof t.toString)throw v("toString is not a function");if("string"!=typeof(t=t.toString()))throw v("dirty is not a string, aborting")}if(!n.isSupported){if("object"===P(e.toStaticHTML)||"function"==typeof e.toStaticHTML){if("string"==typeof t)return e.toStaticHTML(t);if(qt(t))return e.toStaticHTML(t.outerHTML)}return t}if(Tt||Pt(o),n.removed=[],"string"==typeof t&&(It=!1),It);else if(t instanceof c)1===(s=(i=$t("\x3c!----\x3e")).ownerDocument.importNode(t,!0)).nodeType&&"BODY"===s.nodeName||"HTML"===s.nodeName?i=s:i.appendChild(s);else{if(!kt&&!wt&&!xt&&-1===t.indexOf("<"))return X&&St?X.createHTML(t):t;if(!(i=$t(t)))return kt?null:J}i&&At&&zt(i.firstChild);for(var m=Ht(It?t:i);l=m.nextNode();)3===l.nodeType&&l===u||Wt(l)||(l.content instanceof a&&Jt(l.content),Xt(l),u=l);if(u=null,It)return t;if(kt){if(_t)for(d=tt.call(i.ownerDocument);i.firstChild;)d.appendChild(i.firstChild);else d=i;return Et&&(d=et.call(r,d,!0)),d}var f=xt?i.outerHTML:i.innerHTML;return wt&&(f=g(f,rt," "),f=g(f,it," ")),X&&St?X.createHTML(f):f},n.setConfig=function(t){Pt(t),Tt=!0},n.clearConfig=function(){jt=null,Tt=!1},n.isValidAttribute=function(t,e,n){jt||Pt({});var o=f(t),r=f(e);return Gt(o,r,n)},n.addHook=function(t,e){"function"==typeof e&&(ot[t]=ot[t]||[],m(ot[t],e))},n.removeHook=function(t){ot[t]&&d(ot[t])},n.removeHooks=function(t){ot[t]&&(ot[t]=[])},n.removeAllHooks=function(){ot={}},n}()}()},723:function(t,e,n){"use strict";var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(r,i){function a(t){try{c(o.next(t))}catch(t){i(t)}}function s(t){try{c(o.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}c((o=o.apply(t,e||[])).next())}))},r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),n(3787);const i=r(n(1547)),a=n(3137),s=n(5252),c=n(933),l=n(2589),u=n(9229);var d="https://app.schoology.com/home/notifications?filter=all",m="app.schoology.com";const f="/offscreen.html";function p(){return o(this,void 0,void 0,(function*(){l.Logger.log("Browser action clicked");let t=yield chrome.action.getBadgeText({}),e=Number.parseInt(t);x("button_click",{id:"main-browser-action-button",context:"Browser Action",value:String(e||0),legacyTarget:"Browser Action",legacyAction:e?`browser action clicked: ${e}`:"browser action clicked: 0",legacyLabel:"Notifications"}),l.Logger.log(`Browser action text: "${t}"`),e?chrome.tabs.create({url:`https://${m}/home/notifications`}):chrome.tabs.create({url:`https://${m}`}),chrome.action.setBadgeText({text:""})}))}function g(t){l.Logger.log("Notification clicked"),x("perform_action",{id:"click",context:"Notifications",value:t,legacyTarget:t,legacyAction:"notification click",legacyLabel:"Notifications"}),chrome.notifications.clear(t),"assignment"===t?(chrome.tabs.create({url:`https://${m}/home/notifications`}),chrome.action.setBadgeText({text:""})):chrome.tabs.create({url:`https://${m}`})}function h(t){return o(this,void 0,void 0,(function*(){let e=yield chrome.storage.sync.get(null);if(t&&"notification"===t.name)try{l.Logger.log(`[${new Date}] Checking for new notifications`),"disabled"!=e.notifications&&function(){o(this,void 0,void 0,(function*(){var t,e;let n=yield chrome.storage.sync.get(null);if("Firefox"===(0,c.getBrowser)()){let{notification:e,name:o,count:r,lastTime:i,timeModified:a}=yield(0,u.loadAssignmentNotifications)(d,null!==(t=n.lastTime)&&void 0!==t?t:0);return yield(0,u.updateLastTime)(a,i),void(yield(0,u.sendNotification)(e,o,r))}yield w(),chrome.runtime.sendMessage({type:"offscreen-notifications",target:"offscreen",data:{url:d,lastTime:null!==(e=n.lastTime)&&void 0!==e?e:0}})}))}()}catch(t){l.Logger.error("Error caught:"),l.Logger.error(t)}}))}function y(t){x("perform_action",{id:"runtime_oninstalled",value:t.reason,context:"Versions",legacyTarget:"Runtime onInstalled",legacyAction:t.reason,legacyLabel:"Versions"}),chrome.contextMenus.create({id:"splus-theme-editor",title:"Theme Editor",contexts:["action"]}),chrome.contextMenus.create({id:"splus-discord",title:"Discord Support Server",contexts:["action"]}),chrome.contextMenus.create({id:"splus-website",title:`${s.EXTENSION_NAME} Website`,contexts:["action"]})}function b(t,e){switch(t.menuItemId){case"splus-theme-editor":chrome.tabs.create({url:chrome.runtime.getURL("/theme-editor.html")});break;case"splus-discord":chrome.tabs.create({url:s.DISCORD_URL});break;case"splus-website":chrome.tabs.create({url:`${s.EXTENSION_WEBSITE}/?utm_source=ext-context-menu&utm_content=${chrome.runtime.getManifest().version}`})}}function v(t,e,n){return l.Logger.log("Received background page message",t),"fetch"==t.type&&void 0!==t.url?(l.Logger.debug("Received fetch request for "+t.url),function(){return o(this,void 0,void 0,(function*(){let e,n={};try{e=yield fetch(t.url,t.params)}catch(t){return n.success=!1,n.error=t,n}n.success=!0,n.headers=e.headers,n.ok=e.ok,n.redirected=e.redirected,n.status=e.status,n.statusText=e.statusText,n.type=e.type,n.url=e.url;try{switch(t.bodyReadType){case"json":n.json=yield e.json();break;case"text":n.text=yield e.text()}}catch(t){n.bodyReadError=t||!0}return n}))}().then((t=>n(JSON.stringify(t)))).catch((t=>n(JSON.stringify({success:!1,error:t})))),!0):"updateDefaultDomain"==t.type&&void 0!==t.domain?(m=t.domain,d=`https://${m}/home/notifications?filter=all`,n({success:!0}),!0):"setBadgeText"==t.type&&void 0!==t.text?(chrome.browserAction.setBadgeText({text:t.text}),n({success:!0}),!0):"notification"==t.type?((0,u.updateLastTime)(t.data.timeModified,t.data.lastTime).then((()=>{(0,u.sendNotification)(t.data.notification,t.data.name,t.data.count).then((()=>{n({success:!0})}))})),!0):void("declarativeNetRequestRuleset"==t.type&&("enable"===t.action?chrome.declarativeNetRequest.updateEnabledRulesets({enableRulesetIds:[t.rulesetId]}).then((()=>n({success:!0}))):"disable"===t.action&&chrome.declarativeNetRequest.updateEnabledRulesets({disableRulesetIds:[t.rulesetId]}).then((()=>n({success:!0})))))}function w(){return o(this,void 0,void 0,(function*(){try{(yield function(){return o(this,void 0,void 0,(function*(){const t=yield clients.matchAll();for(const e of t)if(e.url.endsWith(f))return!0;return!1}))}())||(yield chrome.offscreen.createDocument({url:f,reasons:[chrome.offscreen.Reason.DOM_PARSER],justification:"Parse Schoology notifications, which are returned from the API as HTML"}))}catch(t){l.Logger.warn("Error creating offscreen document, it probably already exists",t)}}))}function x(t,e){return o(this,void 0,void 0,(function*(){yield w();let n=yield chrome.storage.sync.get(null);chrome.runtime.sendMessage({type:"offscreen-analytics",target:"offscreen",data:{name:t,props:e,settings:{analytics:n.analytics,theme:n.theme,beta:n.beta,version:chrome.runtime.getManifest().version,newVersion:n.newVersion,randomUserId:(0,a.getAnalyticsUserId)()}}})}))}!function(){o(this,void 0,void 0,(function*(){(0,i.default)({reloadOnSuccess:!0}),chrome.runtime.onInstalled.addListener(y),chrome.alarms.onAlarm.addListener(h);let t=yield chrome.storage.sync.get({defaultDomain:"app.schoology.com"});m=t.defaultDomain,d=`https://${m}/home/notifications?filter=all`,h({name:"notification",scheduledTime:Date.now()}),chrome.alarms.get("notification",(function(t){t?l.Logger.log("Alarm is already registered"):(l.Logger.log("Notifications alarm is not registered; registering..."),chrome.alarms.create("notification",{periodInMinutes:5}))})),chrome.notifications.onClicked.addListener(g),chrome.action.setBadgeBackgroundColor({color:[217,0,0,255]}),chrome.action.onClicked.addListener(p),chrome.runtime.onMessage.addListener(v),chrome.contextMenus.onClicked.addListener(b)}))}()},3137:function(t,e){"use strict";var n=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(r,i){function a(t){try{c(o.next(t))}catch(t){i(t)}}function s(t){try{c(o.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}c((o=o.apply(t,e||[])).next())}))},o=this&&this.__rest||function(t,e){var n={};for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.indexOf(o)<0&&(n[o]=t[o]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(o=Object.getOwnPropertySymbols(t);r<o.length;r++)e.indexOf(o[r])<0&&Object.prototype.propertyIsEnumerable.call(t,o[r])&&(n[o[r]]=t[o[r]])}return n};Object.defineProperty(e,"__esModule",{value:!0}),e.initializeAnalytics=e.getAnalyticsUserId=e.trackEvent=void 0,e.trackEvent=function(t,e={}){var{legacyTarget:n,legacyAction:r,legacyLabel:i,legacyValue:a,id:s,context:c,value:l}=e;o(e,["legacyTarget","legacyAction","legacyLabel","legacyValue","id","context","value"]),console.debug("[S+] Tracking disabled by user",arguments)},e.getAnalyticsUserId=function(){return n(this,void 0,void 0,(function*(){let t=yield chrome.storage.local.get({randomUserId:null});if(!t.randomUserId){let t=function(){var t=new Uint8Array(32);crypto.getRandomValues(t);for(var e="",n=0;n<t.length;++n)e+=t[n].toString(16);return e}();return yield chrome.storage.local.set({randomUserId:t}),t}return t.randomUserId}))},e.initializeAnalytics=function(t){return n(this,arguments,void 0,(function*({documentContext:t,isAnalyticsEnabled:n,selectedTheme:r,selectedBeta:i,currentVersion:a,newVersion:s,randomUserId:c,themeIsModern:l}){n&&function(){function n(...t){var e;null===(e=globalThis.dataLayer)||void 0===e||e.push(arguments)}function u(t){if(!t.isTrusted)return;let n=t.currentTarget||t.target;(0,e.trackEvent)("tracking_link_click",{legacyTarget:n.dataset.splusTrackingId||n.id||"Unlabeled Button",legacyAction:"click",legacyLabel:n.dataset.splusTrackingContext||"Tracking Link",legacyValue:n.dataset.splusTrackingValue||t.button,id:n.dataset.splusTrackingId||n.id||"Unlabeled Button",context:n.dataset.splusTrackingContext||"Tracking Link",value:n.dataset.splusTrackingValue})}if(globalThis.dataLayer=globalThis.dataLayer||[],n("js",new Date),n("config","G-YM6B00RDYC",{page_location:location.href.replace(/\/\d{3,}\b/g,"/*"),page_path:location.pathname.replace(/\/\d{3,}\b/g,"/*"),page_title:null,user_id:c,user_properties:{theme:r,activeBeta:i,lastEnabledVersion:s,extensionVersion:a,domain:location.host,modernTheme:l}}),e.trackEvent=function(t,e={}){var{legacyTarget:r,legacyAction:i,legacyLabel:a,legacyValue:s,id:c,context:l,value:u}=e,d=o(e,["legacyTarget","legacyAction","legacyLabel","legacyValue","id","context","value"]);let m=Object.assign({id:c,context:l,value:u},d);console.debug("[S+] Tracked event:",t,m),n("event",t,m)},t){let m=new Set,f=new MutationObserver(((t,e)=>{for(let t of document.querySelectorAll(".splus-track-clicks:not(.splus-tracked)"))m.has(t)||(t.addEventListener("click",u),t.addEventListener("auxclick",u),t.classList.add("splus-tracked"),m.add(t))}));var d=setInterval((function(){"complete"===document.readyState&&(clearInterval(d),p())}),10);function p(){f.observe(document.body,{childList:!0,subtree:!0});for(let t of document.querySelectorAll(".splus-track-clicks"))m.has(t)||(t.addEventListener("click",u),t.addEventListener("auxclick",u),t.classList.add("splus-tracked"),m.add(t))}}}()}))}},5252:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DEFAULT_THEME_NAME=e.DISCORD_URL=e.EXTENSION_WEBSITE=e.EXTENSION_NAME=void 0,e.EXTENSION_NAME="Schoology Plus",e.EXTENSION_WEBSITE="https://schoologypl.us",e.DISCORD_URL="https://discord.schoologypl.us",e.DEFAULT_THEME_NAME=e.EXTENSION_NAME},933:(t,e)=>{"use strict";function n(t,e,n,o){let r=document.createElement(t);if(e)for(let t of e)r.classList.add(t);if(n)for(let t in n)if(n[t]instanceof Object&&!(n[t]instanceof Function))for(let e in n[t])r[t][e]=n[t][e];else void 0!==t&&void 0!==n[t]&&(r[t]=n[t]);if(o)for(let t of o)r.appendChild(t);return r}function o(t,e,o){return n("span",["submit-span-wrapper","splus-modal-button"],{onclick:o},[n("input",["form-submit","splus-track-clicks"],{type:"button",value:e,id:t,dataset:{splusTrackingContext:"S+ Button"}})])}function r(...t){let e=document.createElementNS("http://www.w3.org/2000/svg","circle");e.setAttribute("cx","250"),e.setAttribute("cy","250"),e.setAttribute("r","230"),e.setAttribute("style","fill: none; stroke-width: 35px; stroke: currentColor;");let n=document.createElementNS("http://www.w3.org/2000/svg","line");n.setAttribute("x1","250"),n.setAttribute("y1","125"),n.setAttribute("x2","250"),n.setAttribute("y2","375"),n.setAttribute("style","stroke-linecap: round; stroke-width: 35px; stroke: currentColor;");let o=document.createElementNS("http://www.w3.org/2000/svg","line");o.setAttribute("x1","125"),o.setAttribute("y1","250"),o.setAttribute("x2","375"),o.setAttribute("y2","250"),o.setAttribute("style","stroke-linecap: round; stroke-width: 35px; stroke: currentColor;");let r=document.createElementNS("http://www.w3.org/2000/svg","svg");return r.setAttribute("viewBox","0 0 500 500"),r.append(e,n,o),t&&r.classList.add(...t),r}Object.defineProperty(e,"__esModule",{value:!0}),e.waitForElement=e.createSvgLogo=e.setCSSVariable=e.getParents=e.isVisible=e.getBrowser=e.createButtonWithLogo=e.createButton=e.createElement=void 0,e.createElement=n,e.createButton=o,e.createButtonWithLogo=function(t,e,n){let i=o(t,e,n),a=r();Object.assign(a.style,{verticalAlign:"middle",paddingLeft:"4px",width:"18px"}),i.prepend(a),i.style.setProperty("height","36px","important");let s=i.querySelector("input");return s.style.paddingLeft="4px",s.style.setProperty("height","36px","important"),i.style.cursor="pointer",i},e.getBrowser=function(){return void 0!==globalThis.chrome?void 0!==globalThis.browser?"Firefox":"Chrome":"Other"},e.isVisible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},e.getParents=function(t,e){var n,o=[];for(e&&(n=e.charAt(0));t&&t!==document.documentElement;t=t.parentNode)e?("."===n&&t.classList.contains(e.substr(1))&&o.push(t),"#"===n&&t.id===e.substr(1)&&o.push(t),"["===n&&t.hasAttribute(e.substr(1,e.length-1))&&o.push(t),t.tagName.toLowerCase()===e&&o.push(t)):o.push(t);return o},e.setCSSVariable=function(t,e){document.documentElement.style.setProperty(`--${t}`,null!=e?e:null)},e.createSvgLogo=r,e.waitForElement=function(t,e=50){return new Promise((n=>{let o=setInterval((()=>{let e=document.querySelector(t);e&&(clearInterval(o),n(e))}),e)}))}},2589:(t,e)=>{"use strict";function n(t){return`color:${t};border:1px solid #2A2A2A;border-radius:100%;font-size:14px;font-weight:bold;padding: 0 4px 0 4px;background-color:#2A2A2A`}Object.defineProperty(e,"__esModule",{value:!0}),e.Logger=void 0,e.Logger={log:console.log.bind(globalThis.console,"%c+",n("#81D4FA")),error:console.error.bind(globalThis.console,"%c+",n("#FF6961")),info:console.info.bind(globalThis.console,"%c+",n("white")),warn:console.warn.bind(globalThis.console,"%c+",n("#FDFD96")),trace:console.trace.bind(globalThis.console,"%c+",n("orange")),debug:console.debug.bind(globalThis.console,"%c+",n("lightgreen"))}},9229:function(t,e,n){"use strict";var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(r,i){function a(t){try{c(o.next(t))}catch(t){i(t)}}function s(t){try{c(o.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}c((o=o.apply(t,e||[])).next())}))},r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.sendNotification=e.updateLastTime=e.loadAssignmentNotifications=void 0;const i=r(n(2838)),a=n(3137),s=n(933),c=n(2589);e.loadAssignmentNotifications=function(t,e){return o(this,void 0,void 0,(function*(){let n=yield fetch(t,{credentials:"same-origin"});if(!n.ok)throw new Error("Error loading notifications: "+n);let o=yield n.json();c.Logger.log("Last new grade: "+new Date(e).toString());let r=e,a=!1;r||(r=Date.now(),a=!0);let s=document.querySelector("div")||document.body.appendChild(document.createElement("div"));s.innerHTML=i.default.sanitize(o.output);let l=s.querySelectorAll(".edge-sentence"),u=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],d=0;for(let t of Array.from(l).reverse())if(t.textContent.includes("new grade")){t.getElementsByTagName("a"),t.querySelector(".other-items-link");let e=t.querySelector(".edge-time").textContent.split(" at "),n=e[0],o=e[1],i=new Date,s=n+` ${i.getFullYear()}`,l=`${u[i.getMonth()]} ${i.getDate()} ${i.getFullYear()}`,m=Date.parse(s);m=m>Date.parse(l)?Date.parse(n+` ${i.getFullYear()-1} ${o}`):Date.parse(`${s} ${o}`),m>r&&(r=m,a=!0,d++,c.Logger.log(t))}let m=null;return d>0&&(m={type:"basic",iconUrl:"imgs/icon@128.png",title:"New grade posted",message:`${d} new assignment${1===d?" has a grade":"s have grades"}`,eventTime:Date.now(),isClickable:!0}),{notification:m,name:"assignment",count:d,lastTime:r,timeModified:a}}))},e.updateLastTime=function(t,e){return o(this,void 0,void 0,(function*(){t?(yield chrome.storage.sync.set({lastTime:e}),c.Logger.log("Set new time "+new Date(e))):c.Logger.log("No new notifications")}))},e.sendNotification=function(t,e,n){return o(this,void 0,void 0,(function*(){if(!t)return;let o=yield chrome.storage.sync.get(null);if(n=n||0==n?n:1,"Firefox"==(0,s.getBrowser)()&&delete t.requireInteraction,c.Logger.log("New notification!",t),n>0&&(!o.notifications||"enabled"==o.notifications||"badge"==o.notifications)){let t=yield chrome.action.getBadgeText({}),e=Number.parseInt(t);chrome.action.setBadgeText({text:(e?e+n:n).toString()})}else c.Logger.log("Number badge is disabled");o.notifications&&"enabled"!=o.notifications&&"popup"!=o.notifications?c.Logger.log("Popup notifications are disabled"):(chrome.notifications.create(e,t),(0,a.trackEvent)("perform_action",{id:"shown",context:"Notifications",value:e,legacyTarget:e,legacyAction:"shown",legacyLabel:"Notifications"}))}))}},3864:(t,e,n)=>{"use strict";n.d(e,{Iu:()=>f,TU:()=>m,cv:()=>c,lZ:()=>g});var o=n(3275),r=n(8359);const i=Boolean(globalThis.chrome?.scripting);function a(t){return Array.isArray(t)?t:[t]}const s=/^function \w+\(\) {[\n\s]+\[native code][\n\s]+}/;async function c(t,e,...n){if(s.test(String(e)))throw new TypeError("Native functions need to be wrapped first, like `executeFunction(1, () => alert(1))`");const{frameId:r,tabId:a}=function(t){return"object"==typeof t?t:{tabId:t,frameId:0}}(t);if(i){const[t]=await chrome.scripting.executeScript({target:{tabId:a,frameIds:[r]},func:e,args:n});return t?.result}const[c]=await o.A.tabs.executeScript(a,{code:`(${e.toString()})(...${JSON.stringify(n)})`,matchAboutBlank:!0,frameId:r});return c}function l(t){return void 0===t?void 0:[t]}async function u({tabId:t,frameId:e,files:n,allFrames:r,matchAboutBlank:a,runAt:s},{ignoreTargetErrors:c}={}){const u=Promise.all(n.map((async n=>("string"==typeof n&&(n={file:n}),i?chrome.scripting.insertCSS({target:{tabId:t,frameIds:l(e),allFrames:void 0===e?r:void 0},files:"file"in n?[n.file]:void 0,css:"code"in n?n.code:void 0}):o.A.tabs.insertCSS(t,{...n,matchAboutBlank:a,allFrames:r,frameId:e,runAt:s??"document_start"})))));c?await y(u):await u}async function d({tabId:t,frameId:e,files:n,allFrames:r,matchAboutBlank:a,runAt:s},{ignoreTargetErrors:c}={}){const u=n.map((t=>"string"==typeof t?{file:t}:t));if(i){!function(t){if(t.some((t=>"code"in t)))throw new Error("chrome.scripting does not support injecting strings of `code`")}(u);const n=chrome.scripting.executeScript({target:{tabId:t,frameIds:l(e),allFrames:void 0===e?r:void 0},files:u.map((({file:t})=>t))});return void(c?await y(n):await n)}const d=[];for(const n of u)"code"in n&&await d.at(-1),d.push(o.A.tabs.executeScript(t,{...n,matchAboutBlank:a,allFrames:r,frameId:e,runAt:s}));c?await y(Promise.all(d)):await Promise.all(d)}async function m(t,e){if(0===t.length)return[];const n=e?(0,r.pb)(...e):void 0;return(await o.A.tabs.query({url:t})).filter((t=>t.id&&t.url&&(!n||!n.test(t.url)))).map((t=>t.id))}async function f(t,e,n={}){const o=a(t);await Promise.all(o.map((async t=>async function({frameId:t,tabId:e,allFrames:n},o,r={}){const i=a(o).flatMap((o=>[u({tabId:e,frameId:t,allFrames:n,files:o.css??[],matchAboutBlank:o.matchAboutBlank??o.match_about_blank,runAt:o.runAt??o.run_at},r),d({tabId:e,frameId:t,allFrames:n,files:o.js??[],matchAboutBlank:o.matchAboutBlank??o.match_about_blank,runAt:o.runAt??o.run_at},r)]));await Promise.all(i)}(function(t){return"object"==typeof t?{...t,allFrames:!1}:{tabId:t,frameId:void 0,allFrames:!0}}(t),e,n))))}const p=["chrome.google.com/webstore","chromewebstore.google.com","accounts-static.cdn.mozilla.net","accounts.firefox.com","addons.cdn.mozilla.net","addons.mozilla.org","api.accounts.firefox.com","content.cdn.mozilla.net","discovery.addons.mozilla.org","input.mozilla.org","install.mozilla.org","oauth.accounts.firefox.com","profile.accounts.firefox.com","support.mozilla.org","sync.services.mozilla.com","testpilot.firefox.com"];function g(t){if(!t?.startsWith("http"))return!1;const e=t.replace(/^https?:\/\//,"");return p.every((t=>!e.startsWith(t)))}const h=/^No frame with id \d+ in tab \d+.$|^No tab with id: \d+.$|^The tab was closed.$|^The frame was removed.$/;async function y(t){try{await t}catch(t){if(!h.test(t?.message))throw t}}},3787:(t,e,n)=>{"use strict";n.r(e);var o=n(8359);function r(){return function(t){var e,n,o;const r={origins:[],permissions:[]},i=new Set([...null!==(e=t.permissions)&&void 0!==e?e:[],...(null!==(n=t.content_scripts)&&void 0!==n?n:[]).flatMap((t=>{var e;return null!==(e=t.matches)&&void 0!==e?e:[]}))]);t.devtools_page&&!(null===(o=t.optional_permissions)||void 0===o?void 0:o.includes("devtools"))&&i.add("devtools");for(const t of i)t.includes("://")?r.origins.push(t):r.permissions.push(t);return r}(chrome.runtime.getManifest())}const i=/:[/][/][*.]*([^/]+)/;function a(t){return t.split(i)[1]}var s=n(3864),c=n(3275);const l="Type error for parameter contentScriptOptions (Error processing matches: Array requires at least 1 items; you have 0) for contentScripts.register.",u="Permission denied to register a content script for ",d="object"==typeof chrome&&"webNavigation"in chrome;const m=globalThis.chrome?.scripting?.registerContentScripts,f=globalThis.browser?.contentScripts?.register;async function p(t){if(m){const e="webext-dynamic-content-script-"+JSON.stringify(t);try{await m([{...t,id:e}])}catch(t){if(!t?.message.startsWith("Duplicate script ID"))throw t}return{unregister:async()=>chrome.scripting.unregisterContentScripts({ids:[e]})}}const e={...t,js:t.js?.map((t=>({file:t}))),css:t.css?.map((t=>({file:t})))};return f?f(e):async function(t,e){const{js:n=[],css:r=[],matchAboutBlank:i,matches:a=[],excludeMatches:m,runAt:f}=t;let{allFrames:p}=t;if(d?p=!1:p&&console.warn("`allFrames: true` requires the `webNavigation` permission to work correctly: https://github.com/fregante/content-scripts-register-polyfill#permissions"),0===a.length)throw new Error(l);await Promise.all(a.map((async t=>{if(!await c.A.permissions.contains({origins:[t]}))throw new Error(u+t)})));const g=(0,o.pb)(...a),h=(0,o.pb)(...null!=m?m:[]),y=async(t,e,o=0)=>{g.test(t)&&!h.test(t)&&await async function(t){return c.A.permissions.contains({origins:[new URL(t).origin+"/*"]})}(t)&&await(0,s.Iu)({tabId:e,frameId:o},{css:r,js:n,matchAboutBlank:i,runAt:f},{ignoreTargetErrors:!0})},b=async(t,{status:e},{url:n})=>{"loading"===e&&n&&y(n,t)},v=async({tabId:t,frameId:e,url:n})=>{y(n,t,e)};d?chrome.webNavigation.onCommitted.addListener(v):chrome.tabs.onUpdated.addListener(b);const w={async unregister(){d?chrome.webNavigation.onCommitted.removeListener(v):chrome.tabs.onUpdated.removeListener(b)}};return"function"==typeof e&&e(w),w}(e)}const g=new Map;function h(t){return new URL(t,location.origin).pathname}async function y({origins:t}){const{content_scripts:e,manifest_version:n}=chrome.runtime.getManifest();if(!e)throw new Error("webext-dynamic-content-scripts tried to register scripts on the new host permissions, but no content scripts were found in the manifest.");const o=function(t,{warn:e=!0}={}){const n=new Map,o=(t,o)=>t?t.filter((t=>{const r=(i=o,JSON.stringify([i.all_frames,i.exclude_matches,i.run_at]));var i;return n.has(t)?(e&&r!==n.get(t)&&console.warn(`Duplicate file in the manifest content_scripts: ${t} \nMore info: https://github.com/fregante/webext-dynamic-content-scripts/issues/62`),!1):(n.set(t,r),!0)})):[];return t.flatMap((t=>{const{matches:e,...n}=t,r={...n,js:o(t.js,t),css:o(t.css,t)};return r.css.length+r.js.length===0?[]:r}))}(e,{warn:2===n});for(const e of t||[])for(const t of o){const n=p({js:t.js?.map((t=>h(t))),css:t.css?.map((t=>h(t))),allFrames:t.all_frames,matches:[e],excludeMatches:t.matches,runAt:t.run_at});g.set(e,n)}!async function(t,e){const n=e.flatMap((t=>t.matches??[]));(0,s.Iu)(await(0,s.TU)(t,n),e,{ignoreTargetErrors:!0})}(t||[],o)}function b(t){t.origins&&t.origins.length>0&&y(t)}async function v({origins:t}){if(t&&0!==t.length)for(const[e,n]of g)t.includes(e)&&(await n).unregister()}!async function(){chrome.permissions.onRemoved.addListener(v),chrome.permissions.onAdded.addListener(b),await y(await async function(t){return new Promise((e=>{chrome.permissions.getAll((n=>{const o=r();e(function(t,e,{strictOrigins:n=!0}={}){var o,r;const i={origins:[],permissions:[]};for(const r of null!==(o=e.origins)&&void 0!==o?o:[])if(!t.origins.includes(r)){if(!n){const e=a(r);if(t.origins.some((t=>a(t)===e)))continue}i.origins.push(r)}for(const n of null!==(r=e.permissions)&&void 0!==r?r:[])t.permissions.includes(n)||i.permissions.push(n);return i}(o,n,t))}))}))}({strictOrigins:!1}))}()},8359:(t,e,n)=>{"use strict";n.d(e,{pQ:()=>c,pb:()=>s});const o=/^(https?|wss?|file|ftp|\*):\/\/(\*|\*\.[^*/]+|[^*/]+)\/.*$|^file:\/\/\/.*$|^resource:\/\/(\*|\*\.[^*/]+|[^*/]+)\/.*$|^about:/,r=globalThis.navigator?.userAgent.includes("Firefox/"),i=r?/^(https?|wss?):[/][/][^/]+([/].*)?$/:/^https?:[/][/][^/]+([/].*)?$/,a=/^(https?|file|ftp):[/]+/;function s(...t){return 0===t.length?/$./:t.includes("<all_urls>")?a:t.includes("*://*/*")?i:new RegExp(t.map((t=>function(t){!function(t){if(!function(t){return"<all_urls>"===t||o.test(t)}(t))throw new Error(t+" is an invalid pattern, it must match "+String(o))}(t);let[,e,n="",i]=t.split(/(^[^:]+:[/][/])([^/]+)?/);return e=e.replace("*",r?"(https?|wss?)":"https?").replaceAll(/[/]/g,"[/]"),"*"===n?n="[^/]+":n&&(n=n.replace(/^[*][.]/,"([^/]+.)*").replaceAll(/[.]/g,"[.]").replace(/[*]$/,"[^.]+")),i=i.replaceAll(/[/]/g,"[/]").replaceAll(/[.]/g,"[.]").replaceAll(/[*]/g,".*"),"^"+e+n+"("+i+")?$"}(t))).join("|"))}function c(t){return t.includes("<all_urls>")?["<all_urls>"]:t.includes("*://*/*")?["*://*/*"]:t.filter((e=>!t.some((t=>e!==t&&s(t).test(e)))))}},1547:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>P});var o=n(3275);function r(t){if(!t)return!1;try{const{pathname:e}=new URL(t,location.origin);return e===location.pathname}catch{return!1}}function i(t){return globalThis.chrome?.runtime?.getManifest?.()}function a(t){let e;return()=>(void 0!==e||(e=t()),e)}const s=a((()=>["about:","http:","https:"].includes(location.protocol))),c=a((()=>"object"==typeof globalThis.chrome?.extension)),l=a((()=>c()&&s())),u=()=>d()||m(),d=a((()=>{const t=i();return!(!t||!r(t.background_page??t.background?.page))||Boolean(t?.background?.scripts&&r("/_generated_background_page.html"))})),m=a((()=>r(i()?.background?.service_worker))),f=a((()=>d()&&2===i()?.manifest_version&&!1!==i()?.background?.persistent)),p=a((()=>{const t=i()?.options_ui?.page;return"string"==typeof t&&new URL(t,location.origin).pathname===location.pathname})),g=a((()=>{const t=i()?.side_panel?.default_path;return"string"==typeof t&&new URL(t,location.origin).pathname===location.pathname})),h=a((()=>{const t=c()&&chrome.devtools&&i()?.devtools_page;return"string"==typeof t&&new URL(t,location.origin).pathname===location.pathname})),y=()=>globalThis.navigator?.userAgent.includes("Chrome"),b={contentScript:l,background:u,options:p,sidePanel:g,devTools:()=>Boolean(globalThis.chrome?.devtools),devToolsPage:h,extension:c,web:s};Object.keys(b);var v=n(8359);var w=n(3864);async function x(t){const{frameId:e,tabId:n}=function(t){return"object"==typeof t?t:{tabId:t,frameId:0}}(t);try{if(0===e&&"tabs"in globalThis.chrome){const t=await o.A.tabs.get(n);if(t.url)return t.url}return await(0,w.cv)(t,(()=>location.href))}catch{return}}new class{#t;#e=new AbortController;get signal(){return this.#t||(this.#t=setInterval((()=>{T()&&(this.#e.abort(),clearInterval(this.#t))}),200)),this.#e.signal}get promise(){return new Promise((t=>{this.addListener(t)}))}addListener(t,{signal:e}={}){!this.signal.aborted||e?.aborted?this.signal.addEventListener("abort",t,{once:!0,signal:e}):setTimeout(t,0)}};const T=()=>!chrome.runtime?.id,A="__webext-events__startup",k=new EventTarget;let _=!1,E=!1;const S=globalThis.browser?.storage??globalThis.chrome?.storage;function L(){const t=document.querySelector("button");t.addEventListener("click",(t=>{window.close()})),window.addEventListener("blur",(t=>{window.close()})),window.resizeBy(0,document.body.scrollHeight-window.innerHeight),window.moveTo((screen.width-window.outerWidth)/2,(screen.height-window.outerHeight)/2),t.focus()}Object.freeze({addListener(t){_?console.warn("onExtensionStart.addListener() was called after the extension started. The callback will not be called."):(E=!0,k.addEventListener("extension-start",t))},removeListener(t){k.removeEventListener("extension-start",t)}}),setTimeout((async function(){if(_=!0,!E)return;if(f())return void k.dispatchEvent(new Event("extension-start"));if(!S?.session)return y()&&2===chrome.runtime.getManifest().manifest_version?console.warn("onExtensionStart is unable to determine whether it’s being run for the first time on MV2 Event Pages in Chrome. It will run the listeners anyway."):console.warn("onExtensionStart is unable to determine whether it’s being run for the first time without the `storage` permission. It will run the listeners anyway"),void k.dispatchEvent(new Event("extension-start"));const t=await S.session.get(A);A in t||(await S.session.set({[A]:!0}),k.dispatchEvent(new Event("extension-start")))}),100);function M(t=""){return`\n\t\t<!doctype html>\n\t\t<meta charset="utf-8" />\n\t\t<title>${chrome.runtime.getManifest().name}</title>\n\t\t<style>\n\t/*! https://npm.im/webext-base-css */\n\n\t/* Chrome only: -webkit-hyphens */\n\t/* Safari only: _::-webkit-full-page-media */\n\n\t/* webpackIgnore: true */\n\t@import url('chrome://global/skin/in-content/common.css') (min--moz-device-pixel-ratio:0); /* Firefox-only */\n\n\t:root {\n\t\t--background-color-for-chrome: #292a2d;\n\t\tmax-width: 700px;\n\t\tmargin: auto;\n\t}\n\n\tbody {\n\t\t--body-margin-h: 8px;\n\t\tmargin-left: var(--body-margin-h);\n\t\tmargin-right: var(--body-margin-h);\n\t}\n\n\t/* Selector matches Firefox’ */\n\tinput[type='number'],\n\tinput[type='password'],\n\tinput[type='search'],\n\tinput[type='text'],\n\tinput[type='url'],\n\tinput:not([type]),\n\ttextarea {\n\t\tdisplay: block;\n\t\tbox-sizing: border-box;\n\t\tmargin-left: 0;\n\t\twidth: 100%;\n\t\tresize: vertical;\n\t\t-moz-tab-size: 4 !important;\n\t\ttab-size: 4 !important;\n\t}\n\n\tinput[type='checkbox'] {\n\t\tvertical-align: -0.15em;\n\t}\n\n\t@supports (not (-webkit-hyphens:none)) and (not (-moz-appearance:none)) and (list-style-type:'*') {\n\t\ttextarea:focus {\n\t\t\t/* Inexplicably missing from Chrome’s input style https://github.com/chromium/chromium/blob/6bea0557fe/extensions/renderer/resources/extension.css#L287 */\n\t\t\tborder-color: #4d90fe;\n\t\t\ttransition: border-color 200ms;\n\t\t}\n\t}\n\n\thr {\n\t\tmargin-right: calc(-1 * var(--body-margin-h));\n\t\tmargin-left: calc(-1 * var(--body-margin-h));\n\t\tborder: none;\n\t\tborder-bottom: 1px solid #aaa4;\n\t}\n\n\timg {\n\t\tvertical-align: middle;\n\t}\n\n\t_::-webkit-full-page-media,\n\t_:future,\n\t:root {\n\t\tfont-family: -apple-system, BlinkMacSystemFont, sans-serif, 'Apple Color Emoji';\n\t}\n\n\t_::-webkit-full-page-media,\n\t_:future,\n\tinput[type='number'],\n\tinput[type='password'],\n\tinput[type='search'],\n\tinput[type='text'],\n\tinput[type='url'],\n\tinput:not([type]),\n\ttextarea {\n\t\tborder: solid 1px #888;\n\t\tpadding: 0.4em;\n\t\tfont: inherit;\n\t\t-webkit-appearance: none;\n\t}\n\n\t@media (prefers-color-scheme: dark) {\n\t\t:root {\n\t\t\tcolor-scheme: dark;\n\t\t\tbackground-color: var(--background-color-for-chrome);\n\t\t}\n\n\t\tbody,\n\t\th3 { /* Chrome #3 */\n\t\t\tcolor: #e8eaed;\n\t\t}\n\n\t\ta {\n\t\t\tcolor: var(--link-color, #8ab4f8);\n\t\t}\n\n\t\ta:active {\n\t\t\tcolor: var(--link-color-active, #b6d3f9);\n\t\t}\n\n\t\tinput[type='number'],\n\t\tinput[type='password'],\n\t\tinput[type='search'],\n\t\tinput[type='text'],\n\t\tinput[type='url'],\n\t\tinput:not([type]),\n\t\ttextarea {\n\t\t\tcolor: inherit;\n\t\t\tbackground-color: transparent;\n\t\t}\n\t}\n\n\t/* End webext-base-css */\n\n\tbody {\n\t\tbox-sizing: border-box;\n\t\tmin-height: 100vh;\n\t\tmargin: 0;\n\t\tpadding: 1em;\n\t\tjustify-content: center;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tfont-size: 14px;\n\t\tline-height: 1.5;\n\t\tfont-family: system, system-ui, sans-serif;\n\t}\n\n\tbutton {\n\t\tmargin-top: 1em;\n\t\tmargin-left: auto;\n\t}\n</style>\n\t\t<script defer src="alert.js"><\/script>\n\t\t<body>\n\t\t\t<main>${t}</main>\n\t\t\t<button>Ok</button>\n\t\t</body>\n\t\t<script>(${L.toString()})()<\/script>\n\t`}const I=m()||!y()&&d()?async function(t){const e=await chrome.windows.create({type:"popup",url:"data:text/html,"+encodeURIComponent(M(t)),focused:!0,height:150,width:420});await async function(t){await async function(t,e){await new Promise((n=>{const o=(...r)=>{e&&!e(...r)||(n(),t.removeListener(o))};t.addListener(o)}))}(chrome.windows.onRemoved,(e=>e===t))}(e.id)}:alert,N="webext-permission-toggle:add-permission";let O;const D=y()&&globalThis.chrome?.runtime?.getManifest().manifest_version<3?o.A:chrome;async function R(t){return D.permissions.contains({origins:[t+"/*"]})}function C({checked:t,enabled:e}){chrome.contextMenus.update(N,{checked:t,enabled:e})}async function F(t){if(t)if((0,w.lZ)(t)){const{origin:e}=new URL(t),n=function(t,e=chrome.runtime.getManifest()){const n=function(t=chrome.runtime.getManifest()){const e={origins:[],permissions:[]},n=new Set([...t.permissions??[],...t.host_permissions??[],...(t.content_scripts??[]).flatMap((t=>t.matches??[]))]);t.devtools_page&&!t.optional_permissions?.includes("devtools")&&n.add("devtools");for(const t of n)t.includes("://")||"<all_urls>"===t?e.origins.push(t):e.permissions.push(t);return function({origins:t,permissions:e}){return{origins:t?(0,v.pQ)(t):[],permissions:e?[...e]:[]}}(e)}(e);return(0,v.pb)(...n.origins).test(t)}(t);C({enabled:!n,checked:n||await R(e)})}else C({enabled:!1,checked:!1});else C({enabled:!0,checked:!1})}async function j({tabId:t}){F(await x(t)??"")}async function B({checked:t,menuItemId:e},n){if(e!==N)return;let o;try{!function(t){if(!t?.id)throw new Error("The browser didn't supply any information about the active tab.")}(n),o=n.url??await x(n.id),function(t){if(!t)throw new Error("The browser didn't supply the current page's URL.")}(o),function(t){if(!(0,w.lZ)(t))throw new Error(chrome.runtime.getManifest().name+" can't be enabled on this page.")}(o);const e=await async function(t,e){const n={origins:[new URL(t).origin+"/*"]};return await D.permissions[e?"request":"remove"](n),D.permissions.contains(n)}(o,t);e===t||C({checked:e}),e&&O.reloadOnSuccess&&(0,w.cv)(n.id,(t=>{confirm(t)&&location.reload()}),O.reloadOnSuccess)}catch(t){if(setTimeout(F,500,o),n?.id)try{await(0,w.cv)(n.id,(t=>{window.alert(t)}),String(t))}catch{I(String(t))}throw t}}function P(t){if(!u())throw new Error("webext-permission-toggle can only be called from a background page");if(O)throw new Error("webext-permission-toggle can only be initialized once");const e=chrome.runtime.getManifest();if(!e.permissions?.includes("contextMenus"))throw new Error("webext-permission-toggle requires the `contextMenus` permission");if(!chrome.contextMenus)return void console.warn("chrome.contextMenus is not available");O={title:`Enable ${e.name} on this domain`,reloadOnSuccess:!1,...t},!0===O.reloadOnSuccess&&(O.reloadOnSuccess=`Do you want to reload this page to apply ${e.name}?`);const n=[...e.optional_permissions??[],...e.optional_host_permissions??[]].filter((t=>"<all_urls>"===t||t.includes("*")));if(0===n.length)throw new TypeError("webext-permission-toggle requires some wildcard hosts to be specified in `optional_permissions` (MV2) or `optional_host_permissions` (MV3)");chrome.contextMenus.remove(N,(()=>chrome.runtime.lastError));const o=2===e.manifest_version?["page_action","browser_action"]:["action"];chrome.contextMenus.create({id:N,type:"checkbox",checked:!1,title:O.title,contexts:o,documentUrlPatterns:n}),chrome.contextMenus.onClicked.addListener(B),chrome.tabs.onActivated.addListener(j),chrome.tabs.onUpdated.addListener((async(t,{status:e},{url:n,active:o})=>{o&&"complete"===e&&F(n??await x(t)??"")}))}},3275:(t,e,n)=>{"use strict";n.d(e,{A:()=>o});const o=globalThis.chrome&&new function t(e){return new Proxy(e,{get(e,n){if(e[n])return"function"!=typeof e[n]?new t(e[n]):(...t)=>new Promise(((o,r)=>{e[n](...t,(t=>{chrome.runtime.lastError?r(new Error(chrome.runtime.lastError.message)):o(t)}))}))}})}(globalThis.chrome)}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={exports:{}};return t[o].call(i.exports,i,i.exports,n),i.exports}n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(723)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,